Repository: plone.app.blob


Branch: refs/heads/master
Date: 2018-01-31T18:07:09+01:00
Author: Davi Lima (davilima6) <davilima6@gmail.com>
Commit: https://github.com/plone/plone.app.blob/commit/169b6d85dc25fe47dc42abbc028ecd8e0601718b

More Python 2 / 3 compatibility adjustments

Files changed:
M CHANGES.rst
M src/plone/app/blob/iterators.py
M src/plone/app/blob/tests/test_integration.py
M src/plone/app/blob/tests/test_replacements.py
M src/plone/app/blob/tests/utils.py

diff --git a/CHANGES.rst b/CHANGES.rst
index 64f1c6d..0c4c818 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -10,12 +10,12 @@ Breaking changes:
 
 New features:
 
-- *add item here*
+- Prepare for Python 2 / 3 compatibility
+  [davilima6, rudaporto]
 
 Bug fixes:
 
-- Fix some Python 2 / 3 compatible imports and string types with six.
-  [rudaporto]
+- *add item here*
 
 
 1.7.3 (2017-11-24)
@@ -97,6 +97,7 @@ Bug fixes:
 - Update code to follow Plone styleguide.
   [gforcada]
 
+
 1.6.4 (2016-08-12)
 ------------------
 
diff --git a/src/plone/app/blob/iterators.py b/src/plone/app/blob/iterators.py
index 1f1e8e9..7d7a759 100644
--- a/src/plone/app/blob/iterators.py
+++ b/src/plone/app/blob/iterators.py
@@ -21,7 +21,8 @@ def __init__(self, blob, mode='r', streamsize=1 << 16, start=0, end=None):
         self.end = end
         self.seek(start, 0)
 
-    def next(self):
+    def __next__(self):
+        # Python 3
         """ return next chunk of data from the blob, taking the optionally
             given range into consideration """
         if self.end is None:
@@ -33,6 +34,8 @@ def next(self):
             raise StopIteration
         return data
 
+    next = __next__  # Python 2
+
     def __len__(self):
         return fstat(self.blob.fileno()).st_size
 
diff --git a/src/plone/app/blob/tests/test_integration.py b/src/plone/app/blob/tests/test_integration.py
index fd5c55a..ac662e2 100644
--- a/src/plone/app/blob/tests/test_integration.py
+++ b/src/plone/app/blob/tests/test_integration.py
@@ -138,13 +138,13 @@ def testRangeSupport(self):
         request = self.folder.REQUEST
         request.environ['HTTP_RANGE'] = 'bytes=2-10'
         iterator = blob.download(request)
-        self.assertEqual(data[2:10 + 1], iterator.next())
+        self.assertEqual(data[2:10 + 1], next(iterator))
         # ranges should also work with multiple chunks read from the blob
         request.environ['HTTP_RANGE'] = 'bytes=2-10'
         iterator = blob.download(request)
         iterator.streamsize = 5
-        self.assertEqual(data[2:2 + 5], iterator.next())
-        self.assertEqual(data[2 + 5:10 + 1], iterator.next())
+        self.assertEqual(data[2:2 + 5], next(iterator))
+        self.assertEqual(data[2 + 5:10 + 1], next(iterator))
         # open and suffix ranges also have to work
         request.environ['HTTP_RANGE'] = 'bytes=2-'
         iterator = blob.download(request)
diff --git a/src/plone/app/blob/tests/test_replacements.py b/src/plone/app/blob/tests/test_replacements.py
index 912668a..22e4c70 100644
--- a/src/plone/app/blob/tests/test_replacements.py
+++ b/src/plone/app/blob/tests/test_replacements.py
@@ -58,7 +58,7 @@ def testCreateFileBlob(self):
         request = foo.REQUEST
         response = request.RESPONSE
         index = foo.index_html(request, response)
-        self.assertEqual(index.next(), 'plain text')
+        self.assertEqual(next(index), 'plain text')
         self.assertEqual(response.getStatus(), 200)
         self.assertEqual(response.headers['content-length'], '10')
         self.assertTrue(
@@ -262,7 +262,7 @@ def testCreateImageBlob(self):
         # `index_html` should return a stream-iterator
         request = foo.REQUEST
         response = request.RESPONSE
-        self.assertEqual(foo.index_html(request, response).next(), gif)
+        self.assertEqual(next(foo.index_html(request, response)), gif)
         self.assertEqual(response.getStatus(), 200)
         self.assertEqual(response.headers['content-length'], '43')
         self.assertEqual(response.headers['content-type'], 'image/gif')
diff --git a/src/plone/app/blob/tests/utils.py b/src/plone/app/blob/tests/utils.py
index 4f94b1c..6039df3 100644
--- a/src/plone/app/blob/tests/utils.py
+++ b/src/plone/app/blob/tests/utils.py
@@ -71,6 +71,6 @@ def hasSchemaExtender():
     except ImportError:
         msg = 'WARNING: archetypes.schemaextender not found. Skipping tests.'
         print '*' * len(msg)
-        print msg
+        print(msg)
         print '*' * len(msg)
         return False


Repository: plone.app.blob


Branch: refs/heads/master
Date: 2018-01-31T18:25:23+01:00
Author: Davi Lima (davilima6) <davilima6@gmail.com>
Commit: https://github.com/plone/plone.app.blob/commit/a949662d578944aa67b847f8a779c9d50bab87ac

Prefer newer ZCA decorators instead of class advices

Files changed:
M src/plone/app/blob/adapters/atfile.py
M src/plone/app/blob/adapters/atimage.py
M src/plone/app/blob/adapters/blobwrapper.py
M src/plone/app/blob/adapters/file.py
M src/plone/app/blob/adapters/fileupload.py
M src/plone/app/blob/adapters/ofsfile.py
M src/plone/app/blob/adapters/pdata.py
M src/plone/app/blob/adapters/stringio.py
M src/plone/app/blob/adapters/webdav.py
M src/plone/app/blob/adapters/xmlrpc.py
M src/plone/app/blob/interfaces.py
M src/plone/app/blob/iterators.py
M src/plone/app/blob/scale.py
M src/plone/app/blob/tests/extender.py

diff --git a/src/plone/app/blob/adapters/atfile.py b/src/plone/app/blob/adapters/atfile.py
index fcec06f..71d3427 100644
--- a/src/plone/app/blob/adapters/atfile.py
+++ b/src/plone/app/blob/adapters/atfile.py
@@ -2,14 +2,14 @@
 from plone.app.blob.adapters.ofsfile import BlobbableOFSFile
 from plone.app.blob.interfaces import IBlobbable
 from Products.ATContentTypes.interface import IATFile
-from zope.component import adapts
+from zope.component import adapter
 from zope.interface import implementer
 
 
+@adapter(IATFile)
 @implementer(IBlobbable)
 class BlobbableATFile(BlobbableOFSFile):
     """ adapter for ATFile objects to work with blobs """
-    adapts(IATFile)
 
     def filename(self):
         """ see interface ... """
diff --git a/src/plone/app/blob/adapters/atimage.py b/src/plone/app/blob/adapters/atimage.py
index a28ac67..0a558fc 100644
--- a/src/plone/app/blob/adapters/atimage.py
+++ b/src/plone/app/blob/adapters/atimage.py
@@ -1,18 +1,17 @@
 # -*- coding: utf-8 -*-
 from plone.app.blob.adapters.atfile import BlobbableATFile
 from Products.ATContentTypes.interfaces import IATImage
-from zope.component import adapts
+from zope.component import adapter
 
 
+@adapter(IATImage)
 class BlobbableATImage(BlobbableATFile):
     """ adapter for ATImage objects to work with blobs """
-    adapts(IATImage)
 
     def feed(self, blob):
         """ see interface ... """
         data = self.context.getImageAsFile()
         if data is None:
             return
-        blobfile = blob.open('w')
-        blobfile.write(data.read())     # TODO: use copy or an iterator!!
-        blobfile.close()
+        with blob.open('w') as blobfile:
+            blobfile.write(data.read())
diff --git a/src/plone/app/blob/adapters/blobwrapper.py b/src/plone/app/blob/adapters/blobwrapper.py
index 7ac17d7..40cc4dd 100644
--- a/src/plone/app/blob/adapters/blobwrapper.py
+++ b/src/plone/app/blob/adapters/blobwrapper.py
@@ -2,14 +2,14 @@
 from plone.app.blob.field import ReuseBlob
 from plone.app.blob.interfaces import IBlobbable
 from plone.app.blob.interfaces import IBlobWrapper
-from zope.component import adapts
+from zope.component import adapter
 from zope.interface import implementer
 
 
+@adapter(IBlobWrapper)
 @implementer(IBlobbable)
 class BlobbableBlobWrapper(object):
     """ adapter for BlobWrapper objects to work with blobs """
-    adapts(IBlobWrapper)
 
     def __init__(self, context):
         self.context = context
diff --git a/src/plone/app/blob/adapters/file.py b/src/plone/app/blob/adapters/file.py
index b989a4a..dced0eb 100644
--- a/src/plone/app/blob/adapters/file.py
+++ b/src/plone/app/blob/adapters/file.py
@@ -1,14 +1,14 @@
 # -*- coding: utf-8 -*-
 from plone.app.blob.interfaces import IBlobbable
 from plone.app.blob.utils import guessMimetype
-from zope.component import adapts
+from zope.component import adapter
 from zope.interface import implementer
 
 
+@adapter(file)
 @implementer(IBlobbable)
 class BlobbableFile(object):
     """ adapter for Python file objects to work with blobs """
-    adapts(file)
 
     def __init__(self, context):
         self.context = context
@@ -17,9 +17,8 @@ def feed(self, blob):
         """ see interface ... """
         pos = self.context.tell()
         self.context.seek(0)
-        blobfile = blob.open('w')
-        blobfile.writelines(self.context)
-        blobfile.close()
+        with blob.open('w') as blobfile:
+            blobfile.writelines(self.context)
         self.context.seek(pos)
 
     def filename(self):
diff --git a/src/plone/app/blob/adapters/fileupload.py b/src/plone/app/blob/adapters/fileupload.py
index b5a8c74..7973e97 100644
--- a/src/plone/app/blob/adapters/fileupload.py
+++ b/src/plone/app/blob/adapters/fileupload.py
@@ -7,14 +7,14 @@
 from plone.app.blob.utils import guessMimetype
 from shutil import copyfileobj
 from ZODB.blob import Blob
-from zope.component import adapts
+from zope.component import adapter
 from zope.interface import implementer
 
 
+@adapter(IFileUpload)
 @implementer(IBlobbable)
 class BlobbableFileUpload(object):
     """ adapter for FileUpload objects to work with blobs """
-    adapts(IFileUpload)
 
     def __init__(self, context):
         self.context = context
@@ -30,17 +30,15 @@ def feed(self, blob):
         filename = getattr(self.context, 'name', None)
         if os_name == 'nt' and filename is not None:
             # for now a copy is needed on windows...
-            blobfile = blob.open('w')
-            copyfileobj(self.context, blobfile)
-            blobfile.close()
+            with blob.open('w') as blobfile:
+                copyfileobj(self.context, blobfile)
         elif filename is not None:
             assert isfile(filename), 'invalid file for blob: {0}'.format(filename)  # noqa
             blob.consumeFile(filename)
-        else:   # the cgi module only creates a tempfile for 1000+ bytes
-            self.context.seek(0)    # just to be sure we copy everything...
-            blobfile = blob.open('w')
-            blobfile.write(self.context.read())
-            blobfile.close()
+        else:  # the cgi module only creates a tempfile for 1000+ bytes
+            self.context.seek(0)  # just to be sure we copy everything...
+            with blob.open('w') as blobfile:
+                blobfile.write(self.context.read())
 
     def filename(self):
         """ see interface ... """
diff --git a/src/plone/app/blob/adapters/ofsfile.py b/src/plone/app/blob/adapters/ofsfile.py
index c25745b..79445b9 100644
--- a/src/plone/app/blob/adapters/ofsfile.py
+++ b/src/plone/app/blob/adapters/ofsfile.py
@@ -1,23 +1,22 @@
 # -*- coding: utf-8 -*-
 from plone.app.blob.interfaces import IBlobbable
 from plone.app.blob.interfaces import IOFSFile
-from zope.component import adapts
+from zope.component import adapter
 from zope.interface import implementer
 
 
+@adapter(IOFSFile)
 @implementer(IBlobbable)
 class BlobbableOFSFile(object):
     """ adapter for OFS.File objects to work with blobs """
-    adapts(IOFSFile)
 
     def __init__(self, context):
         self.context = context
 
     def feed(self, blob):
         """ see interface ... """
-        blobfile = blob.open('w')
-        blobfile.write(str(self.context.data))  # TODO: use an iterator!!
-        blobfile.close()
+        with blob.open('w') as blobfile:
+            blobfile.write(str(self.context.data))
 
     def filename(self):
         """ see interface ... """
diff --git a/src/plone/app/blob/adapters/pdata.py b/src/plone/app/blob/adapters/pdata.py
index d1daa75..e7fede5 100644
--- a/src/plone/app/blob/adapters/pdata.py
+++ b/src/plone/app/blob/adapters/pdata.py
@@ -3,27 +3,26 @@
 from plone.app.blob.interfaces import IBlobbable
 from plone.app.blob.utils import guessMimetype
 from six import StringIO
-from zope.component import adapts
+from zope.component import adapter
 from zope.interface import implementer
 
 
+@adapter(Pdata)
 @implementer(IBlobbable)
 class BlobbablePdata(object):
     """ adapter for Python file objects to work with blobs """
-    adapts(Pdata)
 
     def __init__(self, context):
         self.context = context
 
     def feed(self, blob):
         """ see interface ... """
-        blobfile = blob.open('w')
-        blobfile.write(self.context.data)
-        chunk = self.context
-        while chunk.next is not None:
-            chunk = chunk.next
-            blobfile.write(chunk.data)
-        blobfile.close()
+        with blob.open('w') as blobfile:
+            blobfile.write(self.context.data)
+            chunk = self.context
+            while chunk.next is not None:
+                chunk = chunk.next
+                blobfile.write(chunk.data)
 
     def filename(self):
         """ see interface ... """
diff --git a/src/plone/app/blob/adapters/stringio.py b/src/plone/app/blob/adapters/stringio.py
index 7085974..8b7607d 100644
--- a/src/plone/app/blob/adapters/stringio.py
+++ b/src/plone/app/blob/adapters/stringio.py
@@ -2,14 +2,14 @@
 from plone.app.blob.interfaces import IBlobbable
 from plone.app.blob.utils import guessMimetype
 from six import StringIO
-from zope.component import adapts
+from zope.component import adapter
 from zope.interface import implementer
 
 
+@adapter(StringIO)
 @implementer(IBlobbable)
 class BlobbableStringIO(object):
     """ adapter for StringIO instance to work with blobs """
-    adapts(StringIO)
 
     def __init__(self, context):
         self.context = context
diff --git a/src/plone/app/blob/adapters/webdav.py b/src/plone/app/blob/adapters/webdav.py
index d382acd..9f4dc8d 100644
--- a/src/plone/app/blob/adapters/webdav.py
+++ b/src/plone/app/blob/adapters/webdav.py
@@ -2,14 +2,14 @@
 from plone.app.blob.interfaces import IBlobbable
 from plone.app.blob.interfaces import IWebDavUpload
 from plone.app.blob.utils import guessMimetype
-from zope.component import adapts
+from zope.component import adapter
 from zope.interface import implementer
 
 
+@adapter(IWebDavUpload)
 @implementer(IBlobbable)
 class BlobbableWebDavUpload(object):
     """ adapter for WebDavUpload objects to work with blobs """
-    adapts(IWebDavUpload)
 
     def __init__(self, context):
         self.context = context
diff --git a/src/plone/app/blob/adapters/xmlrpc.py b/src/plone/app/blob/adapters/xmlrpc.py
index 5f9b920..220e1f8 100644
--- a/src/plone/app/blob/adapters/xmlrpc.py
+++ b/src/plone/app/blob/adapters/xmlrpc.py
@@ -2,14 +2,14 @@
 from plone.app.blob.interfaces import IBlobbable
 from plone.app.blob.utils import guessMimetype
 from six.moves.xmlrpc_client import Binary
-from zope.component import adapts
+from zope.component import adapter
 from zope.interface import implementer
 
 
+@adapter(Binary)
 @implementer(IBlobbable)
 class BlobbableBinary(object):
     """ adapter for xmlrpclib Binary instance to work with blobs """
-    adapts(Binary)
 
     def __init__(self, context):
         self.context = context
diff --git a/src/plone/app/blob/interfaces.py b/src/plone/app/blob/interfaces.py
index 4971666..bae88fe 100644
--- a/src/plone/app/blob/interfaces.py
+++ b/src/plone/app/blob/interfaces.py
@@ -7,11 +7,11 @@
 class IATBlob(Interface):
     """ a chunk of binary data, i.e. a blob """
 
-    title = schema.TextLine(title=_(u"Title"))
+    title = schema.TextLine(title=_(u'Title'))
 
     blob = schema.Field(
-        title=_(u"Blob"),
-        description=_(u"Binary data, similar to a file in the filesystem"),
+        title=_(u'Blob'),
+        description=_(u'Binary data, similar to a file in the filesystem'),
         required=True
     )
 
diff --git a/src/plone/app/blob/iterators.py b/src/plone/app/blob/iterators.py
index 7d7a759..ea0c250 100644
--- a/src/plone/app/blob/iterators.py
+++ b/src/plone/app/blob/iterators.py
@@ -1,18 +1,15 @@
 # -*- coding: utf-8 -*-
 from os import fstat
 from plone.app.blob.utils import openBlob
-from zope.interface import implements
+from zope.interface import implementer
 from zope.interface.interfaces import IInterface
 from ZPublisher.Iterators import IStreamIterator
 
 
+@implementer(IStreamIterator)
 class BlobStreamIterator(object):
     """ a streamiterator for blobs enabling to directly serve them
         in an extra ZServer thread """
-    if IInterface.providedBy(IStreamIterator):  # is this zope 2.12?
-        implements(IStreamIterator)
-    else:
-        __implements__ = (IStreamIterator, )
 
     def __init__(self, blob, mode='r', streamsize=1 << 16, start=0, end=None):
         self.blob = openBlob(blob, mode)
diff --git a/src/plone/app/blob/scale.py b/src/plone/app/blob/scale.py
index 393bfa8..5afac26 100644
--- a/src/plone/app/blob/scale.py
+++ b/src/plone/app/blob/scale.py
@@ -9,10 +9,9 @@
 from plone.app.imaging.traverse import DefaultImageScaleHandler
 from plone.app.imaging.traverse import ImageScale
 from ZODB.blob import Blob
-from zope.component import adapts
+from zope.component import adapter
 from zope.interface import implementer
 
-
 try:
     from plone.scale.scale import scaleImage
 except ImportError:
@@ -21,10 +20,10 @@
                 'Can not scale images.')
 
 
+@adapter(IBlobImageField)
 @implementer(IImageScaleHandler)
 class BlobImageScaleHandler(DefaultImageScaleHandler):
     """ handler for creating and storing scaled version of images in blobs """
-    adapts(IBlobImageField)
 
     def retrieveScale(self, instance, scale):
         """ retrieve a scaled version of the image """
@@ -69,9 +68,9 @@ def storeScale(self, instance, scale, **data):
 
 
 @implementer(IImageScaleFactory)
+@adapter(IBlobImageField)
 class BlobImageScaleFactory(object):
     """ adapter for image fields that allows generating scaled images """
-    adapts(IBlobImageField)
 
     def __init__(self, field):
         self.field = field
diff --git a/src/plone/app/blob/tests/extender.py b/src/plone/app/blob/tests/extender.py
index f46fb52..4a292ac 100644
--- a/src/plone/app/blob/tests/extender.py
+++ b/src/plone/app/blob/tests/extender.py
@@ -1,14 +1,14 @@
-from zope.component import adapts
-from zope.interface import implements
+from zope.component import adapter
+from zope.interface import implementer
 from archetypes.schemaextender.interfaces import ISchemaExtender
 from Products.ATContentTypes.interfaces import IATDocument, IATImage
 
 from plone.app.blob.subtypes.image import ExtensionBlobField
 
 
+@adapter(IATDocument)
+@implementer(ISchemaExtender)
 class PageImageAdder(object):
-    adapts(IATDocument)
-    implements(ISchemaExtender)
 
     fields = [
         ExtensionBlobField("image"),
@@ -21,9 +21,9 @@ def getFields(self):
         return self.fields
 
 
+@adapter(IATImage)
+@implementer(ISchemaExtender)
 class ImageImageAdder(object):
-    adapts(IATImage)
-    implements(ISchemaExtender)
 
     fields = [
         ExtensionBlobField("new_image"),


Repository: plone.app.blob


Branch: refs/heads/master
Date: 2018-01-31T19:21:05+01:00
Author: Davi Lima (davilima6) <davilima6@gmail.com>
Commit: https://github.com/plone/plone.app.blob/commit/4ac369dff7964932d5599ddf35f0f3873dd138dc

Reduce from 120 to 33 pep8 violations

Files changed:
M src/plone/app/blob/content.py
M src/plone/app/blob/field.py
M src/plone/app/blob/interfaces.py
M src/plone/app/blob/iterators.py
M src/plone/app/blob/markings.py
M src/plone/app/blob/migrations.py
M src/plone/app/blob/monkey.py
M src/plone/app/blob/scale.py
M src/plone/app/blob/subtypes/blob.py
M src/plone/app/blob/subtypes/file.py
M src/plone/app/blob/subtypes/image.py
M src/plone/app/blob/tests/base.py
M src/plone/app/blob/tests/extender.py
M src/plone/app/blob/tests/layer.py
M src/plone/app/blob/tests/lingua.py
M src/plone/app/blob/tests/test_base_fields.py
M src/plone/app/blob/tests/test_doctests.py
M src/plone/app/blob/tests/test_extensionblobfield.py
M src/plone/app/blob/tests/test_integration.py
M src/plone/app/blob/tests/test_maintenance.py
M src/plone/app/blob/tests/test_replacements.py
M src/plone/app/blob/tests/utils.py

diff --git a/src/plone/app/blob/content.py b/src/plone/app/blob/content.py
index 3c57b4d..90ddafd 100644
--- a/src/plone/app/blob/content.py
+++ b/src/plone/app/blob/content.py
@@ -30,7 +30,7 @@
 
 try:
     from Products.LinguaPlone.public import registerType
-    registerType        # make pyflakes happy...
+    registerType  # make pyflakes happy...
 except ImportError:
     from Products.Archetypes.atapi import registerType
 
@@ -46,7 +46,7 @@
 
 try:
     from Products.CMFCore.CMFCatalogAware import WorkflowAware
-    WorkflowAware       # make pyflakes happy...
+    WorkflowAware  # make pyflakes happy...
     # CMF 2.2 takes care of raising object events for old-style factories
     hasCMF22 = True
 except ImportError:
@@ -57,7 +57,7 @@ def addATBlob(container, id, subtype='Blob', **kwargs):
     """ extended at-constructor copied from ClassGen.py """
     obj = ATBlob(id)
     if subtype is not None:
-        markAs(obj, subtype)    # mark with interfaces needed for subtype
+        markAs(obj, subtype)  # mark with interfaces needed for subtype
     if not hasCMF22:
         notify(ObjectCreatedEvent(obj))
     container._setObject(id, obj, suppress_events=hasCMF22)
@@ -150,7 +150,7 @@ def getIndexValue(self, mimetype='text/plain'):
                     value,
                     mimetype=source,
                     filename=filename,
-                )
+                ),
             )
         except (ConflictError, KeyboardInterrupt):
             raise
@@ -251,4 +251,5 @@ def __bobo_traverse__(self, REQUEST, name):
                     return image
         return super(ATBlob, self).__bobo_traverse__(REQUEST, name)
 
+
 registerType(ATBlob, packageName)
diff --git a/src/plone/app/blob/field.py b/src/plone/app/blob/field.py
index 1bd5672..a2d655e 100644
--- a/src/plone/app/blob/field.py
+++ b/src/plone/app/blob/field.py
@@ -96,9 +96,9 @@ def index_html(self, REQUEST=None, RESPONSE=None, charset='utf-8',
             if not isinstance(filename, six.text_type):
                 filename = six.text_type(filename, charset, errors='ignore')
             filename = IUserPreferredFileNameNormalizer(
-                REQUEST
+                REQUEST,
             ).normalize(
-                filename
+                filename,
             )
             header_value = contentDispositionHeader(
                 disposition=disposition,
@@ -197,6 +197,7 @@ def __str__(self):
 
     data = ComputedAttribute(__str__, 0)
 
+
 InitializeClass(BlobWrapper)
 
 
@@ -281,15 +282,15 @@ def fixAutoId(self, instance):
                 # ^^ BBB for ATContentTypes <2.0
                 if not instance._should_set_id_to_filename(
                     filename,
-                    request.form.get('title')
+                    request.form.get('title'),
                 ):
                     return  # don't rename now if AT should do it from title
             if not isinstance(filename, six.text_type):
                 filename = six.text_type(filename, instance.getCharset())
             filename = IUserPreferredFileNameNormalizer(
-                request
+                request,
             ).normalize(
-                filename
+                filename,
             )
             if filename and not filename == instance.getId():
                 # a file name was given, so the instance needs to be renamed...
@@ -302,13 +303,13 @@ def download(self, instance, REQUEST=None, RESPONSE=None):
             instance,
             REQUEST,
             RESPONSE,
-            disposition='attachment'
+            disposition='attachment',
         )
 
     @security.protected(View)
     def index_html(self, instance, REQUEST=None, RESPONSE=None, **kwargs):
         """ make it directly viewable when entering the objects URL """
-        blob = self.get(instance, raw=True)    # TODO: why 'raw'?
+        blob = self.get(instance, raw=True)  # TODO: why 'raw'?
         charset = instance.getCharset()
         return blob.index_html(
             REQUEST=REQUEST, RESPONSE=RESPONSE,
@@ -342,10 +343,11 @@ def getFilename(self, instance, fromBaseUnit=True):
         else:
             return None
 
+
 registerField(
     BlobField,
     title='Blob',
-    description='Used for storing files in blobs'
+    description='Used for storing files in blobs',
 )
 
 # convenience base classes for blob-aware file & image fields
@@ -359,10 +361,11 @@ class FileField(BlobField):
         'type': 'file',
     })
 
+
 registerField(
     FileField,
     title='Blob-aware FileField',
-    description='Used for storing files in blobs'
+    description='Used for storing files in blobs',
 )
 
 
@@ -389,8 +392,9 @@ def set(self, instance, value, **kwargs):
         if hasattr(aq_base(instance), blobScalesAttr):
             delattr(aq_base(instance), blobScalesAttr)
 
+
 registerField(
     ImageField,
     title='Blob-aware ImageField',
-    description='Used for storing image in blobs'
+    description='Used for storing image in blobs',
 )
diff --git a/src/plone/app/blob/interfaces.py b/src/plone/app/blob/interfaces.py
index bae88fe..a8e9e0e 100644
--- a/src/plone/app/blob/interfaces.py
+++ b/src/plone/app/blob/interfaces.py
@@ -12,7 +12,7 @@ class IATBlob(Interface):
     blob = schema.Field(
         title=_(u'Blob'),
         description=_(u'Binary data, similar to a file in the filesystem'),
-        required=True
+        required=True,
     )
 
 
diff --git a/src/plone/app/blob/iterators.py b/src/plone/app/blob/iterators.py
index ea0c250..98bce6b 100644
--- a/src/plone/app/blob/iterators.py
+++ b/src/plone/app/blob/iterators.py
@@ -2,7 +2,6 @@
 from os import fstat
 from plone.app.blob.utils import openBlob
 from zope.interface import implementer
-from zope.interface.interfaces import IInterface
 from ZPublisher.Iterators import IStreamIterator
 
 
diff --git a/src/plone/app/blob/markings.py b/src/plone/app/blob/markings.py
index 7441f50..869af23 100644
--- a/src/plone/app/blob/markings.py
+++ b/src/plone/app/blob/markings.py
@@ -6,9 +6,9 @@
 from plone.app.blob.interfaces import IATBlobFile
 from plone.app.blob.interfaces import IATBlobImage
 from Products.ATContentTypes.interfaces import file as atfile
-from Products.ATContentTypes.interfaces import image as atimage
 from Products.ATContentTypes.interfaces import IATFile as Z2IATFile
 from Products.ATContentTypes.interfaces import IATImage as Z2IATImage
+from Products.ATContentTypes.interfaces import image as atimage
 from zope.interface import alsoProvides
 from zope.interface import noLongerProvides
 
diff --git a/src/plone/app/blob/migrations.py b/src/plone/app/blob/migrations.py
index 933d993..c2bd4b8 100644
--- a/src/plone/app/blob/migrations.py
+++ b/src/plone/app/blob/migrations.py
@@ -30,7 +30,7 @@ def migrate(context, portal_type=None, meta_type=None, walker=None,
     """ migrate instances using the given walker """
     if walker is None:
         migrator = makeMigrator(context, portal_type, meta_type,
-                                remove_old_value)
+                                remove_old_value,)
         walker = CustomQueryWalker(context, migrator, full_transaction=True)
     else:
         walker = walker(context)
@@ -52,7 +52,7 @@ class BlobMigrator(InlineMigrator):
 
         see `plone3 to 4 migration guide`__
 
-        .. __: http://docs.plone.org/4/en/manage/upgrading/version_specific_migration/p3x_to_p40_upgrade/index.html
+        .. __: http://docs.plone.org/4/en/manage/upgrading/version_specific_migration/p3x_to_p40_upgrade/index.html  #noqa
         """
 
         src_portal_type = portal_type
diff --git a/src/plone/app/blob/monkey.py b/src/plone/app/blob/monkey.py
index 2578df4..a8fe935 100644
--- a/src/plone/app/blob/monkey.py
+++ b/src/plone/app/blob/monkey.py
@@ -44,6 +44,7 @@ def make_file(self, binary=None):
         handle, name = mkstemp()
         return TemporaryFileWrapper(fdopen(handle, 'w+b'), name)
 
+
 original_init = HTTPRequest.FileUpload.__init__
 
 
@@ -53,6 +54,7 @@ def initFileUpload(self, aFieldStorage):
     if not hasattr(afile, '__methods__') and hasattr(afile, 'name'):
         self.__dict__['name'] = afile.name
 
+
 HTTPRequest.FieldStorage = NamedFieldStorage
 HTTPRequest.ZopeFieldStorage = NamedFieldStorage
 HTTPRequest.FileUpload.__init__ = initFileUpload
diff --git a/src/plone/app/blob/scale.py b/src/plone/app/blob/scale.py
index 5afac26..ae178fc 100644
--- a/src/plone/app/blob/scale.py
+++ b/src/plone/app/blob/scale.py
@@ -12,6 +12,7 @@
 from zope.component import adapter
 from zope.interface import implementer
 
+
 try:
     from plone.scale.scale import scaleImage
 except ImportError:
@@ -47,7 +48,7 @@ def retrieveScale(self, instance, scale):
                 data['id'],
                 data=blob.read(),
                 content_type=data['content_type'],
-                filename=data['filename']
+                filename=data['filename'],
             )
             blob.close()
             return image.__of__(instance)
diff --git a/src/plone/app/blob/subtypes/blob.py b/src/plone/app/blob/subtypes/blob.py
index 97d3efa..ba50c9a 100644
--- a/src/plone/app/blob/subtypes/blob.py
+++ b/src/plone/app/blob/subtypes/blob.py
@@ -30,13 +30,13 @@ class SchemaExtender(object):
             default_content_type='application/octet-stream',
             validators=(
                 ('isNonEmptyFile', V_REQUIRED),
-                ('checkFileMaxSize', V_REQUIRED)
+                ('checkFileMaxSize', V_REQUIRED),
             ),
             widget=FileWidget(
                 label=_(u'label_file', default=u'File'),
                 description=_(u''),
                 show_content_type=False,
-            )
+            ),
         ),
     ]
 
diff --git a/src/plone/app/blob/subtypes/file.py b/src/plone/app/blob/subtypes/file.py
index f7d7d4f..2674bd4 100644
--- a/src/plone/app/blob/subtypes/file.py
+++ b/src/plone/app/blob/subtypes/file.py
@@ -34,13 +34,13 @@ class SchemaExtender(object):
             default_content_type='application/octet-stream',
             validators=(
                 ('isNonEmptyFile', V_REQUIRED),
-                ('checkFileMaxSize', V_REQUIRED)
+                ('checkFileMaxSize', V_REQUIRED),
             ),
             widget=FileWidget(
                 label=_(u'label_file', default=u'File'),
                 description=_(u''),
                 show_content_type=False,
-            )
+            ),
         ),
     ]
 
diff --git a/src/plone/app/blob/subtypes/image.py b/src/plone/app/blob/subtypes/image.py
index 245761f..165b68a 100644
--- a/src/plone/app/blob/subtypes/image.py
+++ b/src/plone/app/blob/subtypes/image.py
@@ -52,13 +52,13 @@ class SchemaExtender(object):
             allowable_content_types=('image/gif', 'image/jpeg', 'image/png'),
             validators=(
                 ('isNonEmptyFile', V_REQUIRED),
-                ('checkImageMaxSize', V_REQUIRED)
+                ('checkImageMaxSize', V_REQUIRED),
             ),
             widget=ImageWidget(
                 label=_(u'label_image', default=u'Image'),
                 description=_(u''),
                 show_content_type=False,
-            )
+            ),
         ),
     ]
 
diff --git a/src/plone/app/blob/tests/base.py b/src/plone/app/blob/tests/base.py
index c8218e5..493116b 100644
--- a/src/plone/app/blob/tests/base.py
+++ b/src/plone/app/blob/tests/base.py
@@ -27,6 +27,7 @@ def getBrowser(self, loggedIn=True):
             browser.addHeader('Authorization', auth)
         return browser
 
+
 BlobFunctionalTestCase = BlobTestCase
 
 
@@ -35,6 +36,7 @@ class ReplacementTestCase(BlobTestCase):
 
     layer = BlobReplacementLayer
 
+
 ReplacementFunctionalTestCase = ReplacementTestCase
 
 
diff --git a/src/plone/app/blob/tests/extender.py b/src/plone/app/blob/tests/extender.py
index 4a292ac..89006ed 100644
--- a/src/plone/app/blob/tests/extender.py
+++ b/src/plone/app/blob/tests/extender.py
@@ -1,9 +1,10 @@
-from zope.component import adapter
-from zope.interface import implementer
+# -*- coding: utf-8 -*-
 from archetypes.schemaextender.interfaces import ISchemaExtender
-from Products.ATContentTypes.interfaces import IATDocument, IATImage
-
 from plone.app.blob.subtypes.image import ExtensionBlobField
+from Products.ATContentTypes.interfaces import IATDocument
+from Products.ATContentTypes.interfaces import IATImage
+from zope.component import adapter
+from zope.interface import implementer
 
 
 @adapter(IATDocument)
@@ -11,7 +12,7 @@
 class PageImageAdder(object):
 
     fields = [
-        ExtensionBlobField("image"),
+        ExtensionBlobField('image'),
     ]
 
     def __init__(self, context):
@@ -26,7 +27,7 @@ def getFields(self):
 class ImageImageAdder(object):
 
     fields = [
-        ExtensionBlobField("new_image"),
+        ExtensionBlobField('new_image'),
     ]
 
     def __init__(self, context):
diff --git a/src/plone/app/blob/tests/layer.py b/src/plone/app/blob/tests/layer.py
index e363631..e94af5d 100644
--- a/src/plone/app/blob/tests/layer.py
+++ b/src/plone/app/blob/tests/layer.py
@@ -27,6 +27,7 @@ def setUpPloneSite(self, portal):
     def tearDownZope(self, app):
         z2.uninstallProduct(app, 'plone.app.blob')
 
+
 BLOB_FIXTURE = BlobFixture()
 BlobLayer = testing.FunctionalTesting(
     bases=(BLOB_FIXTURE, ),
@@ -48,7 +49,7 @@ def setUpPloneSite(self, portal):
         for name in ['file', 'image']:
             self.applyProfile(
                 portal,
-                'plone.app.blob:{0}-replacement'.format(name)
+                'plone.app.blob:{0}-replacement'.format(name),
             )
         # allow creating the replaced types
         types = getToolByName(portal, 'portal_types')
@@ -71,6 +72,7 @@ def tearDownPloneSite(self, portal):
     def tearDownZope(self, app):
         z2.uninstallProduct(app, 'plone.app.imaging')
 
+
 BLOB_REPLACEMENT_FIXTURE = BlobReplacementFixture()
 BlobReplacementLayer = testing.FunctionalTesting(
     bases=(BLOB_REPLACEMENT_FIXTURE, ),
@@ -132,6 +134,7 @@ def tearDownZope(self, app):
         z2.uninstallProduct(app, 'plone.app.blob')
         z2.uninstallProduct(app, 'Products.LinguaPlone')
 
+
 BLOB_LINGUA_FIXTURE = BlobLinguaFixture()
 BlobLinguaLayer = testing.FunctionalTesting(
     bases=(BLOB_LINGUA_FIXTURE, ),
diff --git a/src/plone/app/blob/tests/lingua.py b/src/plone/app/blob/tests/lingua.py
index 3e456ee..0266e6b 100644
--- a/src/plone/app/blob/tests/lingua.py
+++ b/src/plone/app/blob/tests/lingua.py
@@ -32,4 +32,5 @@ class BlobelFish(BaseContent):
     schema = BlobelFishSchema
     _at_rename_after_creation = True
 
+
 registerType(BlobelFish, packageName)
diff --git a/src/plone/app/blob/tests/test_base_fields.py b/src/plone/app/blob/tests/test_base_fields.py
index 40d1da5..a713f37 100644
--- a/src/plone/app/blob/tests/test_base_fields.py
+++ b/src/plone/app/blob/tests/test_base_fields.py
@@ -37,6 +37,7 @@ class SampleType(BaseContent):
     portal_type = 'SampleType'
     schema = SampleSchema
 
+
 permissions['SampleType'] = packageName + ': SampleType'
 registerType(SampleType, packageName)
 
@@ -98,5 +99,5 @@ def testStringDataRespectsFilename(self):
         item.setFoo(file_.read(), filename='file.xls', mimetype=None)
         self.assertEqual(
             'application/vnd.ms-excel',
-            item.getFoo().getContentType()
+            item.getFoo().getContentType(),
         )
diff --git a/src/plone/app/blob/tests/test_doctests.py b/src/plone/app/blob/tests/test_doctests.py
index 80d465d..e73bdc8 100644
--- a/src/plone/app/blob/tests/test_doctests.py
+++ b/src/plone/app/blob/tests/test_doctests.py
@@ -15,21 +15,26 @@ def test_suite():
     suite.addTest(layered(
         doctest.DocFileSuite(
             'README.txt', package='plone.app.blob',
-            optionflags=optionflags),
-        layer=BlobLayer))
+            optionflags=optionflags,
+        ),
+        layer=BlobLayer,
+    ))
 
     for filename in ['replacement-types.txt', 'transforms.txt']:
         suite.addTest(layered(
             doctest.DocFileSuite(
                 filename, package='plone.app.blob.tests',
-                optionflags=optionflags),
-            layer=BlobReplacementLayer))
+                optionflags=optionflags,
+            ),
+            layer=BlobReplacementLayer,
+        ))
 
     if hasLinguaPlone():
         suite.addTest(layered(
             doctest.DocFileSuite(
                 'linguaplone.txt', package='plone.app.blob.tests',
-                optionflags=optionflags),
-            layer=BlobLinguaLayer)
-        )
+                optionflags=optionflags,
+            ),
+            layer=BlobLinguaLayer,
+        ))
     return suite
diff --git a/src/plone/app/blob/tests/test_extensionblobfield.py b/src/plone/app/blob/tests/test_extensionblobfield.py
index 290ef33..1d53231 100644
--- a/src/plone/app/blob/tests/test_extensionblobfield.py
+++ b/src/plone/app/blob/tests/test_extensionblobfield.py
@@ -1,9 +1,8 @@
 # -*- coding: utf-8 -*-
-from unittest import defaultTestLoader
-from unittest import TestSuite
-
 from plone.app.blob.tests.base import BlobSchemaExtenderTestCase
 from plone.app.blob.tests.utils import hasSchemaExtender
+from unittest import defaultTestLoader
+from unittest import TestSuite
 
 
 class ExtenderTests(BlobSchemaExtenderTestCase):
diff --git a/src/plone/app/blob/tests/test_integration.py b/src/plone/app/blob/tests/test_integration.py
index ac662e2..a8e99b6 100644
--- a/src/plone/app/blob/tests/test_integration.py
+++ b/src/plone/app/blob/tests/test_integration.py
@@ -235,7 +235,7 @@ def disposition(mimetype, filename):
             obj.setFilename(filename)
             response = self.publish(
                 '/{0}'.format(obj.absolute_url(relative=True)),
-                basic=self.getCredentials()
+                basic=self.getCredentials(),
             )
             self.assertEqual(response.getStatus(), 200)
             return response.getHeader('Content-Disposition')
diff --git a/src/plone/app/blob/tests/test_maintenance.py b/src/plone/app/blob/tests/test_maintenance.py
index 991aced..c7f4a26 100644
--- a/src/plone/app/blob/tests/test_maintenance.py
+++ b/src/plone/app/blob/tests/test_maintenance.py
@@ -4,6 +4,7 @@
 from Products.ATContentTypes.interfaces import file as atfile
 from Products.ATContentTypes.interfaces import image as atimage
 
+
 try:
     from Products.CMFCore.indexing import processQueue
 except ImportError:
diff --git a/src/plone/app/blob/tests/test_replacements.py b/src/plone/app/blob/tests/test_replacements.py
index 22e4c70..79a71d1 100644
--- a/src/plone/app/blob/tests/test_replacements.py
+++ b/src/plone/app/blob/tests/test_replacements.py
@@ -16,9 +16,9 @@
 from Products.ATContentTypes.content.file import ATFile
 from Products.ATContentTypes.content.image import ATImage
 from Products.ATContentTypes.interfaces import file as atfile
-from Products.ATContentTypes.interfaces import image as atimage
 from Products.ATContentTypes.interfaces import IATFile as Z2IATFile
 from Products.ATContentTypes.interfaces import IATImage as Z2IATImage
+from Products.ATContentTypes.interfaces import image as atimage
 from Products.GenericSetup.interfaces import IFilesystemExporter
 from Products.GenericSetup.interfaces import IFilesystemImporter
 from ZODB.blob import SAVEPOINT_SUFFIX
@@ -69,17 +69,17 @@ def testFileBlobInterfaces(self):
         self.assertTrue(atfile.IATFile.providedBy(foo), 'no IATFile?')
         self.assertTrue(
             atfile.IFileContent.providedBy(foo),
-            'no IFileContent?'
+            'no IFileContent?',
         )
         self.assertTrue(IATBlobFile.providedBy(foo), 'no IATBlobFile?')
         if not IInterface.providedBy(Z2IATFile):    # this is zope < 2.12
             self.assertTrue(
                 Z2IATFile.isImplementedBy(foo),
-                'no zope2 IATFile?'
+                'no zope2 IATFile?',
             )
             self.assertFalse(
                 Z2IATImage.isImplementedBy(foo),
-                'zope2 IATImage?'
+                'zope2 IATImage?',
             )
 
     def testFileMigration(self):
@@ -90,7 +90,7 @@ def testFileMigration(self):
                 title='a file',
                 file='plain text',
                 subject=('foo', 'bar'),
-                contributors=('me', )
+                contributors=('me', ),
             )
         ]
         # fake old content from before applying the replacement profile
@@ -106,7 +106,7 @@ def testFileMigration(self):
         # migrate & check migrated content item
         self.assertEqual(
             migrateATBlobFiles(self.portal),
-            'Migrating /plone/Members/test_user_1_/foo (File -> File)\n'
+            'Migrating /plone/Members/test_user_1_/foo (File -> File)\n',
         )
         foo = self.folder['foo']
         self.assertTrue(isinstance(foo, ATBlob), 'not a blob?')
@@ -128,7 +128,7 @@ def testCatalogAfterFileMigration(self):
                 title='a file',
                 file='plain text',
                 subject=('foo', 'bar'),
-                contributors=('me', )
+                contributors=('me', ),
             )
         ]
         # fake old content from before applying the replacement profile
@@ -142,7 +142,7 @@ def testCatalogAfterFileMigration(self):
         # migrate & check migrated content item
         self.assertEqual(
             migrateATBlobFiles(self.portal),
-            'Migrating /plone/Members/test_user_1_/foo (File -> File)\n'
+            'Migrating /plone/Members/test_user_1_/foo (File -> File)\n',
         )
         foo = self.folder['foo']
         brain = catalog(id='foo')[0]
@@ -157,7 +157,7 @@ def testCatalogAfterFileMigration(self):
                 self.assertEqual(
                     index_data[key],
                     value,
-                    'index: {0}'.format(key)
+                    'index: {0}'.format(key),
                 )
         okay = ('meta_type', )
         for key, value in catalog.getMetadataForRID(brain.getRID()).items():
@@ -165,7 +165,7 @@ def testCatalogAfterFileMigration(self):
                 self.assertEqual(
                     meta_data[key],
                     value,
-                    'meta: {0}'.format(key)
+                    'meta: {0}'.format(key),
                 )
         # also make sure the `Type` index has been updated correctly
         brains = catalog(Type='File')
@@ -177,7 +177,7 @@ def testIndexAccessor(self):
                 'File',
                 'foo',
                 title='foo',
-                file=getData('plone.pdf')
+                file=getData('plone.pdf'),
             )
         ]
         field = foo.getField('file')
@@ -193,7 +193,7 @@ def testSearchableText(self):
                 'File',
                 'foo',
                 title='foo',
-                file=getData('plone.pdf')
+                file=getData('plone.pdf'),
             )
         ]
         data = foo.SearchableText()
@@ -207,7 +207,7 @@ def testBlobPath(self):
                 'File',
                 'foo',
                 title='foo',
-                file=getData('plone.pdf')
+                file=getData('plone.pdf'),
             )
         ]
         field = foo.getField('file')
@@ -222,7 +222,7 @@ def testGSContentCompatible(self):
                 'File',
                 'foo',
                 title='foo',
-                file=getData('plone.pdf')
+                file=getData('plone.pdf'),
             )
         ]
         self.assertTrue(IFilesystemExporter(foo))
@@ -287,7 +287,7 @@ def testImageMigration(self):
                 title='an image',
                 image=gif,
                 subject=('foo', 'bar'),
-                contributors=('me', )
+                contributors=('me', ),
             )
         ]
         # fake old content from before applying the replacement profile
@@ -370,7 +370,7 @@ def testCatalogAfterImageMigration(self):
                         key,
                         index_data[key],
                         value,
-                    )
+                    ),
                 )
         okay = ('meta_type', 'getIcon')
         for key, value in catalog.getMetadataForRID(brain.getRID()).items():
@@ -378,7 +378,7 @@ def testCatalogAfterImageMigration(self):
                 self.assertEqual(
                     meta_data[key],
                     value,
-                    'meta: {0}'.format(key)
+                    'meta: {0}'.format(key),
                 )
         # also make sure the `Type` index has been updated correctly
         brains = catalog(Type='Image')
diff --git a/src/plone/app/blob/tests/utils.py b/src/plone/app/blob/tests/utils.py
index 6039df3..2d53aab 100644
--- a/src/plone/app/blob/tests/utils.py
+++ b/src/plone/app/blob/tests/utils.py
@@ -1,4 +1,5 @@
 # -*- coding: utf-8 -*-
+from __future__ import print_function
 from base64 import decodestring
 from os.path import dirname
 from os.path import join
@@ -52,7 +53,7 @@ def hasLinguaPlone():
     """ test if LinguaPlone is available """
     try:
         from Products import LinguaPlone
-        LinguaPlone     # make pyflakes happy...
+        LinguaPlone  # make pyflakes happy...
         return True
     except ImportError:
         msg = 'WARNING: LinguaPlone not found. Skipping tests.'
@@ -66,11 +67,11 @@ def hasSchemaExtender():
     """ test if SchemaExtender is available """
     try:
         import archetypes.schemaextender
-        archetypes.schemaextender     # make pyflakes happy...
+        archetypes.schemaextender  # make pyflakes happy...
         return True
     except ImportError:
         msg = 'WARNING: archetypes.schemaextender not found. Skipping tests.'
-        print '*' * len(msg)
+        print('*' * len(msg))
         print(msg)
-        print '*' * len(msg)
+        print('*' * len(msg))
         return False


Repository: plone.app.blob


Branch: refs/heads/master
Date: 2018-02-01T13:29:47+01:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.app.blob/commit/9dcf294ab41bbd9b9774a2e5b4bbad5f239ed900

Merge pull request #48 from plone/python3

More Python 2 / 3 compatibility adjustments

Files changed:
M CHANGES.rst
M src/plone/app/blob/adapters/atfile.py
M src/plone/app/blob/adapters/atimage.py
M src/plone/app/blob/adapters/blobwrapper.py
M src/plone/app/blob/adapters/file.py
M src/plone/app/blob/adapters/fileupload.py
M src/plone/app/blob/adapters/ofsfile.py
M src/plone/app/blob/adapters/pdata.py
M src/plone/app/blob/adapters/stringio.py
M src/plone/app/blob/adapters/webdav.py
M src/plone/app/blob/adapters/xmlrpc.py
M src/plone/app/blob/content.py
M src/plone/app/blob/field.py
M src/plone/app/blob/interfaces.py
M src/plone/app/blob/iterators.py
M src/plone/app/blob/markings.py
M src/plone/app/blob/migrations.py
M src/plone/app/blob/monkey.py
M src/plone/app/blob/scale.py
M src/plone/app/blob/subtypes/blob.py
M src/plone/app/blob/subtypes/file.py
M src/plone/app/blob/subtypes/image.py
M src/plone/app/blob/tests/base.py
M src/plone/app/blob/tests/extender.py
M src/plone/app/blob/tests/layer.py
M src/plone/app/blob/tests/lingua.py
M src/plone/app/blob/tests/test_base_fields.py
M src/plone/app/blob/tests/test_doctests.py
M src/plone/app/blob/tests/test_extensionblobfield.py
M src/plone/app/blob/tests/test_integration.py
M src/plone/app/blob/tests/test_maintenance.py
M src/plone/app/blob/tests/test_replacements.py
M src/plone/app/blob/tests/utils.py

diff --git a/CHANGES.rst b/CHANGES.rst
index 64f1c6d..0c4c818 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -10,12 +10,12 @@ Breaking changes:
 
 New features:
 
-- *add item here*
+- Prepare for Python 2 / 3 compatibility
+  [davilima6, rudaporto]
 
 Bug fixes:
 
-- Fix some Python 2 / 3 compatible imports and string types with six.
-  [rudaporto]
+- *add item here*
 
 
 1.7.3 (2017-11-24)
@@ -97,6 +97,7 @@ Bug fixes:
 - Update code to follow Plone styleguide.
   [gforcada]
 
+
 1.6.4 (2016-08-12)
 ------------------
 
diff --git a/src/plone/app/blob/adapters/atfile.py b/src/plone/app/blob/adapters/atfile.py
index fcec06f..71d3427 100644
--- a/src/plone/app/blob/adapters/atfile.py
+++ b/src/plone/app/blob/adapters/atfile.py
@@ -2,14 +2,14 @@
 from plone.app.blob.adapters.ofsfile import BlobbableOFSFile
 from plone.app.blob.interfaces import IBlobbable
 from Products.ATContentTypes.interface import IATFile
-from zope.component import adapts
+from zope.component import adapter
 from zope.interface import implementer
 
 
+@adapter(IATFile)
 @implementer(IBlobbable)
 class BlobbableATFile(BlobbableOFSFile):
     """ adapter for ATFile objects to work with blobs """
-    adapts(IATFile)
 
     def filename(self):
         """ see interface ... """
diff --git a/src/plone/app/blob/adapters/atimage.py b/src/plone/app/blob/adapters/atimage.py
index a28ac67..0a558fc 100644
--- a/src/plone/app/blob/adapters/atimage.py
+++ b/src/plone/app/blob/adapters/atimage.py
@@ -1,18 +1,17 @@
 # -*- coding: utf-8 -*-
 from plone.app.blob.adapters.atfile import BlobbableATFile
 from Products.ATContentTypes.interfaces import IATImage
-from zope.component import adapts
+from zope.component import adapter
 
 
+@adapter(IATImage)
 class BlobbableATImage(BlobbableATFile):
     """ adapter for ATImage objects to work with blobs """
-    adapts(IATImage)
 
     def feed(self, blob):
         """ see interface ... """
         data = self.context.getImageAsFile()
         if data is None:
             return
-        blobfile = blob.open('w')
-        blobfile.write(data.read())     # TODO: use copy or an iterator!!
-        blobfile.close()
+        with blob.open('w') as blobfile:
+            blobfile.write(data.read())
diff --git a/src/plone/app/blob/adapters/blobwrapper.py b/src/plone/app/blob/adapters/blobwrapper.py
index 7ac17d7..40cc4dd 100644
--- a/src/plone/app/blob/adapters/blobwrapper.py
+++ b/src/plone/app/blob/adapters/blobwrapper.py
@@ -2,14 +2,14 @@
 from plone.app.blob.field import ReuseBlob
 from plone.app.blob.interfaces import IBlobbable
 from plone.app.blob.interfaces import IBlobWrapper
-from zope.component import adapts
+from zope.component import adapter
 from zope.interface import implementer
 
 
+@adapter(IBlobWrapper)
 @implementer(IBlobbable)
 class BlobbableBlobWrapper(object):
     """ adapter for BlobWrapper objects to work with blobs """
-    adapts(IBlobWrapper)
 
     def __init__(self, context):
         self.context = context
diff --git a/src/plone/app/blob/adapters/file.py b/src/plone/app/blob/adapters/file.py
index b989a4a..dced0eb 100644
--- a/src/plone/app/blob/adapters/file.py
+++ b/src/plone/app/blob/adapters/file.py
@@ -1,14 +1,14 @@
 # -*- coding: utf-8 -*-
 from plone.app.blob.interfaces import IBlobbable
 from plone.app.blob.utils import guessMimetype
-from zope.component import adapts
+from zope.component import adapter
 from zope.interface import implementer
 
 
+@adapter(file)
 @implementer(IBlobbable)
 class BlobbableFile(object):
     """ adapter for Python file objects to work with blobs """
-    adapts(file)
 
     def __init__(self, context):
         self.context = context
@@ -17,9 +17,8 @@ def feed(self, blob):
         """ see interface ... """
         pos = self.context.tell()
         self.context.seek(0)
-        blobfile = blob.open('w')
-        blobfile.writelines(self.context)
-        blobfile.close()
+        with blob.open('w') as blobfile:
+            blobfile.writelines(self.context)
         self.context.seek(pos)
 
     def filename(self):
diff --git a/src/plone/app/blob/adapters/fileupload.py b/src/plone/app/blob/adapters/fileupload.py
index b5a8c74..7973e97 100644
--- a/src/plone/app/blob/adapters/fileupload.py
+++ b/src/plone/app/blob/adapters/fileupload.py
@@ -7,14 +7,14 @@
 from plone.app.blob.utils import guessMimetype
 from shutil import copyfileobj
 from ZODB.blob import Blob
-from zope.component import adapts
+from zope.component import adapter
 from zope.interface import implementer
 
 
+@adapter(IFileUpload)
 @implementer(IBlobbable)
 class BlobbableFileUpload(object):
     """ adapter for FileUpload objects to work with blobs """
-    adapts(IFileUpload)
 
     def __init__(self, context):
         self.context = context
@@ -30,17 +30,15 @@ def feed(self, blob):
         filename = getattr(self.context, 'name', None)
         if os_name == 'nt' and filename is not None:
             # for now a copy is needed on windows...
-            blobfile = blob.open('w')
-            copyfileobj(self.context, blobfile)
-            blobfile.close()
+            with blob.open('w') as blobfile:
+                copyfileobj(self.context, blobfile)
         elif filename is not None:
             assert isfile(filename), 'invalid file for blob: {0}'.format(filename)  # noqa
             blob.consumeFile(filename)
-        else:   # the cgi module only creates a tempfile for 1000+ bytes
-            self.context.seek(0)    # just to be sure we copy everything...
-            blobfile = blob.open('w')
-            blobfile.write(self.context.read())
-            blobfile.close()
+        else:  # the cgi module only creates a tempfile for 1000+ bytes
+            self.context.seek(0)  # just to be sure we copy everything...
+            with blob.open('w') as blobfile:
+                blobfile.write(self.context.read())
 
     def filename(self):
         """ see interface ... """
diff --git a/src/plone/app/blob/adapters/ofsfile.py b/src/plone/app/blob/adapters/ofsfile.py
index c25745b..79445b9 100644
--- a/src/plone/app/blob/adapters/ofsfile.py
+++ b/src/plone/app/blob/adapters/ofsfile.py
@@ -1,23 +1,22 @@
 # -*- coding: utf-8 -*-
 from plone.app.blob.interfaces import IBlobbable
 from plone.app.blob.interfaces import IOFSFile
-from zope.component import adapts
+from zope.component import adapter
 from zope.interface import implementer
 
 
+@adapter(IOFSFile)
 @implementer(IBlobbable)
 class BlobbableOFSFile(object):
     """ adapter for OFS.File objects to work with blobs """
-    adapts(IOFSFile)
 
     def __init__(self, context):
         self.context = context
 
     def feed(self, blob):
         """ see interface ... """
-        blobfile = blob.open('w')
-        blobfile.write(str(self.context.data))  # TODO: use an iterator!!
-        blobfile.close()
+        with blob.open('w') as blobfile:
+            blobfile.write(str(self.context.data))
 
     def filename(self):
         """ see interface ... """
diff --git a/src/plone/app/blob/adapters/pdata.py b/src/plone/app/blob/adapters/pdata.py
index d1daa75..e7fede5 100644
--- a/src/plone/app/blob/adapters/pdata.py
+++ b/src/plone/app/blob/adapters/pdata.py
@@ -3,27 +3,26 @@
 from plone.app.blob.interfaces import IBlobbable
 from plone.app.blob.utils import guessMimetype
 from six import StringIO
-from zope.component import adapts
+from zope.component import adapter
 from zope.interface import implementer
 
 
+@adapter(Pdata)
 @implementer(IBlobbable)
 class BlobbablePdata(object):
     """ adapter for Python file objects to work with blobs """
-    adapts(Pdata)
 
     def __init__(self, context):
         self.context = context
 
     def feed(self, blob):
         """ see interface ... """
-        blobfile = blob.open('w')
-        blobfile.write(self.context.data)
-        chunk = self.context
-        while chunk.next is not None:
-            chunk = chunk.next
-            blobfile.write(chunk.data)
-        blobfile.close()
+        with blob.open('w') as blobfile:
+            blobfile.write(self.context.data)
+            chunk = self.context
+            while chunk.next is not None:
+                chunk = chunk.next
+                blobfile.write(chunk.data)
 
     def filename(self):
         """ see interface ... """
diff --git a/src/plone/app/blob/adapters/stringio.py b/src/plone/app/blob/adapters/stringio.py
index 7085974..8b7607d 100644
--- a/src/plone/app/blob/adapters/stringio.py
+++ b/src/plone/app/blob/adapters/stringio.py
@@ -2,14 +2,14 @@
 from plone.app.blob.interfaces import IBlobbable
 from plone.app.blob.utils import guessMimetype
 from six import StringIO
-from zope.component import adapts
+from zope.component import adapter
 from zope.interface import implementer
 
 
+@adapter(StringIO)
 @implementer(IBlobbable)
 class BlobbableStringIO(object):
     """ adapter for StringIO instance to work with blobs """
-    adapts(StringIO)
 
     def __init__(self, context):
         self.context = context
diff --git a/src/plone/app/blob/adapters/webdav.py b/src/plone/app/blob/adapters/webdav.py
index d382acd..9f4dc8d 100644
--- a/src/plone/app/blob/adapters/webdav.py
+++ b/src/plone/app/blob/adapters/webdav.py
@@ -2,14 +2,14 @@
 from plone.app.blob.interfaces import IBlobbable
 from plone.app.blob.interfaces import IWebDavUpload
 from plone.app.blob.utils import guessMimetype
-from zope.component import adapts
+from zope.component import adapter
 from zope.interface import implementer
 
 
+@adapter(IWebDavUpload)
 @implementer(IBlobbable)
 class BlobbableWebDavUpload(object):
     """ adapter for WebDavUpload objects to work with blobs """
-    adapts(IWebDavUpload)
 
     def __init__(self, context):
         self.context = context
diff --git a/src/plone/app/blob/adapters/xmlrpc.py b/src/plone/app/blob/adapters/xmlrpc.py
index 5f9b920..220e1f8 100644
--- a/src/plone/app/blob/adapters/xmlrpc.py
+++ b/src/plone/app/blob/adapters/xmlrpc.py
@@ -2,14 +2,14 @@
 from plone.app.blob.interfaces import IBlobbable
 from plone.app.blob.utils import guessMimetype
 from six.moves.xmlrpc_client import Binary
-from zope.component import adapts
+from zope.component import adapter
 from zope.interface import implementer
 
 
+@adapter(Binary)
 @implementer(IBlobbable)
 class BlobbableBinary(object):
     """ adapter for xmlrpclib Binary instance to work with blobs """
-    adapts(Binary)
 
     def __init__(self, context):
         self.context = context
diff --git a/src/plone/app/blob/content.py b/src/plone/app/blob/content.py
index 3c57b4d..90ddafd 100644
--- a/src/plone/app/blob/content.py
+++ b/src/plone/app/blob/content.py
@@ -30,7 +30,7 @@
 
 try:
     from Products.LinguaPlone.public import registerType
-    registerType        # make pyflakes happy...
+    registerType  # make pyflakes happy...
 except ImportError:
     from Products.Archetypes.atapi import registerType
 
@@ -46,7 +46,7 @@
 
 try:
     from Products.CMFCore.CMFCatalogAware import WorkflowAware
-    WorkflowAware       # make pyflakes happy...
+    WorkflowAware  # make pyflakes happy...
     # CMF 2.2 takes care of raising object events for old-style factories
     hasCMF22 = True
 except ImportError:
@@ -57,7 +57,7 @@ def addATBlob(container, id, subtype='Blob', **kwargs):
     """ extended at-constructor copied from ClassGen.py """
     obj = ATBlob(id)
     if subtype is not None:
-        markAs(obj, subtype)    # mark with interfaces needed for subtype
+        markAs(obj, subtype)  # mark with interfaces needed for subtype
     if not hasCMF22:
         notify(ObjectCreatedEvent(obj))
     container._setObject(id, obj, suppress_events=hasCMF22)
@@ -150,7 +150,7 @@ def getIndexValue(self, mimetype='text/plain'):
                     value,
                     mimetype=source,
                     filename=filename,
-                )
+                ),
             )
         except (ConflictError, KeyboardInterrupt):
             raise
@@ -251,4 +251,5 @@ def __bobo_traverse__(self, REQUEST, name):
                     return image
         return super(ATBlob, self).__bobo_traverse__(REQUEST, name)
 
+
 registerType(ATBlob, packageName)
diff --git a/src/plone/app/blob/field.py b/src/plone/app/blob/field.py
index 1bd5672..a2d655e 100644
--- a/src/plone/app/blob/field.py
+++ b/src/plone/app/blob/field.py
@@ -96,9 +96,9 @@ def index_html(self, REQUEST=None, RESPONSE=None, charset='utf-8',
             if not isinstance(filename, six.text_type):
                 filename = six.text_type(filename, charset, errors='ignore')
             filename = IUserPreferredFileNameNormalizer(
-                REQUEST
+                REQUEST,
             ).normalize(
-                filename
+                filename,
             )
             header_value = contentDispositionHeader(
                 disposition=disposition,
@@ -197,6 +197,7 @@ def __str__(self):
 
     data = ComputedAttribute(__str__, 0)
 
+
 InitializeClass(BlobWrapper)
 
 
@@ -281,15 +282,15 @@ def fixAutoId(self, instance):
                 # ^^ BBB for ATContentTypes <2.0
                 if not instance._should_set_id_to_filename(
                     filename,
-                    request.form.get('title')
+                    request.form.get('title'),
                 ):
                     return  # don't rename now if AT should do it from title
             if not isinstance(filename, six.text_type):
                 filename = six.text_type(filename, instance.getCharset())
             filename = IUserPreferredFileNameNormalizer(
-                request
+                request,
             ).normalize(
-                filename
+                filename,
             )
             if filename and not filename == instance.getId():
                 # a file name was given, so the instance needs to be renamed...
@@ -302,13 +303,13 @@ def download(self, instance, REQUEST=None, RESPONSE=None):
             instance,
             REQUEST,
             RESPONSE,
-            disposition='attachment'
+            disposition='attachment',
         )
 
     @security.protected(View)
     def index_html(self, instance, REQUEST=None, RESPONSE=None, **kwargs):
         """ make it directly viewable when entering the objects URL """
-        blob = self.get(instance, raw=True)    # TODO: why 'raw'?
+        blob = self.get(instance, raw=True)  # TODO: why 'raw'?
         charset = instance.getCharset()
         return blob.index_html(
             REQUEST=REQUEST, RESPONSE=RESPONSE,
@@ -342,10 +343,11 @@ def getFilename(self, instance, fromBaseUnit=True):
         else:
             return None
 
+
 registerField(
     BlobField,
     title='Blob',
-    description='Used for storing files in blobs'
+    description='Used for storing files in blobs',
 )
 
 # convenience base classes for blob-aware file & image fields
@@ -359,10 +361,11 @@ class FileField(BlobField):
         'type': 'file',
     })
 
+
 registerField(
     FileField,
     title='Blob-aware FileField',
-    description='Used for storing files in blobs'
+    description='Used for storing files in blobs',
 )
 
 
@@ -389,8 +392,9 @@ def set(self, instance, value, **kwargs):
         if hasattr(aq_base(instance), blobScalesAttr):
             delattr(aq_base(instance), blobScalesAttr)
 
+
 registerField(
     ImageField,
     title='Blob-aware ImageField',
-    description='Used for storing image in blobs'
+    description='Used for storing image in blobs',
 )
diff --git a/src/plone/app/blob/interfaces.py b/src/plone/app/blob/interfaces.py
index 4971666..a8e9e0e 100644
--- a/src/plone/app/blob/interfaces.py
+++ b/src/plone/app/blob/interfaces.py
@@ -7,12 +7,12 @@
 class IATBlob(Interface):
     """ a chunk of binary data, i.e. a blob """
 
-    title = schema.TextLine(title=_(u"Title"))
+    title = schema.TextLine(title=_(u'Title'))
 
     blob = schema.Field(
-        title=_(u"Blob"),
-        description=_(u"Binary data, similar to a file in the filesystem"),
-        required=True
+        title=_(u'Blob'),
+        description=_(u'Binary data, similar to a file in the filesystem'),
+        required=True,
     )
 
 
diff --git a/src/plone/app/blob/iterators.py b/src/plone/app/blob/iterators.py
index 1f1e8e9..98bce6b 100644
--- a/src/plone/app/blob/iterators.py
+++ b/src/plone/app/blob/iterators.py
@@ -1,18 +1,14 @@
 # -*- coding: utf-8 -*-
 from os import fstat
 from plone.app.blob.utils import openBlob
-from zope.interface import implements
-from zope.interface.interfaces import IInterface
+from zope.interface import implementer
 from ZPublisher.Iterators import IStreamIterator
 
 
+@implementer(IStreamIterator)
 class BlobStreamIterator(object):
     """ a streamiterator for blobs enabling to directly serve them
         in an extra ZServer thread """
-    if IInterface.providedBy(IStreamIterator):  # is this zope 2.12?
-        implements(IStreamIterator)
-    else:
-        __implements__ = (IStreamIterator, )
 
     def __init__(self, blob, mode='r', streamsize=1 << 16, start=0, end=None):
         self.blob = openBlob(blob, mode)
@@ -21,7 +17,8 @@ def __init__(self, blob, mode='r', streamsize=1 << 16, start=0, end=None):
         self.end = end
         self.seek(start, 0)
 
-    def next(self):
+    def __next__(self):
+        # Python 3
         """ return next chunk of data from the blob, taking the optionally
             given range into consideration """
         if self.end is None:
@@ -33,6 +30,8 @@ def next(self):
             raise StopIteration
         return data
 
+    next = __next__  # Python 2
+
     def __len__(self):
         return fstat(self.blob.fileno()).st_size
 
diff --git a/src/plone/app/blob/markings.py b/src/plone/app/blob/markings.py
index 7441f50..869af23 100644
--- a/src/plone/app/blob/markings.py
+++ b/src/plone/app/blob/markings.py
@@ -6,9 +6,9 @@
 from plone.app.blob.interfaces import IATBlobFile
 from plone.app.blob.interfaces import IATBlobImage
 from Products.ATContentTypes.interfaces import file as atfile
-from Products.ATContentTypes.interfaces import image as atimage
 from Products.ATContentTypes.interfaces import IATFile as Z2IATFile
 from Products.ATContentTypes.interfaces import IATImage as Z2IATImage
+from Products.ATContentTypes.interfaces import image as atimage
 from zope.interface import alsoProvides
 from zope.interface import noLongerProvides
 
diff --git a/src/plone/app/blob/migrations.py b/src/plone/app/blob/migrations.py
index 933d993..c2bd4b8 100644
--- a/src/plone/app/blob/migrations.py
+++ b/src/plone/app/blob/migrations.py
@@ -30,7 +30,7 @@ def migrate(context, portal_type=None, meta_type=None, walker=None,
     """ migrate instances using the given walker """
     if walker is None:
         migrator = makeMigrator(context, portal_type, meta_type,
-                                remove_old_value)
+                                remove_old_value,)
         walker = CustomQueryWalker(context, migrator, full_transaction=True)
     else:
         walker = walker(context)
@@ -52,7 +52,7 @@ class BlobMigrator(InlineMigrator):
 
         see `plone3 to 4 migration guide`__
 
-        .. __: http://docs.plone.org/4/en/manage/upgrading/version_specific_migration/p3x_to_p40_upgrade/index.html
+        .. __: http://docs.plone.org/4/en/manage/upgrading/version_specific_migration/p3x_to_p40_upgrade/index.html  #noqa
         """
 
         src_portal_type = portal_type
diff --git a/src/plone/app/blob/monkey.py b/src/plone/app/blob/monkey.py
index 2578df4..a8fe935 100644
--- a/src/plone/app/blob/monkey.py
+++ b/src/plone/app/blob/monkey.py
@@ -44,6 +44,7 @@ def make_file(self, binary=None):
         handle, name = mkstemp()
         return TemporaryFileWrapper(fdopen(handle, 'w+b'), name)
 
+
 original_init = HTTPRequest.FileUpload.__init__
 
 
@@ -53,6 +54,7 @@ def initFileUpload(self, aFieldStorage):
     if not hasattr(afile, '__methods__') and hasattr(afile, 'name'):
         self.__dict__['name'] = afile.name
 
+
 HTTPRequest.FieldStorage = NamedFieldStorage
 HTTPRequest.ZopeFieldStorage = NamedFieldStorage
 HTTPRequest.FileUpload.__init__ = initFileUpload
diff --git a/src/plone/app/blob/scale.py b/src/plone/app/blob/scale.py
index 393bfa8..ae178fc 100644
--- a/src/plone/app/blob/scale.py
+++ b/src/plone/app/blob/scale.py
@@ -9,7 +9,7 @@
 from plone.app.imaging.traverse import DefaultImageScaleHandler
 from plone.app.imaging.traverse import ImageScale
 from ZODB.blob import Blob
-from zope.component import adapts
+from zope.component import adapter
 from zope.interface import implementer
 
 
@@ -21,10 +21,10 @@
                 'Can not scale images.')
 
 
+@adapter(IBlobImageField)
 @implementer(IImageScaleHandler)
 class BlobImageScaleHandler(DefaultImageScaleHandler):
     """ handler for creating and storing scaled version of images in blobs """
-    adapts(IBlobImageField)
 
     def retrieveScale(self, instance, scale):
         """ retrieve a scaled version of the image """
@@ -48,7 +48,7 @@ def retrieveScale(self, instance, scale):
                 data['id'],
                 data=blob.read(),
                 content_type=data['content_type'],
-                filename=data['filename']
+                filename=data['filename'],
             )
             blob.close()
             return image.__of__(instance)
@@ -69,9 +69,9 @@ def storeScale(self, instance, scale, **data):
 
 
 @implementer(IImageScaleFactory)
+@adapter(IBlobImageField)
 class BlobImageScaleFactory(object):
     """ adapter for image fields that allows generating scaled images """
-    adapts(IBlobImageField)
 
     def __init__(self, field):
         self.field = field
diff --git a/src/plone/app/blob/subtypes/blob.py b/src/plone/app/blob/subtypes/blob.py
index 97d3efa..ba50c9a 100644
--- a/src/plone/app/blob/subtypes/blob.py
+++ b/src/plone/app/blob/subtypes/blob.py
@@ -30,13 +30,13 @@ class SchemaExtender(object):
             default_content_type='application/octet-stream',
             validators=(
                 ('isNonEmptyFile', V_REQUIRED),
-                ('checkFileMaxSize', V_REQUIRED)
+                ('checkFileMaxSize', V_REQUIRED),
             ),
             widget=FileWidget(
                 label=_(u'label_file', default=u'File'),
                 description=_(u''),
                 show_content_type=False,
-            )
+            ),
         ),
     ]
 
diff --git a/src/plone/app/blob/subtypes/file.py b/src/plone/app/blob/subtypes/file.py
index f7d7d4f..2674bd4 100644
--- a/src/plone/app/blob/subtypes/file.py
+++ b/src/plone/app/blob/subtypes/file.py
@@ -34,13 +34,13 @@ class SchemaExtender(object):
             default_content_type='application/octet-stream',
             validators=(
                 ('isNonEmptyFile', V_REQUIRED),
-                ('checkFileMaxSize', V_REQUIRED)
+                ('checkFileMaxSize', V_REQUIRED),
             ),
             widget=FileWidget(
                 label=_(u'label_file', default=u'File'),
                 description=_(u''),
                 show_content_type=False,
-            )
+            ),
         ),
     ]
 
diff --git a/src/plone/app/blob/subtypes/image.py b/src/plone/app/blob/subtypes/image.py
index 245761f..165b68a 100644
--- a/src/plone/app/blob/subtypes/image.py
+++ b/src/plone/app/blob/subtypes/image.py
@@ -52,13 +52,13 @@ class SchemaExtender(object):
             allowable_content_types=('image/gif', 'image/jpeg', 'image/png'),
             validators=(
                 ('isNonEmptyFile', V_REQUIRED),
-                ('checkImageMaxSize', V_REQUIRED)
+                ('checkImageMaxSize', V_REQUIRED),
             ),
             widget=ImageWidget(
                 label=_(u'label_image', default=u'Image'),
                 description=_(u''),
                 show_content_type=False,
-            )
+            ),
         ),
     ]
 
diff --git a/src/plone/app/blob/tests/base.py b/src/plone/app/blob/tests/base.py
index c8218e5..493116b 100644
--- a/src/plone/app/blob/tests/base.py
+++ b/src/plone/app/blob/tests/base.py
@@ -27,6 +27,7 @@ def getBrowser(self, loggedIn=True):
             browser.addHeader('Authorization', auth)
         return browser
 
+
 BlobFunctionalTestCase = BlobTestCase
 
 
@@ -35,6 +36,7 @@ class ReplacementTestCase(BlobTestCase):
 
     layer = BlobReplacementLayer
 
+
 ReplacementFunctionalTestCase = ReplacementTestCase
 
 
diff --git a/src/plone/app/blob/tests/extender.py b/src/plone/app/blob/tests/extender.py
index f46fb52..89006ed 100644
--- a/src/plone/app/blob/tests/extender.py
+++ b/src/plone/app/blob/tests/extender.py
@@ -1,17 +1,18 @@
-from zope.component import adapts
-from zope.interface import implements
+# -*- coding: utf-8 -*-
 from archetypes.schemaextender.interfaces import ISchemaExtender
-from Products.ATContentTypes.interfaces import IATDocument, IATImage
-
 from plone.app.blob.subtypes.image import ExtensionBlobField
+from Products.ATContentTypes.interfaces import IATDocument
+from Products.ATContentTypes.interfaces import IATImage
+from zope.component import adapter
+from zope.interface import implementer
 
 
+@adapter(IATDocument)
+@implementer(ISchemaExtender)
 class PageImageAdder(object):
-    adapts(IATDocument)
-    implements(ISchemaExtender)
 
     fields = [
-        ExtensionBlobField("image"),
+        ExtensionBlobField('image'),
     ]
 
     def __init__(self, context):
@@ -21,12 +22,12 @@ def getFields(self):
         return self.fields
 
 
+@adapter(IATImage)
+@implementer(ISchemaExtender)
 class ImageImageAdder(object):
-    adapts(IATImage)
-    implements(ISchemaExtender)
 
     fields = [
-        ExtensionBlobField("new_image"),
+        ExtensionBlobField('new_image'),
     ]
 
     def __init__(self, context):
diff --git a/src/plone/app/blob/tests/layer.py b/src/plone/app/blob/tests/layer.py
index e363631..e94af5d 100644
--- a/src/plone/app/blob/tests/layer.py
+++ b/src/plone/app/blob/tests/layer.py
@@ -27,6 +27,7 @@ def setUpPloneSite(self, portal):
     def tearDownZope(self, app):
         z2.uninstallProduct(app, 'plone.app.blob')
 
+
 BLOB_FIXTURE = BlobFixture()
 BlobLayer = testing.FunctionalTesting(
     bases=(BLOB_FIXTURE, ),
@@ -48,7 +49,7 @@ def setUpPloneSite(self, portal):
         for name in ['file', 'image']:
             self.applyProfile(
                 portal,
-                'plone.app.blob:{0}-replacement'.format(name)
+                'plone.app.blob:{0}-replacement'.format(name),
             )
         # allow creating the replaced types
         types = getToolByName(portal, 'portal_types')
@@ -71,6 +72,7 @@ def tearDownPloneSite(self, portal):
     def tearDownZope(self, app):
         z2.uninstallProduct(app, 'plone.app.imaging')
 
+
 BLOB_REPLACEMENT_FIXTURE = BlobReplacementFixture()
 BlobReplacementLayer = testing.FunctionalTesting(
     bases=(BLOB_REPLACEMENT_FIXTURE, ),
@@ -132,6 +134,7 @@ def tearDownZope(self, app):
         z2.uninstallProduct(app, 'plone.app.blob')
         z2.uninstallProduct(app, 'Products.LinguaPlone')
 
+
 BLOB_LINGUA_FIXTURE = BlobLinguaFixture()
 BlobLinguaLayer = testing.FunctionalTesting(
     bases=(BLOB_LINGUA_FIXTURE, ),
diff --git a/src/plone/app/blob/tests/lingua.py b/src/plone/app/blob/tests/lingua.py
index 3e456ee..0266e6b 100644
--- a/src/plone/app/blob/tests/lingua.py
+++ b/src/plone/app/blob/tests/lingua.py
@@ -32,4 +32,5 @@ class BlobelFish(BaseContent):
     schema = BlobelFishSchema
     _at_rename_after_creation = True
 
+
 registerType(BlobelFish, packageName)
diff --git a/src/plone/app/blob/tests/test_base_fields.py b/src/plone/app/blob/tests/test_base_fields.py
index 40d1da5..a713f37 100644
--- a/src/plone/app/blob/tests/test_base_fields.py
+++ b/src/plone/app/blob/tests/test_base_fields.py
@@ -37,6 +37,7 @@ class SampleType(BaseContent):
     portal_type = 'SampleType'
     schema = SampleSchema
 
+
 permissions['SampleType'] = packageName + ': SampleType'
 registerType(SampleType, packageName)
 
@@ -98,5 +99,5 @@ def testStringDataRespectsFilename(self):
         item.setFoo(file_.read(), filename='file.xls', mimetype=None)
         self.assertEqual(
             'application/vnd.ms-excel',
-            item.getFoo().getContentType()
+            item.getFoo().getContentType(),
         )
diff --git a/src/plone/app/blob/tests/test_doctests.py b/src/plone/app/blob/tests/test_doctests.py
index 80d465d..e73bdc8 100644
--- a/src/plone/app/blob/tests/test_doctests.py
+++ b/src/plone/app/blob/tests/test_doctests.py
@@ -15,21 +15,26 @@ def test_suite():
     suite.addTest(layered(
         doctest.DocFileSuite(
             'README.txt', package='plone.app.blob',
-            optionflags=optionflags),
-        layer=BlobLayer))
+            optionflags=optionflags,
+        ),
+        layer=BlobLayer,
+    ))
 
     for filename in ['replacement-types.txt', 'transforms.txt']:
         suite.addTest(layered(
             doctest.DocFileSuite(
                 filename, package='plone.app.blob.tests',
-                optionflags=optionflags),
-            layer=BlobReplacementLayer))
+                optionflags=optionflags,
+            ),
+            layer=BlobReplacementLayer,
+        ))
 
     if hasLinguaPlone():
         suite.addTest(layered(
             doctest.DocFileSuite(
                 'linguaplone.txt', package='plone.app.blob.tests',
-                optionflags=optionflags),
-            layer=BlobLinguaLayer)
-        )
+                optionflags=optionflags,
+            ),
+            layer=BlobLinguaLayer,
+        ))
     return suite
diff --git a/src/plone/app/blob/tests/test_extensionblobfield.py b/src/plone/app/blob/tests/test_extensionblobfield.py
index 290ef33..1d53231 100644
--- a/src/plone/app/blob/tests/test_extensionblobfield.py
+++ b/src/plone/app/blob/tests/test_extensionblobfield.py
@@ -1,9 +1,8 @@
 # -*- coding: utf-8 -*-
-from unittest import defaultTestLoader
-from unittest import TestSuite
-
 from plone.app.blob.tests.base import BlobSchemaExtenderTestCase
 from plone.app.blob.tests.utils import hasSchemaExtender
+from unittest import defaultTestLoader
+from unittest import TestSuite
 
 
 class ExtenderTests(BlobSchemaExtenderTestCase):
diff --git a/src/plone/app/blob/tests/test_integration.py b/src/plone/app/blob/tests/test_integration.py
index fd5c55a..a8e99b6 100644
--- a/src/plone/app/blob/tests/test_integration.py
+++ b/src/plone/app/blob/tests/test_integration.py
@@ -138,13 +138,13 @@ def testRangeSupport(self):
         request = self.folder.REQUEST
         request.environ['HTTP_RANGE'] = 'bytes=2-10'
         iterator = blob.download(request)
-        self.assertEqual(data[2:10 + 1], iterator.next())
+        self.assertEqual(data[2:10 + 1], next(iterator))
         # ranges should also work with multiple chunks read from the blob
         request.environ['HTTP_RANGE'] = 'bytes=2-10'
         iterator = blob.download(request)
         iterator.streamsize = 5
-        self.assertEqual(data[2:2 + 5], iterator.next())
-        self.assertEqual(data[2 + 5:10 + 1], iterator.next())
+        self.assertEqual(data[2:2 + 5], next(iterator))
+        self.assertEqual(data[2 + 5:10 + 1], next(iterator))
         # open and suffix ranges also have to work
         request.environ['HTTP_RANGE'] = 'bytes=2-'
         iterator = blob.download(request)
@@ -235,7 +235,7 @@ def disposition(mimetype, filename):
             obj.setFilename(filename)
             response = self.publish(
                 '/{0}'.format(obj.absolute_url(relative=True)),
-                basic=self.getCredentials()
+                basic=self.getCredentials(),
             )
             self.assertEqual(response.getStatus(), 200)
             return response.getHeader('Content-Disposition')
diff --git a/src/plone/app/blob/tests/test_maintenance.py b/src/plone/app/blob/tests/test_maintenance.py
index 991aced..c7f4a26 100644
--- a/src/plone/app/blob/tests/test_maintenance.py
+++ b/src/plone/app/blob/tests/test_maintenance.py
@@ -4,6 +4,7 @@
 from Products.ATContentTypes.interfaces import file as atfile
 from Products.ATContentTypes.interfaces import image as atimage
 
+
 try:
     from Products.CMFCore.indexing import processQueue
 except ImportError:
diff --git a/src/plone/app/blob/tests/test_replacements.py b/src/plone/app/blob/tests/test_replacements.py
index 912668a..79a71d1 100644
--- a/src/plone/app/blob/tests/test_replacements.py
+++ b/src/plone/app/blob/tests/test_replacements.py
@@ -16,9 +16,9 @@
 from Products.ATContentTypes.content.file import ATFile
 from Products.ATContentTypes.content.image import ATImage
 from Products.ATContentTypes.interfaces import file as atfile
-from Products.ATContentTypes.interfaces import image as atimage
 from Products.ATContentTypes.interfaces import IATFile as Z2IATFile
 from Products.ATContentTypes.interfaces import IATImage as Z2IATImage
+from Products.ATContentTypes.interfaces import image as atimage
 from Products.GenericSetup.interfaces import IFilesystemExporter
 from Products.GenericSetup.interfaces import IFilesystemImporter
 from ZODB.blob import SAVEPOINT_SUFFIX
@@ -58,7 +58,7 @@ def testCreateFileBlob(self):
         request = foo.REQUEST
         response = request.RESPONSE
         index = foo.index_html(request, response)
-        self.assertEqual(index.next(), 'plain text')
+        self.assertEqual(next(index), 'plain text')
         self.assertEqual(response.getStatus(), 200)
         self.assertEqual(response.headers['content-length'], '10')
         self.assertTrue(
@@ -69,17 +69,17 @@ def testFileBlobInterfaces(self):
         self.assertTrue(atfile.IATFile.providedBy(foo), 'no IATFile?')
         self.assertTrue(
             atfile.IFileContent.providedBy(foo),
-            'no IFileContent?'
+            'no IFileContent?',
         )
         self.assertTrue(IATBlobFile.providedBy(foo), 'no IATBlobFile?')
         if not IInterface.providedBy(Z2IATFile):    # this is zope < 2.12
             self.assertTrue(
                 Z2IATFile.isImplementedBy(foo),
-                'no zope2 IATFile?'
+                'no zope2 IATFile?',
             )
             self.assertFalse(
                 Z2IATImage.isImplementedBy(foo),
-                'zope2 IATImage?'
+                'zope2 IATImage?',
             )
 
     def testFileMigration(self):
@@ -90,7 +90,7 @@ def testFileMigration(self):
                 title='a file',
                 file='plain text',
                 subject=('foo', 'bar'),
-                contributors=('me', )
+                contributors=('me', ),
             )
         ]
         # fake old content from before applying the replacement profile
@@ -106,7 +106,7 @@ def testFileMigration(self):
         # migrate & check migrated content item
         self.assertEqual(
             migrateATBlobFiles(self.portal),
-            'Migrating /plone/Members/test_user_1_/foo (File -> File)\n'
+            'Migrating /plone/Members/test_user_1_/foo (File -> File)\n',
         )
         foo = self.folder['foo']
         self.assertTrue(isinstance(foo, ATBlob), 'not a blob?')
@@ -128,7 +128,7 @@ def testCatalogAfterFileMigration(self):
                 title='a file',
                 file='plain text',
                 subject=('foo', 'bar'),
-                contributors=('me', )
+                contributors=('me', ),
             )
         ]
         # fake old content from before applying the replacement profile
@@ -142,7 +142,7 @@ def testCatalogAfterFileMigration(self):
         # migrate & check migrated content item
         self.assertEqual(
             migrateATBlobFiles(self.portal),
-            'Migrating /plone/Members/test_user_1_/foo (File -> File)\n'
+            'Migrating /plone/Members/test_user_1_/foo (File -> File)\n',
         )
         foo = self.folder['foo']
         brain = catalog(id='foo')[0]
@@ -157,7 +157,7 @@ def testCatalogAfterFileMigration(self):
                 self.assertEqual(
                     index_data[key],
                     value,
-                    'index: {0}'.format(key)
+                    'index: {0}'.format(key),
                 )
         okay = ('meta_type', )
         for key, value in catalog.getMetadataForRID(brain.getRID()).items():
@@ -165,7 +165,7 @@ def testCatalogAfterFileMigration(self):
                 self.assertEqual(
                     meta_data[key],
                     value,
-                    'meta: {0}'.format(key)
+                    'meta: {0}'.format(key),
                 )
         # also make sure the `Type` index has been updated correctly
         brains = catalog(Type='File')
@@ -177,7 +177,7 @@ def testIndexAccessor(self):
                 'File',
                 'foo',
                 title='foo',
-                file=getData('plone.pdf')
+                file=getData('plone.pdf'),
             )
         ]
         field = foo.getField('file')
@@ -193,7 +193,7 @@ def testSearchableText(self):
                 'File',
                 'foo',
                 title='foo',
-                file=getData('plone.pdf')
+                file=getData('plone.pdf'),
             )
         ]
         data = foo.SearchableText()
@@ -207,7 +207,7 @@ def testBlobPath(self):
                 'File',
                 'foo',
                 title='foo',
-                file=getData('plone.pdf')
+                file=getData('plone.pdf'),
             )
         ]
         field = foo.getField('file')
@@ -222,7 +222,7 @@ def testGSContentCompatible(self):
                 'File',
                 'foo',
                 title='foo',
-                file=getData('plone.pdf')
+                file=getData('plone.pdf'),
             )
         ]
         self.assertTrue(IFilesystemExporter(foo))
@@ -262,7 +262,7 @@ def testCreateImageBlob(self):
         # `index_html` should return a stream-iterator
         request = foo.REQUEST
         response = request.RESPONSE
-        self.assertEqual(foo.index_html(request, response).next(), gif)
+        self.assertEqual(next(foo.index_html(request, response)), gif)
         self.assertEqual(response.getStatus(), 200)
         self.assertEqual(response.headers['content-length'], '43')
         self.assertEqual(response.headers['content-type'], 'image/gif')
@@ -287,7 +287,7 @@ def testImageMigration(self):
                 title='an image',
                 image=gif,
                 subject=('foo', 'bar'),
-                contributors=('me', )
+                contributors=('me', ),
             )
         ]
         # fake old content from before applying the replacement profile
@@ -370,7 +370,7 @@ def testCatalogAfterImageMigration(self):
                         key,
                         index_data[key],
                         value,
-                    )
+                    ),
                 )
         okay = ('meta_type', 'getIcon')
         for key, value in catalog.getMetadataForRID(brain.getRID()).items():
@@ -378,7 +378,7 @@ def testCatalogAfterImageMigration(self):
                 self.assertEqual(
                     meta_data[key],
                     value,
-                    'meta: {0}'.format(key)
+                    'meta: {0}'.format(key),
                 )
         # also make sure the `Type` index has been updated correctly
         brains = catalog(Type='Image')
diff --git a/src/plone/app/blob/tests/utils.py b/src/plone/app/blob/tests/utils.py
index 4f94b1c..2d53aab 100644
--- a/src/plone/app/blob/tests/utils.py
+++ b/src/plone/app/blob/tests/utils.py
@@ -1,4 +1,5 @@
 # -*- coding: utf-8 -*-
+from __future__ import print_function
 from base64 import decodestring
 from os.path import dirname
 from os.path import join
@@ -52,7 +53,7 @@ def hasLinguaPlone():
     """ test if LinguaPlone is available """
     try:
         from Products import LinguaPlone
-        LinguaPlone     # make pyflakes happy...
+        LinguaPlone  # make pyflakes happy...
         return True
     except ImportError:
         msg = 'WARNING: LinguaPlone not found. Skipping tests.'
@@ -66,11 +67,11 @@ def hasSchemaExtender():
     """ test if SchemaExtender is available """
     try:
         import archetypes.schemaextender
-        archetypes.schemaextender     # make pyflakes happy...
+        archetypes.schemaextender  # make pyflakes happy...
         return True
     except ImportError:
         msg = 'WARNING: archetypes.schemaextender not found. Skipping tests.'
-        print '*' * len(msg)
-        print msg
-        print '*' * len(msg)
+        print('*' * len(msg))
+        print(msg)
+        print('*' * len(msg))
         return False



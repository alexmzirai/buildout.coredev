Repository: plone.locking


Branch: refs/heads/master
Date: 2018-02-02T21:36:32+01:00
Author: Gil Forcada (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.locking/commit/ce4437cf3d1dc0760fb7940725f38ab142be75e2

Rework tests

So they no longer user plone.app.testing.bbb code.

Hopefully this will avoid the current testing isolation problems it has.

Files changed:
A plone/locking/testing.py
A plone/locking/tests/__init__.py
A plone/locking/tests/locking.rst
A plone/locking/tests/test_functional.py
M CHANGES.rst
M setup.py
D plone/locking/README.txt
D plone/locking/tests.py

diff --git a/CHANGES.rst b/CHANGES.rst
index 89f9f7e..309e26f 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -25,6 +25,9 @@ Bug fixes:
 - Add Python 2 / 3 compatibility
   [pbauer]
 
+- Update tests to not use plone.app.testing.bbb code.
+  This should avoid test isolation problems.
+  [gforcada]
 
 2.2 (2017-06-08)
 ----------------
diff --git a/plone/locking/testing.py b/plone/locking/testing.py
new file mode 100644
index 0000000..7afddbd
--- /dev/null
+++ b/plone/locking/testing.py
@@ -0,0 +1,36 @@
+# -*- coding: utf-8 -*-
+from plone.app.testing import applyProfile
+from plone.app.testing import PloneSandboxLayer
+from plone.app.testing.layers import FunctionalTesting
+from plone.app.testing.layers import IntegrationTesting
+
+import doctest
+
+
+class PloneLockingLayer(PloneSandboxLayer):
+
+    def setUpZope(self, app, configurationContext):
+        import plone.locking
+        self.loadZCML(package=plone.locking)
+
+    def setUpPloneSite(self, portal):
+        applyProfile(portal, 'plone.app.contenttypes:default')
+
+
+PLONE_LOCKING_FIXTURE = PloneLockingLayer()
+
+PLONE_LOCKING_INTEGRATION_TESTING = IntegrationTesting(
+    bases=(PLONE_LOCKING_FIXTURE,),
+    name='PloneLockingLayer:Integration',
+)
+
+PLONE_LOCKING_FUNCTIONAL_TESTING = FunctionalTesting(
+    bases=(PLONE_LOCKING_FIXTURE,),
+    name='PloneLockingLayer:Functional',
+)
+
+optionflags = (
+    doctest.REPORT_ONLY_FIRST_FAILURE
+    | doctest.ELLIPSIS
+    | doctest.NORMALIZE_WHITESPACE
+)
diff --git a/plone/locking/tests.py b/plone/locking/tests.py
deleted file mode 100644
index 29abd83..0000000
--- a/plone/locking/tests.py
+++ /dev/null
@@ -1,36 +0,0 @@
-import doctest
-import unittest
-
-from DateTime.DateTime import DateTime
-from Products.CMFCore.utils import getToolByName
-
-from plone.app.testing.bbb import PTC_FUNCTIONAL_TESTING
-from plone.testing import layered
-
-OPTIONFLAGS = (doctest.REPORT_ONLY_FIRST_FAILURE |
-               doctest.ELLIPSIS |
-               doctest.NORMALIZE_WHITESPACE)
-
-
-def addMember(portal, username, fullname="", email="", roles=('Member', ), last_login_time=None):
-    portal_membership = getToolByName(portal, 'portal_membership')
-    portal_membership.addMember(username, 'secret', roles, [])
-    member = portal_membership.getMemberById(username)
-    member.setMemberProperties({'fullname': fullname, 'email': email,
-                                'last_login_time': DateTime(last_login_time), })
-
-
-def setUp(self):
-    addMember(self, 'member1', 'Member one')
-    addMember(self, 'member2', 'Member two')
-
-
-def test_suite():
-    suite = unittest.TestSuite()
-    suite.addTest(
-        layered(doctest.DocFileSuite('README.txt',
-                      optionflags=OPTIONFLAGS,
-                      package='plone.locking',
-                      globs={'addMember': addMember}),
-                layer=PTC_FUNCTIONAL_TESTING))
-    return suite
diff --git a/plone/locking/tests/__init__.py b/plone/locking/tests/__init__.py
new file mode 100644
index 0000000..e69de29
diff --git a/plone/locking/README.txt b/plone/locking/tests/locking.rst
similarity index 92%
rename from plone/locking/README.txt
rename to plone/locking/tests/locking.rst
index 53129a8..58d8c5b 100644
--- a/plone/locking/README.txt
+++ b/plone/locking/tests/locking.rst
@@ -1,25 +1,27 @@
+.. -*- coding: utf-8 -*-
+
+=====
 Tests
 =====
 
 Basic locking
--------------
+=============
 
-By default, this is enabled on any ITTWLockable object. By default, this
-applies to any Archetypes content object.
+    >>> from plone.app.testing import login
+    >>> from plone.app.testing import logout
+    >>> from plone.app.testing import setRoles
+    >>> from plone.locking.interfaces import ILockable
+
+    >>> portal = layer['portal']
+    >>> login(portal, 'member1')
 
-   >>> portal = layer['portal']
+By default, this is enabled on any ITTWLockable object.
 
-   >>> addMember(portal, 'member1', 'Member one')
-   >>> addMember(portal, 'member2', 'Member two')
-   >>> from Products.Archetypes.BaseContent import BaseContent
-   >>> obj = BaseContent('id')
-   >>> from plone.app.testing import login, logout
-   >>> login(portal, 'member1')
+    >>> obj = portal['doc']
 
 To lock this object, we adapt it to ILockable. The default adapter implements
 locking using WebDAV locks.
 
-   >>> from plone.locking.interfaces import ILockable
    >>> lockable = ILockable(obj)
 
 To begin with, this object will not be locked:
diff --git a/plone/locking/tests/test_functional.py b/plone/locking/tests/test_functional.py
new file mode 100644
index 0000000..fc14087
--- /dev/null
+++ b/plone/locking/tests/test_functional.py
@@ -0,0 +1,52 @@
+# -*- coding: utf-8 -*-
+from plone.app.testing import login
+from plone.app.testing import logout
+from plone.app.testing import setRoles
+from plone.locking.testing import PLONE_LOCKING_FUNCTIONAL_TESTING
+from plone.locking.testing import optionflags
+from plone.testing import layered
+from Products.CMFCore.utils import getToolByName
+
+import doctest
+import unittest
+
+
+doctests = (
+    'locking.rst',
+)
+
+
+def add_member(portal, username):
+    portal_membership = getToolByName(portal, 'portal_membership')
+    portal_membership.addMember(username, 'secret', ('Member', ), [])
+
+
+def setup(doctest):
+    portal = doctest.globs['layer']['portal']
+    add_member(portal, 'member1', )
+    add_member(portal, 'member2', )
+
+    logout()
+    login(portal, 'member1')
+    setRoles(portal, 'member1', ['Manager', ])
+    portal.invokeFactory('Document', 'doc')
+    setRoles(portal, 'member1', ['Member', ])
+
+
+def test_suite():
+    suite = unittest.TestSuite()
+    tests = [
+        layered(
+            doctest.DocFileSuite(
+                'tests/{0}'.format(test_file),
+                package='plone.locking',
+                optionflags=optionflags,
+                setUp=setup,
+            ),
+            layer=PLONE_LOCKING_FUNCTIONAL_TESTING,
+        )
+        for test_file in doctests
+    ]
+    suite.addTests(tests)
+    return suite
+
diff --git a/setup.py b/setup.py
index 837f392..e4cc33f 100644
--- a/setup.py
+++ b/setup.py
@@ -29,7 +29,7 @@
       zip_safe=False,
       extras_require=dict(
         test=[
-            'Products.Archetypes',
+            'plone.app.contenttypes',
             'plone.app.testing',
         ]
       ),


Repository: plone.locking


Branch: refs/heads/master
Date: 2018-02-02T22:55:40+01:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.locking/commit/ff381a55e13e58fd49d5bb7e11ee21538b7bbda6

Merge pull request #16 from plone/gforcada-rework-tests

Rework tests

Files changed:
A plone/locking/testing.py
A plone/locking/tests/__init__.py
A plone/locking/tests/locking.rst
A plone/locking/tests/test_functional.py
M CHANGES.rst
M setup.py
D plone/locking/README.txt
D plone/locking/tests.py

diff --git a/CHANGES.rst b/CHANGES.rst
index 89f9f7e..309e26f 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -25,6 +25,9 @@ Bug fixes:
 - Add Python 2 / 3 compatibility
   [pbauer]
 
+- Update tests to not use plone.app.testing.bbb code.
+  This should avoid test isolation problems.
+  [gforcada]
 
 2.2 (2017-06-08)
 ----------------
diff --git a/plone/locking/testing.py b/plone/locking/testing.py
new file mode 100644
index 0000000..7afddbd
--- /dev/null
+++ b/plone/locking/testing.py
@@ -0,0 +1,36 @@
+# -*- coding: utf-8 -*-
+from plone.app.testing import applyProfile
+from plone.app.testing import PloneSandboxLayer
+from plone.app.testing.layers import FunctionalTesting
+from plone.app.testing.layers import IntegrationTesting
+
+import doctest
+
+
+class PloneLockingLayer(PloneSandboxLayer):
+
+    def setUpZope(self, app, configurationContext):
+        import plone.locking
+        self.loadZCML(package=plone.locking)
+
+    def setUpPloneSite(self, portal):
+        applyProfile(portal, 'plone.app.contenttypes:default')
+
+
+PLONE_LOCKING_FIXTURE = PloneLockingLayer()
+
+PLONE_LOCKING_INTEGRATION_TESTING = IntegrationTesting(
+    bases=(PLONE_LOCKING_FIXTURE,),
+    name='PloneLockingLayer:Integration',
+)
+
+PLONE_LOCKING_FUNCTIONAL_TESTING = FunctionalTesting(
+    bases=(PLONE_LOCKING_FIXTURE,),
+    name='PloneLockingLayer:Functional',
+)
+
+optionflags = (
+    doctest.REPORT_ONLY_FIRST_FAILURE
+    | doctest.ELLIPSIS
+    | doctest.NORMALIZE_WHITESPACE
+)
diff --git a/plone/locking/tests.py b/plone/locking/tests.py
deleted file mode 100644
index 29abd83..0000000
--- a/plone/locking/tests.py
+++ /dev/null
@@ -1,36 +0,0 @@
-import doctest
-import unittest
-
-from DateTime.DateTime import DateTime
-from Products.CMFCore.utils import getToolByName
-
-from plone.app.testing.bbb import PTC_FUNCTIONAL_TESTING
-from plone.testing import layered
-
-OPTIONFLAGS = (doctest.REPORT_ONLY_FIRST_FAILURE |
-               doctest.ELLIPSIS |
-               doctest.NORMALIZE_WHITESPACE)
-
-
-def addMember(portal, username, fullname="", email="", roles=('Member', ), last_login_time=None):
-    portal_membership = getToolByName(portal, 'portal_membership')
-    portal_membership.addMember(username, 'secret', roles, [])
-    member = portal_membership.getMemberById(username)
-    member.setMemberProperties({'fullname': fullname, 'email': email,
-                                'last_login_time': DateTime(last_login_time), })
-
-
-def setUp(self):
-    addMember(self, 'member1', 'Member one')
-    addMember(self, 'member2', 'Member two')
-
-
-def test_suite():
-    suite = unittest.TestSuite()
-    suite.addTest(
-        layered(doctest.DocFileSuite('README.txt',
-                      optionflags=OPTIONFLAGS,
-                      package='plone.locking',
-                      globs={'addMember': addMember}),
-                layer=PTC_FUNCTIONAL_TESTING))
-    return suite
diff --git a/plone/locking/tests/__init__.py b/plone/locking/tests/__init__.py
new file mode 100644
index 0000000..e69de29
diff --git a/plone/locking/README.txt b/plone/locking/tests/locking.rst
similarity index 92%
rename from plone/locking/README.txt
rename to plone/locking/tests/locking.rst
index 53129a8..58d8c5b 100644
--- a/plone/locking/README.txt
+++ b/plone/locking/tests/locking.rst
@@ -1,25 +1,27 @@
+.. -*- coding: utf-8 -*-
+
+=====
 Tests
 =====
 
 Basic locking
--------------
+=============
 
-By default, this is enabled on any ITTWLockable object. By default, this
-applies to any Archetypes content object.
+    >>> from plone.app.testing import login
+    >>> from plone.app.testing import logout
+    >>> from plone.app.testing import setRoles
+    >>> from plone.locking.interfaces import ILockable
+
+    >>> portal = layer['portal']
+    >>> login(portal, 'member1')
 
-   >>> portal = layer['portal']
+By default, this is enabled on any ITTWLockable object.
 
-   >>> addMember(portal, 'member1', 'Member one')
-   >>> addMember(portal, 'member2', 'Member two')
-   >>> from Products.Archetypes.BaseContent import BaseContent
-   >>> obj = BaseContent('id')
-   >>> from plone.app.testing import login, logout
-   >>> login(portal, 'member1')
+    >>> obj = portal['doc']
 
 To lock this object, we adapt it to ILockable. The default adapter implements
 locking using WebDAV locks.
 
-   >>> from plone.locking.interfaces import ILockable
    >>> lockable = ILockable(obj)
 
 To begin with, this object will not be locked:
diff --git a/plone/locking/tests/test_functional.py b/plone/locking/tests/test_functional.py
new file mode 100644
index 0000000..fc14087
--- /dev/null
+++ b/plone/locking/tests/test_functional.py
@@ -0,0 +1,52 @@
+# -*- coding: utf-8 -*-
+from plone.app.testing import login
+from plone.app.testing import logout
+from plone.app.testing import setRoles
+from plone.locking.testing import PLONE_LOCKING_FUNCTIONAL_TESTING
+from plone.locking.testing import optionflags
+from plone.testing import layered
+from Products.CMFCore.utils import getToolByName
+
+import doctest
+import unittest
+
+
+doctests = (
+    'locking.rst',
+)
+
+
+def add_member(portal, username):
+    portal_membership = getToolByName(portal, 'portal_membership')
+    portal_membership.addMember(username, 'secret', ('Member', ), [])
+
+
+def setup(doctest):
+    portal = doctest.globs['layer']['portal']
+    add_member(portal, 'member1', )
+    add_member(portal, 'member2', )
+
+    logout()
+    login(portal, 'member1')
+    setRoles(portal, 'member1', ['Manager', ])
+    portal.invokeFactory('Document', 'doc')
+    setRoles(portal, 'member1', ['Member', ])
+
+
+def test_suite():
+    suite = unittest.TestSuite()
+    tests = [
+        layered(
+            doctest.DocFileSuite(
+                'tests/{0}'.format(test_file),
+                package='plone.locking',
+                optionflags=optionflags,
+                setUp=setup,
+            ),
+            layer=PLONE_LOCKING_FUNCTIONAL_TESTING,
+        )
+        for test_file in doctests
+    ]
+    suite.addTests(tests)
+    return suite
+
diff --git a/setup.py b/setup.py
index 837f392..e4cc33f 100644
--- a/setup.py
+++ b/setup.py
@@ -29,7 +29,7 @@
       zip_safe=False,
       extras_require=dict(
         test=[
-            'Products.Archetypes',
+            'plone.app.contenttypes',
             'plone.app.testing',
         ]
       ),



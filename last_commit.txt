Repository: plone.app.theming


Branch: refs/heads/master
Date: 2018-01-28T11:44:52+01:00
Author: Philip Bauer (pbauer) <bauer@starzel.de>
Commit: https://github.com/plone/plone.app.theming/commit/107bbcb7749660485b6fcd49c99257df06687e78

Prepare for Python 2 / 3 compatibility

Files changed:
M CHANGES.rst
M setup.py
M src/plone/app/theming/browser/controlpanel.py
M src/plone/app/theming/browser/mapper.py
M src/plone/app/theming/plugins/utils.py
M src/plone/app/theming/tests/test_transform.py
M src/plone/app/theming/traversal.py
M src/plone/app/theming/utils.py

diff --git a/CHANGES.rst b/CHANGES.rst
index 2ee97a6..66dabcd 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -14,8 +14,11 @@ New features:
 
 Bug fixes:
 
-- remove mention of non-existent Example theme [tkimnguyen]
-- *add item here*
+- remove mention of non-existent Example theme
+  [tkimnguyen]
+
+- Prepare for Python 2 / 3 compatibility
+  [pbauer, ale-rt]
 
 
 2.0.1 (2017-07-03)
diff --git a/setup.py b/setup.py
index 0846973..1af674a 100644
--- a/setup.py
+++ b/setup.py
@@ -60,6 +60,7 @@
         'repoze.xmliter>=0.3',
         'roman',
         'setuptools',
+        'six',
         'zope.traversing',
     ],
     extras_require={
diff --git a/src/plone/app/theming/browser/controlpanel.py b/src/plone/app/theming/browser/controlpanel.py
index e5d5488..d4a4fdc 100644
--- a/src/plone/app/theming/browser/controlpanel.py
+++ b/src/plone/app/theming/browser/controlpanel.py
@@ -231,7 +231,7 @@ def update(self):
 
             try:
                 themeZip = zipfile.ZipFile(themeArchive)
-            except (zipfile.BadZipfile, zipfile.LargeZipFile,):
+            except (zipfile.BadZipfile, zipfile.LargeZipFile):
                 logger.exception("Could not read zip file")
                 self.errors['themeArchive'] = _(
                     'error_invalid_zip',
@@ -242,7 +242,7 @@ def update(self):
 
                 try:
                     themeData = extractThemeInfo(themeZip, checkRules=False)
-                except (ValueError, KeyError,), e:
+                except (ValueError, KeyError) as e:
                     logger.warn(str(e))
                     self.errors['themeArchive'] = _(
                         'error_no_rules_file',
diff --git a/src/plone/app/theming/browser/mapper.py b/src/plone/app/theming/browser/mapper.py
index b270703..bc12536 100644
--- a/src/plone/app/theming/browser/mapper.py
+++ b/src/plone/app/theming/browser/mapper.py
@@ -32,8 +32,9 @@
 import lxml.html
 import lxml.html.builder
 import os.path
-import urllib
-import urlparse
+from six.moves import urllib
+
+import six
 
 
 class ThemeMapper(BrowserView):
@@ -73,7 +74,7 @@ def setup(self):
             THEME_RESOURCE_NAME,
             self.name
         )
-        self.themeBasePathEncoded = urllib.quote_plus(self.themeBasePath)
+        self.themeBasePathEncoded = urllib.parse.quote_plus(self.themeBasePath)
         self.themeBaseUrl = '/'.join([self.portalUrl, self.themeBasePath])
 
         try:
@@ -276,7 +277,7 @@ def getFrame(self):
                 transform = compileThemeTransform(
                     themeInfo.rules, themeInfo.absolutePrefix,
                     settings.readNetwork, themeInfo.parameterExpressions or {})
-            except lxml.etree.XMLSyntaxError, e:
+            except lxml.etree.XMLSyntaxError as e:
                 return self.theme_error_template(error=e.msg)
 
             params = prepareThemeParameters(
@@ -300,13 +301,13 @@ def getFrame(self):
             tree = lxml.html.fromstring(result)
 
             def encodeUrl(orig):
-                origUrl = urlparse.urlparse(orig)
+                origUrl = urllib.parse.urlparse(orig)
                 newPath = origUrl.path
-                newQuery = urlparse.parse_qs(origUrl.query)
+                newQuery = urllib.parse.parse_qs(origUrl.query)
 
                 # relative?
                 if not origUrl.netloc:
-                    newPath = urlparse.urljoin(
+                    newPath = urllib.parse.urljoin(
                         path.rstrip("/") + "/", newPath.lstrip("/"))
                 elif not orig.lower().startswith(portal_url.lower()):
                     # Not an internal URL - ignore
@@ -319,12 +320,12 @@ def encodeUrl(orig):
                 if forms:
                     newQuery['forms'] = forms
                 if title:
-                    if isinstance(title, unicode):
+                    if isinstance(title, six.text_type):
                         newQuery['title'] = title.encode('utf-8', 'replace')
                     else:
                         newQuery['title'] = title
 
-                return self.request.getURL() + '?' + urllib.urlencode(newQuery)
+                return self.request.getURL() + '?' + urllib.parse.urlencode(newQuery)
 
             if title:
                 titleElement = tree.cssselect("html head title")
diff --git a/src/plone/app/theming/plugins/utils.py b/src/plone/app/theming/plugins/utils.py
index a07b278..5b36231 100644
--- a/src/plone/app/theming/plugins/utils.py
+++ b/src/plone/app/theming/plugins/utils.py
@@ -1,9 +1,9 @@
 # -*- coding: utf-8 -*-
-from ConfigParser import SafeConfigParser
 from plone.app.theming.interfaces import IThemePlugin
 from plone.app.theming.interfaces import THEME_RESOURCE_NAME
 from plone.memoize.ram import cache
 from plone.resource.manifest import MANIFEST_FILENAME
+from six.moves.configparser import SafeConfigParser
 from zope.component import getUtilitiesFor
 
 
diff --git a/src/plone/app/theming/tests/test_transform.py b/src/plone/app/theming/tests/test_transform.py
index a707e8d..65d0412 100644
--- a/src/plone/app/theming/tests/test_transform.py
+++ b/src/plone/app/theming/tests/test_transform.py
@@ -18,7 +18,7 @@
 from Products.CMFCore.Expression import Expression
 from Products.CMFCore.Expression import getExprContext
 from Products.CMFCore.utils import getToolByName
-from urllib2 import HTTPError
+from six.moves.urllib.error import HTTPError
 from zope.component import getUtility
 
 import os.path
@@ -656,7 +656,7 @@ def test_theme_for_404(self):
         error = None
         try:
             browser.open('{0:s}/404_page'.format(portal.absolute_url()))
-        except HTTPError, e:
+        except HTTPError as e:
             error = e
         self.assertEqual(error.code, 404)
 
@@ -684,7 +684,7 @@ def test_theme_params_on_404(self):
         error = None
         try:
             browser.open('{0:s}/404_page'.format(portal.absolute_url()))
-        except HTTPError, e:
+        except HTTPError as e:
             error = e
         self.assertEqual(error.code, 404)
 
@@ -737,7 +737,7 @@ def test_navroot_params_on_404_widget_in_path(self):
                     portal['subfolder'].absolute_url()
                 )
             )
-        except HTTPError, e:
+        except HTTPError as e:
             error = e
         self.assertEqual(error.code, 404)
 
@@ -784,7 +784,7 @@ def test_navroot_params_on_404_widget_in_path(self):
 
     #     try:
     #         browser.open('{0:s}/404_page'.format(portal.absolute_url()))
-    #     except HTTPError, e:
+    #     except HTTPError as e:
     #         error = e
     #     self.assertEqual(error.code, 404)
 
diff --git a/src/plone/app/theming/traversal.py b/src/plone/app/theming/traversal.py
index ef625be..996eef6 100644
--- a/src/plone/app/theming/traversal.py
+++ b/src/plone/app/theming/traversal.py
@@ -3,10 +3,9 @@
 from plone.app.theming.utils import theming_policy
 from plone.resource.traversal import ResourceTraverser
 from plone.resource.utils import queryResourceDirectory
+from six.moves import urllib
 from zExceptions import NotFound
 
-import urllib
-
 
 class ThemeTraverser(ResourceTraverser):
     """The theme traverser.
@@ -28,7 +27,7 @@ def traverse(self, name, remaining):
             name = self.current_theme()
 
         # Note: also fixes possible unicode problems
-        name = urllib.quote(name)
+        name = urllib.parse.quote(name)
 
         res = queryResourceDirectory(self.name, name)
         if res is not None:
diff --git a/src/plone/app/theming/utils.py b/src/plone/app/theming/utils.py
index c367fe1..bad6d83 100644
--- a/src/plone/app/theming/utils.py
+++ b/src/plone/app/theming/utils.py
@@ -1,5 +1,4 @@
 # -*- coding: utf-8 -*-
-from ConfigParser import SafeConfigParser
 from diazo.compiler import compile_theme
 from diazo.compiler import quote_param
 from lxml import etree
@@ -26,8 +25,9 @@
 from Products.CMFCore.interfaces import ISiteRoot
 from Products.CMFPlone.utils import safe_unicode
 from Products.PageTemplates.Expressions import getEngine
-from StringIO import StringIO
-from urlparse import urlsplit
+from six import StringIO
+from six.moves.configparser import SafeConfigParser
+from six.moves.urllib.parse import urlsplit
 from zope.component import getUtility
 from zope.component import queryMultiAdapter
 from zope.globalrequest import getRequest
@@ -35,7 +35,7 @@
 
 import logging
 import pkg_resources
-
+import six
 
 LOGGER = logging.getLogger('plone.app.theming')
 
@@ -494,7 +494,7 @@ def createThemeFromTemplate(title, description, baseOn='template'):
         raise KeyError("Theme {0:s} not found".format(baseOn))
 
     themeName = getUtility(IURLNormalizer).normalize(title)
-    if isinstance(themeName, unicode):
+    if isinstance(themeName, six.text_type):
         themeName = themeName.encode('utf-8')
 
     resources = getOrCreatePersistentResourceDirectory()


Repository: plone.app.theming


Branch: refs/heads/master
Date: 2018-01-28T13:38:32+01:00
Author: Philip Bauer (pbauer) <bauer@starzel.de>
Commit: https://github.com/plone/plone.app.theming/commit/c661a23cea276fcc024d0f935ff0000cac45dff5

Merge pull request #139 from plone/python3

Prepare for Python 2 / 3 compatibility

Files changed:
M CHANGES.rst
M setup.py
M src/plone/app/theming/browser/controlpanel.py
M src/plone/app/theming/browser/mapper.py
M src/plone/app/theming/plugins/utils.py
M src/plone/app/theming/tests/test_transform.py
M src/plone/app/theming/traversal.py
M src/plone/app/theming/utils.py

diff --git a/CHANGES.rst b/CHANGES.rst
index 2ee97a6..66dabcd 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -14,8 +14,11 @@ New features:
 
 Bug fixes:
 
-- remove mention of non-existent Example theme [tkimnguyen]
-- *add item here*
+- remove mention of non-existent Example theme
+  [tkimnguyen]
+
+- Prepare for Python 2 / 3 compatibility
+  [pbauer, ale-rt]
 
 
 2.0.1 (2017-07-03)
diff --git a/setup.py b/setup.py
index 0846973..1af674a 100644
--- a/setup.py
+++ b/setup.py
@@ -60,6 +60,7 @@
         'repoze.xmliter>=0.3',
         'roman',
         'setuptools',
+        'six',
         'zope.traversing',
     ],
     extras_require={
diff --git a/src/plone/app/theming/browser/controlpanel.py b/src/plone/app/theming/browser/controlpanel.py
index e5d5488..d4a4fdc 100644
--- a/src/plone/app/theming/browser/controlpanel.py
+++ b/src/plone/app/theming/browser/controlpanel.py
@@ -231,7 +231,7 @@ def update(self):
 
             try:
                 themeZip = zipfile.ZipFile(themeArchive)
-            except (zipfile.BadZipfile, zipfile.LargeZipFile,):
+            except (zipfile.BadZipfile, zipfile.LargeZipFile):
                 logger.exception("Could not read zip file")
                 self.errors['themeArchive'] = _(
                     'error_invalid_zip',
@@ -242,7 +242,7 @@ def update(self):
 
                 try:
                     themeData = extractThemeInfo(themeZip, checkRules=False)
-                except (ValueError, KeyError,), e:
+                except (ValueError, KeyError) as e:
                     logger.warn(str(e))
                     self.errors['themeArchive'] = _(
                         'error_no_rules_file',
diff --git a/src/plone/app/theming/browser/mapper.py b/src/plone/app/theming/browser/mapper.py
index b270703..bc12536 100644
--- a/src/plone/app/theming/browser/mapper.py
+++ b/src/plone/app/theming/browser/mapper.py
@@ -32,8 +32,9 @@
 import lxml.html
 import lxml.html.builder
 import os.path
-import urllib
-import urlparse
+from six.moves import urllib
+
+import six
 
 
 class ThemeMapper(BrowserView):
@@ -73,7 +74,7 @@ def setup(self):
             THEME_RESOURCE_NAME,
             self.name
         )
-        self.themeBasePathEncoded = urllib.quote_plus(self.themeBasePath)
+        self.themeBasePathEncoded = urllib.parse.quote_plus(self.themeBasePath)
         self.themeBaseUrl = '/'.join([self.portalUrl, self.themeBasePath])
 
         try:
@@ -276,7 +277,7 @@ def getFrame(self):
                 transform = compileThemeTransform(
                     themeInfo.rules, themeInfo.absolutePrefix,
                     settings.readNetwork, themeInfo.parameterExpressions or {})
-            except lxml.etree.XMLSyntaxError, e:
+            except lxml.etree.XMLSyntaxError as e:
                 return self.theme_error_template(error=e.msg)
 
             params = prepareThemeParameters(
@@ -300,13 +301,13 @@ def getFrame(self):
             tree = lxml.html.fromstring(result)
 
             def encodeUrl(orig):
-                origUrl = urlparse.urlparse(orig)
+                origUrl = urllib.parse.urlparse(orig)
                 newPath = origUrl.path
-                newQuery = urlparse.parse_qs(origUrl.query)
+                newQuery = urllib.parse.parse_qs(origUrl.query)
 
                 # relative?
                 if not origUrl.netloc:
-                    newPath = urlparse.urljoin(
+                    newPath = urllib.parse.urljoin(
                         path.rstrip("/") + "/", newPath.lstrip("/"))
                 elif not orig.lower().startswith(portal_url.lower()):
                     # Not an internal URL - ignore
@@ -319,12 +320,12 @@ def encodeUrl(orig):
                 if forms:
                     newQuery['forms'] = forms
                 if title:
-                    if isinstance(title, unicode):
+                    if isinstance(title, six.text_type):
                         newQuery['title'] = title.encode('utf-8', 'replace')
                     else:
                         newQuery['title'] = title
 
-                return self.request.getURL() + '?' + urllib.urlencode(newQuery)
+                return self.request.getURL() + '?' + urllib.parse.urlencode(newQuery)
 
             if title:
                 titleElement = tree.cssselect("html head title")
diff --git a/src/plone/app/theming/plugins/utils.py b/src/plone/app/theming/plugins/utils.py
index a07b278..5b36231 100644
--- a/src/plone/app/theming/plugins/utils.py
+++ b/src/plone/app/theming/plugins/utils.py
@@ -1,9 +1,9 @@
 # -*- coding: utf-8 -*-
-from ConfigParser import SafeConfigParser
 from plone.app.theming.interfaces import IThemePlugin
 from plone.app.theming.interfaces import THEME_RESOURCE_NAME
 from plone.memoize.ram import cache
 from plone.resource.manifest import MANIFEST_FILENAME
+from six.moves.configparser import SafeConfigParser
 from zope.component import getUtilitiesFor
 
 
diff --git a/src/plone/app/theming/tests/test_transform.py b/src/plone/app/theming/tests/test_transform.py
index a707e8d..65d0412 100644
--- a/src/plone/app/theming/tests/test_transform.py
+++ b/src/plone/app/theming/tests/test_transform.py
@@ -18,7 +18,7 @@
 from Products.CMFCore.Expression import Expression
 from Products.CMFCore.Expression import getExprContext
 from Products.CMFCore.utils import getToolByName
-from urllib2 import HTTPError
+from six.moves.urllib.error import HTTPError
 from zope.component import getUtility
 
 import os.path
@@ -656,7 +656,7 @@ def test_theme_for_404(self):
         error = None
         try:
             browser.open('{0:s}/404_page'.format(portal.absolute_url()))
-        except HTTPError, e:
+        except HTTPError as e:
             error = e
         self.assertEqual(error.code, 404)
 
@@ -684,7 +684,7 @@ def test_theme_params_on_404(self):
         error = None
         try:
             browser.open('{0:s}/404_page'.format(portal.absolute_url()))
-        except HTTPError, e:
+        except HTTPError as e:
             error = e
         self.assertEqual(error.code, 404)
 
@@ -737,7 +737,7 @@ def test_navroot_params_on_404_widget_in_path(self):
                     portal['subfolder'].absolute_url()
                 )
             )
-        except HTTPError, e:
+        except HTTPError as e:
             error = e
         self.assertEqual(error.code, 404)
 
@@ -784,7 +784,7 @@ def test_navroot_params_on_404_widget_in_path(self):
 
     #     try:
     #         browser.open('{0:s}/404_page'.format(portal.absolute_url()))
-    #     except HTTPError, e:
+    #     except HTTPError as e:
     #         error = e
     #     self.assertEqual(error.code, 404)
 
diff --git a/src/plone/app/theming/traversal.py b/src/plone/app/theming/traversal.py
index ef625be..996eef6 100644
--- a/src/plone/app/theming/traversal.py
+++ b/src/plone/app/theming/traversal.py
@@ -3,10 +3,9 @@
 from plone.app.theming.utils import theming_policy
 from plone.resource.traversal import ResourceTraverser
 from plone.resource.utils import queryResourceDirectory
+from six.moves import urllib
 from zExceptions import NotFound
 
-import urllib
-
 
 class ThemeTraverser(ResourceTraverser):
     """The theme traverser.
@@ -28,7 +27,7 @@ def traverse(self, name, remaining):
             name = self.current_theme()
 
         # Note: also fixes possible unicode problems
-        name = urllib.quote(name)
+        name = urllib.parse.quote(name)
 
         res = queryResourceDirectory(self.name, name)
         if res is not None:
diff --git a/src/plone/app/theming/utils.py b/src/plone/app/theming/utils.py
index c367fe1..bad6d83 100644
--- a/src/plone/app/theming/utils.py
+++ b/src/plone/app/theming/utils.py
@@ -1,5 +1,4 @@
 # -*- coding: utf-8 -*-
-from ConfigParser import SafeConfigParser
 from diazo.compiler import compile_theme
 from diazo.compiler import quote_param
 from lxml import etree
@@ -26,8 +25,9 @@
 from Products.CMFCore.interfaces import ISiteRoot
 from Products.CMFPlone.utils import safe_unicode
 from Products.PageTemplates.Expressions import getEngine
-from StringIO import StringIO
-from urlparse import urlsplit
+from six import StringIO
+from six.moves.configparser import SafeConfigParser
+from six.moves.urllib.parse import urlsplit
 from zope.component import getUtility
 from zope.component import queryMultiAdapter
 from zope.globalrequest import getRequest
@@ -35,7 +35,7 @@
 
 import logging
 import pkg_resources
-
+import six
 
 LOGGER = logging.getLogger('plone.app.theming')
 
@@ -494,7 +494,7 @@ def createThemeFromTemplate(title, description, baseOn='template'):
         raise KeyError("Theme {0:s} not found".format(baseOn))
 
     themeName = getUtility(IURLNormalizer).normalize(title)
-    if isinstance(themeName, unicode):
+    if isinstance(themeName, six.text_type):
         themeName = themeName.encode('utf-8')
 
     resources = getOrCreatePersistentResourceDirectory()



Repository: plone.app.blob


Branch: refs/heads/master
Date: 2018-01-27T21:51:47+01:00
Author: Ruda Porto Filgueiras (rudaporto) <rudazz@gmail.com>
Commit: https://github.com/plone/plone.app.blob/commit/c95b15da292fad874154b5053dc4805f56f69384

Fix some Python 2 / 3 comptible imports and string types with six.

Files changed:
M CHANGES.rst
M setup.py
M src/plone/app/blob/adapters/pdata.py
M src/plone/app/blob/adapters/stringio.py
M src/plone/app/blob/adapters/xmlrpc.py
M src/plone/app/blob/field.py
M src/plone/app/blob/tests/layer.py
M src/plone/app/blob/tests/test_adapters.py
M src/plone/app/blob/tests/test_integration.py
M src/plone/app/blob/tests/test_scaling.py
M src/plone/app/blob/tests/test_webdav.py
M src/plone/app/blob/tests/utils.py

diff --git a/CHANGES.rst b/CHANGES.rst
index 9bc955c..00540d6 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -14,7 +14,8 @@ New features:
 
 Bug fixes:
 
-- *add item here*
+- Fix some Python 2 / 3 comptible imports and string types with six.
+  [rudaporto]
 
 
 1.7.3 (2017-11-24)
diff --git a/setup.py b/setup.py
index 173d7b7..c814dc3 100644
--- a/setup.py
+++ b/setup.py
@@ -50,6 +50,7 @@ def read(*rnames):
         'plone.app.imaging >1.0b9',
         'plone.scale',
         'setuptools',
+        'six',
         'zope.proxy >=3.4',
     ],
     tests_require=tests_require,
diff --git a/src/plone/app/blob/adapters/pdata.py b/src/plone/app/blob/adapters/pdata.py
index 5e97df9..d1daa75 100644
--- a/src/plone/app/blob/adapters/pdata.py
+++ b/src/plone/app/blob/adapters/pdata.py
@@ -2,7 +2,7 @@
 from OFS.Image import Pdata
 from plone.app.blob.interfaces import IBlobbable
 from plone.app.blob.utils import guessMimetype
-from StringIO import StringIO
+from six import StringIO
 from zope.component import adapts
 from zope.interface import implementer
 
diff --git a/src/plone/app/blob/adapters/stringio.py b/src/plone/app/blob/adapters/stringio.py
index 2e40a97..7085974 100644
--- a/src/plone/app/blob/adapters/stringio.py
+++ b/src/plone/app/blob/adapters/stringio.py
@@ -1,7 +1,7 @@
 # -*- coding: utf-8 -*-
 from plone.app.blob.interfaces import IBlobbable
 from plone.app.blob.utils import guessMimetype
-from StringIO import StringIO
+from six import StringIO
 from zope.component import adapts
 from zope.interface import implementer
 
diff --git a/src/plone/app/blob/adapters/xmlrpc.py b/src/plone/app/blob/adapters/xmlrpc.py
index af88608..5f9b920 100644
--- a/src/plone/app/blob/adapters/xmlrpc.py
+++ b/src/plone/app/blob/adapters/xmlrpc.py
@@ -1,7 +1,7 @@
 # -*- coding: utf-8 -*-
 from plone.app.blob.interfaces import IBlobbable
 from plone.app.blob.utils import guessMimetype
-from xmlrpclib import Binary
+from six.moves.xmlrpc_client import Binary
 from zope.component import adapts
 from zope.interface import implementer
 
diff --git a/src/plone/app/blob/field.py b/src/plone/app/blob/field.py
index 58fb419..6eb4f8c 100644
--- a/src/plone/app/blob/field.py
+++ b/src/plone/app/blob/field.py
@@ -27,12 +27,14 @@
 from Products.Archetypes.Registry import registerField
 from Products.Archetypes.utils import contentDispositionHeader
 from Products.CMFCore.permissions import View
-from StringIO import StringIO
+from six import StringIO
 from transaction import savepoint
 from webdav.common import rfc1123_date
 from ZODB.blob import Blob
 from zope.interface import implementer
 
+import six
+
 
 @implementer(IWebDavUpload)
 class WebDavUpload(object):
@@ -91,8 +93,8 @@ def index_html(self, REQUEST=None, RESPONSE=None, charset='utf-8',
 
         filename = self.getFilename()
         if filename is not None:
-            if not isinstance(filename, unicode):
-                filename = unicode(filename, charset, errors='ignore')
+            if not isinstance(filename, six.text_type):
+                filename = six.text_type(filename, charset, errors='ignore')
             filename = IUserPreferredFileNameNormalizer(
                 REQUEST
             ).normalize(
@@ -282,8 +284,8 @@ def fixAutoId(self, instance):
                     request.form.get('title')
                 ):
                     return  # don't rename now if AT should do it from title
-            if not isinstance(filename, unicode):
-                filename = unicode(filename, instance.getCharset())
+            if not isinstance(filename, six.text_type):
+                filename = six.text_type(filename, instance.getCharset())
             filename = IUserPreferredFileNameNormalizer(
                 request
             ).normalize(
diff --git a/src/plone/app/blob/tests/layer.py b/src/plone/app/blob/tests/layer.py
index 9aaf339..e363631 100644
--- a/src/plone/app/blob/tests/layer.py
+++ b/src/plone/app/blob/tests/layer.py
@@ -5,7 +5,7 @@
 from plone.app.testing.bbb import PTC_FIXTURE
 from plone.testing import z2
 from Products.CMFCore.utils import getToolByName
-from StringIO import StringIO
+from six import StringIO
 
 
 class BlobFixture(PloneTestCaseFixture):
diff --git a/src/plone/app/blob/tests/test_adapters.py b/src/plone/app/blob/tests/test_adapters.py
index f5fc94e..13ace22 100644
--- a/src/plone/app/blob/tests/test_adapters.py
+++ b/src/plone/app/blob/tests/test_adapters.py
@@ -7,8 +7,8 @@
 from plone.app.blob.tests.utils import getImage
 from Products.ATContentTypes.content.file import ATFile
 from Products.ATContentTypes.content.image import ATImage
-from StringIO import StringIO
-from xmlrpclib import Binary
+from six import StringIO
+from six.moves.xmlrpc_client import Binary
 from ZODB.blob import Blob
 
 import os
diff --git a/src/plone/app/blob/tests/test_integration.py b/src/plone/app/blob/tests/test_integration.py
index 70342a5..fd5c55a 100644
--- a/src/plone/app/blob/tests/test_integration.py
+++ b/src/plone/app/blob/tests/test_integration.py
@@ -6,7 +6,7 @@
 from plone.app.blob.tests.utils import getImage
 from plone.app.blob.tests.utils import makeFileUpload
 from plone.app.blob.utils import guessMimetype
-from StringIO import StringIO
+from six import StringIO
 
 
 largefile_data = ('test' * 2048)
diff --git a/src/plone/app/blob/tests/test_scaling.py b/src/plone/app/blob/tests/test_scaling.py
index cfab0c5..44e4311 100644
--- a/src/plone/app/blob/tests/test_scaling.py
+++ b/src/plone/app/blob/tests/test_scaling.py
@@ -7,7 +7,7 @@
 from plone.app.blob.tests.base import ReplacementTestCase
 from plone.app.blob.tests.utils import getData
 from plone.app.imaging.traverse import ImageTraverser
-from StringIO import StringIO
+from six import StringIO
 from ZODB.blob import Blob
 
 
diff --git a/src/plone/app/blob/tests/test_webdav.py b/src/plone/app/blob/tests/test_webdav.py
index 2ad2d5b..012439c 100644
--- a/src/plone/app/blob/tests/test_webdav.py
+++ b/src/plone/app/blob/tests/test_webdav.py
@@ -2,7 +2,7 @@
 from plone.app.blob.interfaces import IATBlobImage
 from plone.app.blob.tests.base import ReplacementTestCase
 from plone.app.blob.tests.utils import getImage
-from StringIO import StringIO
+from six import StringIO
 
 
 class WebDavTests(ReplacementTestCase):
diff --git a/src/plone/app/blob/tests/utils.py b/src/plone/app/blob/tests/utils.py
index d93e374..205c770 100644
--- a/src/plone/app/blob/tests/utils.py
+++ b/src/plone/app/blob/tests/utils.py
@@ -3,7 +3,7 @@
 from os.path import dirname
 from os.path import join
 from plone.app.blob import tests
-from StringIO import StringIO
+from six import StringIO
 from ZPublisher.HTTPRequest import HTTPRequest
 
 


Repository: plone.app.blob


Branch: refs/heads/master
Date: 2018-01-27T21:51:47+01:00
Author: Ruda Porto Filgueiras (rudaporto) <rudazz@gmail.com>
Commit: https://github.com/plone/plone.app.blob/commit/0acd0ab2eac585cbeb83f5aefa9291d07d7e890a

Fix typo.

Files changed:
M CHANGES.rst

diff --git a/CHANGES.rst b/CHANGES.rst
index 00540d6..64f1c6d 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -14,7 +14,7 @@ New features:
 
 Bug fixes:
 
-- Fix some Python 2 / 3 comptible imports and string types with six.
+- Fix some Python 2 / 3 compatible imports and string types with six.
   [rudaporto]
 
 


Repository: plone.app.blob


Branch: refs/heads/master
Date: 2018-01-27T21:52:54+01:00
Author: Philip Bauer (pbauer) <bauer@starzel.de>
Commit: https://github.com/plone/plone.app.blob/commit/86d398ba663806c0137070ef88727de8ff0f6b08

more py3 stuff

Files changed:
M src/plone/app/blob/browser/maintenance.py
M src/plone/app/blob/browser/migration.py
M src/plone/app/blob/browser/size.py
M src/plone/app/blob/download.py
M src/plone/app/blob/field.py
M src/plone/app/blob/tests/utils.py

diff --git a/src/plone/app/blob/browser/maintenance.py b/src/plone/app/blob/browser/maintenance.py
index d9bf56e..42565ca 100644
--- a/src/plone/app/blob/browser/maintenance.py
+++ b/src/plone/app/blob/browser/maintenance.py
@@ -54,7 +54,7 @@ def resetSubtypes(self, batch=1000):
 
         def checkPoint():
             log('intermediate commit ({0} items processed, '
-                'last batch in {1})...\n'.format(processed, lap.next()))
+                'last batch in {1})...\n'.format(processed, next(lap)))
             commit()
         cpi = checkpointIterator(checkPoint, batch)
         context = aq_inner(self.context)
@@ -66,9 +66,9 @@ def checkPoint():
             obj.reindexObject(idxs=['object_provides'])
             log('set blob sub-type for {0} to "{1}"\n'.format(obj, subtype))
             processed += 1
-            cpi.next()
+            next(cpi)
         commit()
-        msg = 'processed {0} items in {1}.'.format(processed, real.next())
+        msg = 'processed {0} items in {1}.'.format(processed, next(real))
         log(msg)
         getLogger('plone.app.blob.maintenance').info(msg)
 
@@ -82,7 +82,7 @@ def updateTypeIndex(self, batch=1000):
 
         def checkPoint():
             log('intermediate commit ({0} items processed, '
-                'last batch in {1})...\n'.format(processed, lap.next()))
+                'last batch in {1})...\n'.format(processed, next(lap)))
             commit()
         cpi = checkpointIterator(checkPoint, batch)
         context = aq_inner(self.context)
@@ -92,8 +92,8 @@ def checkPoint():
             obj.reindexObject(idxs=['Type'])
             log('updated {0}\n'.format(obj))
             processed += 1
-            cpi.next()
+            next(cpi)
         commit()
-        msg = 'processed {0} items in {1}.'.format(processed, real.next())
+        msg = 'processed {0} items in {1}.'.format(processed, next(real))
         log(msg)
         getLogger('plone.app.blob.maintenance').info(msg)
diff --git a/src/plone/app/blob/browser/migration.py b/src/plone/app/blob/browser/migration.py
index 3dfdb18..20f9bb9 100644
--- a/src/plone/app/blob/browser/migration.py
+++ b/src/plone/app/blob/browser/migration.py
@@ -23,7 +23,6 @@ def __call__(self):
         request = aq_inner(self.request)
         walker = self.walker()
         options = dict(target_type=walker.src_portal_type)
-        clicked = request.form.has_key
         portal_url = getToolByName(context, 'portal_url')()
         ttool = getToolByName(context, 'portal_types')
         fti = ttool.get(walker.dst_portal_type)
@@ -43,7 +42,7 @@ def __call__(self):
             )
             IStatusMessage(request).addStatusMessage(msg, type='warning')
             options['nomigrations'] = 42
-        elif clicked('migrate'):
+        elif 'migrate' in request.form:
             output = self.migration()
             # Only count actual migration lines
             lines = output.split('\n')
@@ -54,7 +53,7 @@ def __call__(self):
             IStatusMessage(request).addStatusMessage(msg, type='info')
             options['count'] = count
             options['output'] = output
-        elif clicked('cancel'):
+        elif 'cancel' in request.form:
             msg = _(u'Blob migration cancelled.')
             IStatusMessage(request).addStatusMessage(msg, type='info')
             request.RESPONSE.redirect(portal_url)
diff --git a/src/plone/app/blob/browser/size.py b/src/plone/app/blob/browser/size.py
index 143470b..14321ed 100644
--- a/src/plone/app/blob/browser/size.py
+++ b/src/plone/app/blob/browser/size.py
@@ -38,7 +38,7 @@ def log(msg, *args):
         for idx, brain in enumerate(brains):
             pt = brain.portal_type
             counts[pt] = counts.setdefault(pt, 0) + 1
-            sizes[pt] = sizes.setdefault(pt, 0L) + bytesize(brain.getObjSize)
+            sizes[pt] = sizes.setdefault(pt, 0) + bytesize(brain.getObjSize)
             if idx % 1000 == 0:
                 log('%d/%d...', idx, len(brains))
         log('')
diff --git a/src/plone/app/blob/download.py b/src/plone/app/blob/download.py
index 0151e20..1e8495f 100644
--- a/src/plone/app/blob/download.py
+++ b/src/plone/app/blob/download.py
@@ -26,7 +26,7 @@ def handleIfModifiedSince(instance, REQUEST, RESPONSE):
             if instance._p_mtime:
                 last_mod = long(instance._p_mtime)
             else:
-                last_mod = long(0)
+                last_mod = 0
             if last_mod > 0 and last_mod <= mod_since:
                 RESPONSE.setStatus(304)
                 return True
@@ -65,7 +65,7 @@ def handleRequestRange(instance, length, REQUEST, RESPONSE):
                     if instance._p_mtime:
                         last_mod = long(instance._p_mtime)
                     else:
-                        last_mod = long(0)
+                        last_mod = 0
                     if last_mod > mod_since:
                         # Modified, so send a normal response. We delete
                         # the ranges, which causes us to skip to the 200
diff --git a/src/plone/app/blob/field.py b/src/plone/app/blob/field.py
index 6eb4f8c..1bd5672 100644
--- a/src/plone/app/blob/field.py
+++ b/src/plone/app/blob/field.py
@@ -177,7 +177,7 @@ def getContentType(self):
     @security.private
     def setFilename(self, value):
         """ set filename for this blob """
-        if isinstance(value, basestring):
+        if isinstance(value, six.string_types):
             value = value[max(value.rfind('/'),
                               value.rfind('\\'),
                               value.rfind(':')) + 1:]
@@ -242,14 +242,14 @@ def set(self, instance, value, **kwargs):
         # create a new blob instead of modifying the old one to
         # achieve copy-on-write semantics
         blob = BlobWrapper(self.default_content_type)
-        if isinstance(value, basestring):
+        if isinstance(value, six.string_types):
             value = StringIO(value)     # simple strings cannot be adapted...
             setattr(value, 'filename', kwargs.get('filename', None))
         if value is not None:
             blobbable = IBlobbable(value)
             try:
                 blobbable.feed(blob.getBlob())
-            except ReuseBlob, exception:
+            except ReuseBlob as exception:
                 blob.setBlob(exception.args[0])     # reuse the given blob
             mimetype = kwargs.get('mimetype', None)
             if not mimetype:
diff --git a/src/plone/app/blob/tests/utils.py b/src/plone/app/blob/tests/utils.py
index 205c770..4f94b1c 100644
--- a/src/plone/app/blob/tests/utils.py
+++ b/src/plone/app/blob/tests/utils.py
@@ -56,9 +56,9 @@ def hasLinguaPlone():
         return True
     except ImportError:
         msg = 'WARNING: LinguaPlone not found. Skipping tests.'
-        print '*' * len(msg)
-        print msg
-        print '*' * len(msg)
+        print('*' * len(msg))
+        print(msg)
+        print('*' * len(msg))
         return False
 
 


Repository: plone.app.blob


Branch: refs/heads/master
Date: 2018-01-28T12:50:39+01:00
Author: Philip Bauer (pbauer) <bauer@starzel.de>
Commit: https://github.com/plone/plone.app.blob/commit/85c0b79bbcbeef0c90509903e56c05b4028a8046

Merge pull request #43 from plone/py3_imports

Python 2 / 3 compatible imports.

Files changed:
M CHANGES.rst
M setup.py
M src/plone/app/blob/adapters/pdata.py
M src/plone/app/blob/adapters/stringio.py
M src/plone/app/blob/adapters/xmlrpc.py
M src/plone/app/blob/browser/maintenance.py
M src/plone/app/blob/browser/migration.py
M src/plone/app/blob/browser/size.py
M src/plone/app/blob/download.py
M src/plone/app/blob/field.py
M src/plone/app/blob/tests/layer.py
M src/plone/app/blob/tests/test_adapters.py
M src/plone/app/blob/tests/test_integration.py
M src/plone/app/blob/tests/test_scaling.py
M src/plone/app/blob/tests/test_webdav.py
M src/plone/app/blob/tests/utils.py

diff --git a/CHANGES.rst b/CHANGES.rst
index 9bc955c..64f1c6d 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -14,7 +14,8 @@ New features:
 
 Bug fixes:
 
-- *add item here*
+- Fix some Python 2 / 3 compatible imports and string types with six.
+  [rudaporto]
 
 
 1.7.3 (2017-11-24)
diff --git a/setup.py b/setup.py
index 173d7b7..c814dc3 100644
--- a/setup.py
+++ b/setup.py
@@ -50,6 +50,7 @@ def read(*rnames):
         'plone.app.imaging >1.0b9',
         'plone.scale',
         'setuptools',
+        'six',
         'zope.proxy >=3.4',
     ],
     tests_require=tests_require,
diff --git a/src/plone/app/blob/adapters/pdata.py b/src/plone/app/blob/adapters/pdata.py
index 5e97df9..d1daa75 100644
--- a/src/plone/app/blob/adapters/pdata.py
+++ b/src/plone/app/blob/adapters/pdata.py
@@ -2,7 +2,7 @@
 from OFS.Image import Pdata
 from plone.app.blob.interfaces import IBlobbable
 from plone.app.blob.utils import guessMimetype
-from StringIO import StringIO
+from six import StringIO
 from zope.component import adapts
 from zope.interface import implementer
 
diff --git a/src/plone/app/blob/adapters/stringio.py b/src/plone/app/blob/adapters/stringio.py
index 2e40a97..7085974 100644
--- a/src/plone/app/blob/adapters/stringio.py
+++ b/src/plone/app/blob/adapters/stringio.py
@@ -1,7 +1,7 @@
 # -*- coding: utf-8 -*-
 from plone.app.blob.interfaces import IBlobbable
 from plone.app.blob.utils import guessMimetype
-from StringIO import StringIO
+from six import StringIO
 from zope.component import adapts
 from zope.interface import implementer
 
diff --git a/src/plone/app/blob/adapters/xmlrpc.py b/src/plone/app/blob/adapters/xmlrpc.py
index af88608..5f9b920 100644
--- a/src/plone/app/blob/adapters/xmlrpc.py
+++ b/src/plone/app/blob/adapters/xmlrpc.py
@@ -1,7 +1,7 @@
 # -*- coding: utf-8 -*-
 from plone.app.blob.interfaces import IBlobbable
 from plone.app.blob.utils import guessMimetype
-from xmlrpclib import Binary
+from six.moves.xmlrpc_client import Binary
 from zope.component import adapts
 from zope.interface import implementer
 
diff --git a/src/plone/app/blob/browser/maintenance.py b/src/plone/app/blob/browser/maintenance.py
index d9bf56e..42565ca 100644
--- a/src/plone/app/blob/browser/maintenance.py
+++ b/src/plone/app/blob/browser/maintenance.py
@@ -54,7 +54,7 @@ def resetSubtypes(self, batch=1000):
 
         def checkPoint():
             log('intermediate commit ({0} items processed, '
-                'last batch in {1})...\n'.format(processed, lap.next()))
+                'last batch in {1})...\n'.format(processed, next(lap)))
             commit()
         cpi = checkpointIterator(checkPoint, batch)
         context = aq_inner(self.context)
@@ -66,9 +66,9 @@ def checkPoint():
             obj.reindexObject(idxs=['object_provides'])
             log('set blob sub-type for {0} to "{1}"\n'.format(obj, subtype))
             processed += 1
-            cpi.next()
+            next(cpi)
         commit()
-        msg = 'processed {0} items in {1}.'.format(processed, real.next())
+        msg = 'processed {0} items in {1}.'.format(processed, next(real))
         log(msg)
         getLogger('plone.app.blob.maintenance').info(msg)
 
@@ -82,7 +82,7 @@ def updateTypeIndex(self, batch=1000):
 
         def checkPoint():
             log('intermediate commit ({0} items processed, '
-                'last batch in {1})...\n'.format(processed, lap.next()))
+                'last batch in {1})...\n'.format(processed, next(lap)))
             commit()
         cpi = checkpointIterator(checkPoint, batch)
         context = aq_inner(self.context)
@@ -92,8 +92,8 @@ def checkPoint():
             obj.reindexObject(idxs=['Type'])
             log('updated {0}\n'.format(obj))
             processed += 1
-            cpi.next()
+            next(cpi)
         commit()
-        msg = 'processed {0} items in {1}.'.format(processed, real.next())
+        msg = 'processed {0} items in {1}.'.format(processed, next(real))
         log(msg)
         getLogger('plone.app.blob.maintenance').info(msg)
diff --git a/src/plone/app/blob/browser/migration.py b/src/plone/app/blob/browser/migration.py
index 3dfdb18..20f9bb9 100644
--- a/src/plone/app/blob/browser/migration.py
+++ b/src/plone/app/blob/browser/migration.py
@@ -23,7 +23,6 @@ def __call__(self):
         request = aq_inner(self.request)
         walker = self.walker()
         options = dict(target_type=walker.src_portal_type)
-        clicked = request.form.has_key
         portal_url = getToolByName(context, 'portal_url')()
         ttool = getToolByName(context, 'portal_types')
         fti = ttool.get(walker.dst_portal_type)
@@ -43,7 +42,7 @@ def __call__(self):
             )
             IStatusMessage(request).addStatusMessage(msg, type='warning')
             options['nomigrations'] = 42
-        elif clicked('migrate'):
+        elif 'migrate' in request.form:
             output = self.migration()
             # Only count actual migration lines
             lines = output.split('\n')
@@ -54,7 +53,7 @@ def __call__(self):
             IStatusMessage(request).addStatusMessage(msg, type='info')
             options['count'] = count
             options['output'] = output
-        elif clicked('cancel'):
+        elif 'cancel' in request.form:
             msg = _(u'Blob migration cancelled.')
             IStatusMessage(request).addStatusMessage(msg, type='info')
             request.RESPONSE.redirect(portal_url)
diff --git a/src/plone/app/blob/browser/size.py b/src/plone/app/blob/browser/size.py
index 143470b..14321ed 100644
--- a/src/plone/app/blob/browser/size.py
+++ b/src/plone/app/blob/browser/size.py
@@ -38,7 +38,7 @@ def log(msg, *args):
         for idx, brain in enumerate(brains):
             pt = brain.portal_type
             counts[pt] = counts.setdefault(pt, 0) + 1
-            sizes[pt] = sizes.setdefault(pt, 0L) + bytesize(brain.getObjSize)
+            sizes[pt] = sizes.setdefault(pt, 0) + bytesize(brain.getObjSize)
             if idx % 1000 == 0:
                 log('%d/%d...', idx, len(brains))
         log('')
diff --git a/src/plone/app/blob/download.py b/src/plone/app/blob/download.py
index 0151e20..1e8495f 100644
--- a/src/plone/app/blob/download.py
+++ b/src/plone/app/blob/download.py
@@ -26,7 +26,7 @@ def handleIfModifiedSince(instance, REQUEST, RESPONSE):
             if instance._p_mtime:
                 last_mod = long(instance._p_mtime)
             else:
-                last_mod = long(0)
+                last_mod = 0
             if last_mod > 0 and last_mod <= mod_since:
                 RESPONSE.setStatus(304)
                 return True
@@ -65,7 +65,7 @@ def handleRequestRange(instance, length, REQUEST, RESPONSE):
                     if instance._p_mtime:
                         last_mod = long(instance._p_mtime)
                     else:
-                        last_mod = long(0)
+                        last_mod = 0
                     if last_mod > mod_since:
                         # Modified, so send a normal response. We delete
                         # the ranges, which causes us to skip to the 200
diff --git a/src/plone/app/blob/field.py b/src/plone/app/blob/field.py
index 58fb419..1bd5672 100644
--- a/src/plone/app/blob/field.py
+++ b/src/plone/app/blob/field.py
@@ -27,12 +27,14 @@
 from Products.Archetypes.Registry import registerField
 from Products.Archetypes.utils import contentDispositionHeader
 from Products.CMFCore.permissions import View
-from StringIO import StringIO
+from six import StringIO
 from transaction import savepoint
 from webdav.common import rfc1123_date
 from ZODB.blob import Blob
 from zope.interface import implementer
 
+import six
+
 
 @implementer(IWebDavUpload)
 class WebDavUpload(object):
@@ -91,8 +93,8 @@ def index_html(self, REQUEST=None, RESPONSE=None, charset='utf-8',
 
         filename = self.getFilename()
         if filename is not None:
-            if not isinstance(filename, unicode):
-                filename = unicode(filename, charset, errors='ignore')
+            if not isinstance(filename, six.text_type):
+                filename = six.text_type(filename, charset, errors='ignore')
             filename = IUserPreferredFileNameNormalizer(
                 REQUEST
             ).normalize(
@@ -175,7 +177,7 @@ def getContentType(self):
     @security.private
     def setFilename(self, value):
         """ set filename for this blob """
-        if isinstance(value, basestring):
+        if isinstance(value, six.string_types):
             value = value[max(value.rfind('/'),
                               value.rfind('\\'),
                               value.rfind(':')) + 1:]
@@ -240,14 +242,14 @@ def set(self, instance, value, **kwargs):
         # create a new blob instead of modifying the old one to
         # achieve copy-on-write semantics
         blob = BlobWrapper(self.default_content_type)
-        if isinstance(value, basestring):
+        if isinstance(value, six.string_types):
             value = StringIO(value)     # simple strings cannot be adapted...
             setattr(value, 'filename', kwargs.get('filename', None))
         if value is not None:
             blobbable = IBlobbable(value)
             try:
                 blobbable.feed(blob.getBlob())
-            except ReuseBlob, exception:
+            except ReuseBlob as exception:
                 blob.setBlob(exception.args[0])     # reuse the given blob
             mimetype = kwargs.get('mimetype', None)
             if not mimetype:
@@ -282,8 +284,8 @@ def fixAutoId(self, instance):
                     request.form.get('title')
                 ):
                     return  # don't rename now if AT should do it from title
-            if not isinstance(filename, unicode):
-                filename = unicode(filename, instance.getCharset())
+            if not isinstance(filename, six.text_type):
+                filename = six.text_type(filename, instance.getCharset())
             filename = IUserPreferredFileNameNormalizer(
                 request
             ).normalize(
diff --git a/src/plone/app/blob/tests/layer.py b/src/plone/app/blob/tests/layer.py
index 9aaf339..e363631 100644
--- a/src/plone/app/blob/tests/layer.py
+++ b/src/plone/app/blob/tests/layer.py
@@ -5,7 +5,7 @@
 from plone.app.testing.bbb import PTC_FIXTURE
 from plone.testing import z2
 from Products.CMFCore.utils import getToolByName
-from StringIO import StringIO
+from six import StringIO
 
 
 class BlobFixture(PloneTestCaseFixture):
diff --git a/src/plone/app/blob/tests/test_adapters.py b/src/plone/app/blob/tests/test_adapters.py
index f5fc94e..13ace22 100644
--- a/src/plone/app/blob/tests/test_adapters.py
+++ b/src/plone/app/blob/tests/test_adapters.py
@@ -7,8 +7,8 @@
 from plone.app.blob.tests.utils import getImage
 from Products.ATContentTypes.content.file import ATFile
 from Products.ATContentTypes.content.image import ATImage
-from StringIO import StringIO
-from xmlrpclib import Binary
+from six import StringIO
+from six.moves.xmlrpc_client import Binary
 from ZODB.blob import Blob
 
 import os
diff --git a/src/plone/app/blob/tests/test_integration.py b/src/plone/app/blob/tests/test_integration.py
index 70342a5..fd5c55a 100644
--- a/src/plone/app/blob/tests/test_integration.py
+++ b/src/plone/app/blob/tests/test_integration.py
@@ -6,7 +6,7 @@
 from plone.app.blob.tests.utils import getImage
 from plone.app.blob.tests.utils import makeFileUpload
 from plone.app.blob.utils import guessMimetype
-from StringIO import StringIO
+from six import StringIO
 
 
 largefile_data = ('test' * 2048)
diff --git a/src/plone/app/blob/tests/test_scaling.py b/src/plone/app/blob/tests/test_scaling.py
index cfab0c5..44e4311 100644
--- a/src/plone/app/blob/tests/test_scaling.py
+++ b/src/plone/app/blob/tests/test_scaling.py
@@ -7,7 +7,7 @@
 from plone.app.blob.tests.base import ReplacementTestCase
 from plone.app.blob.tests.utils import getData
 from plone.app.imaging.traverse import ImageTraverser
-from StringIO import StringIO
+from six import StringIO
 from ZODB.blob import Blob
 
 
diff --git a/src/plone/app/blob/tests/test_webdav.py b/src/plone/app/blob/tests/test_webdav.py
index 2ad2d5b..012439c 100644
--- a/src/plone/app/blob/tests/test_webdav.py
+++ b/src/plone/app/blob/tests/test_webdav.py
@@ -2,7 +2,7 @@
 from plone.app.blob.interfaces import IATBlobImage
 from plone.app.blob.tests.base import ReplacementTestCase
 from plone.app.blob.tests.utils import getImage
-from StringIO import StringIO
+from six import StringIO
 
 
 class WebDavTests(ReplacementTestCase):
diff --git a/src/plone/app/blob/tests/utils.py b/src/plone/app/blob/tests/utils.py
index d93e374..4f94b1c 100644
--- a/src/plone/app/blob/tests/utils.py
+++ b/src/plone/app/blob/tests/utils.py
@@ -3,7 +3,7 @@
 from os.path import dirname
 from os.path import join
 from plone.app.blob import tests
-from StringIO import StringIO
+from six import StringIO
 from ZPublisher.HTTPRequest import HTTPRequest
 
 
@@ -56,9 +56,9 @@ def hasLinguaPlone():
         return True
     except ImportError:
         msg = 'WARNING: LinguaPlone not found. Skipping tests.'
-        print '*' * len(msg)
-        print msg
-        print '*' * len(msg)
+        print('*' * len(msg))
+        print(msg)
+        print('*' * len(msg))
         return False
 
 



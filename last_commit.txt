Repository: plone.api


Branch: refs/heads/master
Date: 2018-02-16T01:07:11+01:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.api/commit/43ed10e55cf1c63e7c48863a38a5189ff1bff30a

Fixed import sort order.

Files changed:
M src/plone/api/portal.py

diff --git a/src/plone/api/portal.py b/src/plone/api/portal.py
index eada107..897dd6e 100644
--- a/src/plone/api/portal.py
+++ b/src/plone/api/portal.py
@@ -2,8 +2,8 @@
 """Module that provides various utility methods on the portal level."""
 
 from Acquisition import aq_inner
-from datetime import datetime as dtime
 from datetime import date
+from datetime import datetime as dtime
 from email.utils import formataddr
 from email.utils import parseaddr
 from logging import getLogger


Repository: plone.api


Branch: refs/heads/master
Date: 2018-02-16T01:07:11+01:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.api/commit/62b192f4840884c7eba24c88d66a18c94f913fe0

Fixed flake8, mostly commas.

Files changed:
M src/plone/api/content.py
M src/plone/api/tests/test_content.py
M src/plone/api/tests/test_group.py
M src/plone/api/tests/test_user.py

diff --git a/src/plone/api/content.py b/src/plone/api/content.py
index 03913c9..fd0136e 100644
--- a/src/plone/api/content.py
+++ b/src/plone/api/content.py
@@ -407,8 +407,9 @@ def _wf_transitions_for(workflow, from_state, to_state):
 
     transition_maps = {}
     for transition in workflow.transitions.objectValues():
-        value = (transition.getId(), exit_state_maps.get(
-            transition.getId(), [],),
+        value = (
+            transition.getId(),
+            exit_state_maps.get(transition.getId(), []),
         )
         if transition.new_state_id not in transition_maps:
             transition_maps[transition.new_state_id] = [value]
diff --git a/src/plone/api/tests/test_content.py b/src/plone/api/tests/test_content.py
index 1662e8f..1debbe8 100644
--- a/src/plone/api/tests/test_content.py
+++ b/src/plone/api/tests/test_content.py
@@ -748,7 +748,8 @@ def test_delete_ignore_linkintegrity(self):
 
     @unittest.skipIf(
         HAS_PACONTENTYPES and not NEW_LINKINTEGRITY,
-        'This test only makes sense with Archetypes or new Linkintegrity.')
+        'This test only makes sense with Archetypes or new Linkintegrity.',
+    )
     def test_delete_check_linkintegrity(self):
         """Test deleting a content item with a link pointed at it."""
         self._set_text(self.team, '<a href="contact">contact</a>')
@@ -762,7 +763,8 @@ def test_delete_check_linkintegrity(self):
 
     @unittest.skipIf(
         HAS_PACONTENTYPES and not NEW_LINKINTEGRITY,
-        'This test only makes sense with Archetypes or new Linkintegrity.')
+        'This test only makes sense with Archetypes or new Linkintegrity.',
+    )
     def test_delete_multiple_check_linkintegrity(self):
         """Test deleting multiple item with linkintegrity-breaches."""
         self._set_text(self.team, '<a href="../about/contact">contact</a>')
@@ -778,7 +780,8 @@ def test_delete_multiple_check_linkintegrity(self):
 
     @unittest.skipIf(
         HAS_PACONTENTYPES and not NEW_LINKINTEGRITY,
-        'This test only makes sense with Archetypes or new Linkintegrity.')
+        'This test only makes sense with Archetypes or new Linkintegrity.',
+    )
     def test_delete_multiple_ignore_linkintegrity(self):
         """Test deleting multiple items ignoring linkintegrity-breaches."""
         self._set_text(self.team, '<a href="../about/contact">contact</a>')
@@ -793,7 +796,8 @@ def test_delete_multiple_ignore_linkintegrity(self):
 
     @unittest.skipIf(
         HAS_PACONTENTYPES and not NEW_LINKINTEGRITY,
-        'This test only makes sense with Archetypes or new Linkintegrity.')
+        'This test only makes sense with Archetypes or new Linkintegrity.',
+    )
     def test_delete_with_internal_breaches(self):
         """Test deleting multiple with internal linkintegrity breaches."""
         self._set_text(self.team, '<a href="../about/contact">contact</a>')
@@ -809,7 +813,9 @@ def test_delete_with_internal_breaches(self):
             self.assertIn('training', self.portal['events'].keys())
 
     @unittest.skipUnless(
-        NEW_LINKINTEGRITY, 'Only new Linkintegrity resolves internal breaches')
+        NEW_LINKINTEGRITY,
+        'Only new Linkintegrity resolves internal breaches',
+    )
     def test_delete_with_resolved_internal_breaches(self):
         """Test deleting multiple with internal linkintegrity breaches."""
         self._set_text(self.team, '<a href="../about/contact">contact</a>')
diff --git a/src/plone/api/tests/test_group.py b/src/plone/api/tests/test_group.py
index 187b992..d7dfb37 100644
--- a/src/plone/api/tests/test_group.py
+++ b/src/plone/api/tests/test_group.py
@@ -67,8 +67,8 @@ def test_create_with_roles_and_groups(self):
 
         ham_group = api.group.create(
             groupname='ham',
-            roles=['Editor', ],
-            groups=['Reviewer', ],
+            roles=['Editor'],
+            groups=['Reviewer'],
         )
         group = self.group_tool.getGroupById('ham')
         self.assertEqual(ham_group, group)
@@ -491,7 +491,7 @@ def test_grant_roles_in_context(self):
         )
         self.assertEqual(
             ROLES,
-            set(api.group.get_roles(group=group, obj=folder, inherit=False,)),
+            set(api.group.get_roles(group=group, obj=folder, inherit=False)),
         )
         self.assertEqual(
             set([]),
@@ -749,7 +749,7 @@ def test_revoke_roles_in_context(self):
             api.group.get_roles(group=group, obj=document),
         )
 
-        ROLES = set(['Authenticated', ])
+        ROLES = set(['Authenticated'])
         self.assertEqual(
             ROLES,
             set(api.group.get_roles(groupname='ploneboat', obj=folder)),
diff --git a/src/plone/api/tests/test_user.py b/src/plone/api/tests/test_user.py
index 4c88bba..8036ca5 100644
--- a/src/plone/api/tests/test_user.py
+++ b/src/plone/api/tests/test_user.py
@@ -138,7 +138,7 @@ def test_create_default_roles(self):
         )
         self.assertItemsEqual(
             api.user.get_roles(user=user),
-            ['Member', 'Authenticated', ],
+            ['Member', 'Authenticated'],
         )
 
     def test_create_specified_roles(self):
@@ -164,7 +164,7 @@ def test_create_no_roles(self):
         )
         self.assertItemsEqual(
             api.user.get_roles(user=user),
-            ['Authenticated', ],
+            ['Authenticated'],
         )
 
     def test_get_constraints(self):
@@ -288,7 +288,7 @@ def test_is_anonymous(self):
 
     def test_get_roles_username(self):
         """Test get roles passing a username."""
-        ROLES = ['Reviewer', 'Editor', ]
+        ROLES = ['Reviewer', 'Editor']
         api.user.create(
             username='chuck',
             email='chuck@norris.org',
@@ -710,15 +710,15 @@ def test_revoke_roles(self):
             password='secret',
         )
 
-        api.user.grant_roles(username='chuck', roles=['Reviewer', 'Editor', ])
-        api.user.revoke_roles(username='chuck', roles=['Reviewer', ])
+        api.user.grant_roles(username='chuck', roles=['Reviewer', 'Editor'])
+        api.user.revoke_roles(username='chuck', roles=['Reviewer'])
         self.assertNotIn('Reviewer', api.user.get_roles(username='chuck'))
         self.assertNotIn('Reviewer', api.user.get_roles(user=user))
         self.assertIn('Editor', api.user.get_roles(username='chuck'))
         self.assertIn('Editor', api.user.get_roles(user=user))
 
-        api.user.revoke_roles(username='chuck', roles=('Editor',))
-        ROLES = ['Authenticated', 'Member', ]
+        api.user.revoke_roles(username='chuck', roles=('Editor'))
+        ROLES = ['Authenticated', 'Member']
         self.assertItemsEqual(
             ROLES,
             api.user.get_roles(username='chuck'),
@@ -785,7 +785,7 @@ def test_revoke_roles_username(self):
         )
         from plone.api.exc import InvalidParameterError
         with self.assertRaises(InvalidParameterError):
-            api.user.revoke_roles(username='chuck', roles=['Authenticated', ])
+            api.user.revoke_roles(username='chuck', roles=['Authenticated'])
 
     @unittest.skip('Getting the Anonymous user does not work like this.')
     def test_revoke_roles_from_anonymous(self):
@@ -794,7 +794,7 @@ def test_revoke_roles_from_anonymous(self):
             username='Anonymous User',
             roles=['Reviewer'],
         )
-        ROLES = ['Anonymous', ]
+        ROLES = ['Anonymous']
         self.assertItemsEqual(
             ROLES,
             api.user.get_roles(username='Anonymous User'),
@@ -880,7 +880,7 @@ def test_grant_roles_in_context(self):
             api.user.get_roles(user=user, obj=document),
         )
 
-        ROLES = ['Editor', 'Contributor', 'Authenticated', 'Member', ]
+        ROLES = ['Editor', 'Contributor', 'Authenticated', 'Member']
         self.assertItemsEqual(
             ROLES,
             api.user.get_roles(username='chuck', obj=folder),
@@ -967,7 +967,7 @@ def getRoles(self, principal_id):
         # The adapter role is in in the local roles but not persistent
         self.assertItemsEqual(
             api.user.get_roles(username='chuck', obj=folder, inherit=False),
-            ['Contributor', 'Reviewer', ],
+            ['Contributor', 'Reviewer'],
         )
         local_roles = getattr(folder, '__ac_local_roles__', {})
         self.assertEqual(
@@ -981,7 +981,7 @@ def getRoles(self, principal_id):
         )
         self.assertItemsEqual(
             api.user.get_roles(username='chuck', obj=document),
-            ['Member', 'Authenticated', 'Contributor', 'Reviewer', ],
+            ['Member', 'Authenticated', 'Contributor', 'Reviewer'],
         )
 
         # add a group and test mix of group and adapter and user-roles
@@ -995,12 +995,12 @@ def getRoles(self, principal_id):
 
         self.assertItemsEqual(
             api.user.get_roles(username='chuck', obj=document, inherit=False),
-            ['Contributor', 'Reviewer', ],
+            ['Contributor', 'Reviewer'],
         )
         api.group.grant_roles(groupname='foo', roles=['Manager'], obj=folder)
         self.assertItemsEqual(
             api.user.get_roles(username='chuck', obj=document, inherit=False),
-            ['Contributor', 'Reviewer', ],
+            ['Contributor', 'Reviewer'],
         )
         self.assertItemsEqual(
             api.user.get_roles(username='chuck', obj=document),
@@ -1024,7 +1024,7 @@ def getRoles(self, principal_id):
         )
         self.assertItemsEqual(
             api.user.get_roles(username='chuck', obj=folder, inherit=False),
-            ['Contributor', 'Reviewer', 'Manager', ],
+            ['Contributor', 'Reviewer', 'Manager'],
         )
 
         # cleanup
@@ -1098,7 +1098,7 @@ def test_revoke_roles_in_context(self):
         )
         self.assertNotIn('Editor', api.user.get_roles(user=user, obj=document))
 
-        ROLES = ['Authenticated', 'Member', ]
+        ROLES = ['Authenticated', 'Member']
         self.assertItemsEqual(
             ROLES,
             api.user.get_roles(username='chuck', obj=folder),


Repository: plone.api


Branch: refs/heads/master
Date: 2018-02-16T01:07:11+01:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.api/commit/4c778403f767e6210a0fbea0fdb6d5d5a195ad1c

Solve isort confusion with datetime and DateTime.

flake8 wants it one way, isort another.
And when you let isort fix it, it complains again.

Files changed:
M src/plone/api/tests/test_portal.py

diff --git a/src/plone/api/tests/test_portal.py b/src/plone/api/tests/test_portal.py
index b4ad86f..8b06571 100644
--- a/src/plone/api/tests/test_portal.py
+++ b/src/plone/api/tests/test_portal.py
@@ -3,7 +3,6 @@
 
 from datetime import date
 from datetime import datetime
-from DateTime import DateTime
 from email import message_from_string
 from pkg_resources import parse_version
 from plone.api import content
@@ -23,6 +22,7 @@
 from zope.interface import Interface
 from zope.site import LocalSiteManager
 
+import DateTime
 import mock
 import unittest
 
@@ -386,19 +386,19 @@ def test_get_localized_time(self):
 
         # tests
         result = portal.get_localized_time(
-            datetime=DateTime(1999, 12, 31, 23, 59),
+            datetime=DateTime.DateTime(1999, 12, 31, 23, 59),
             long_format=True,
         )
         self.assertEqual(result, 'Dec 31, 1999 11:59 PM')
 
         result = portal.get_localized_time(
-            datetime=DateTime(1999, 12, 31, 23, 59),
+            datetime=DateTime.DateTime(1999, 12, 31, 23, 59),
             time_only=True,
         )
         self.assertEqual(result, '11:59 PM')
 
         result = portal.get_localized_time(
-            datetime=DateTime(1999, 12, 31, 23, 59),
+            datetime=DateTime.DateTime(1999, 12, 31, 23, 59),
         )
         self.assertEqual(result, 'Dec 31, 1999')
 


Repository: plone.api


Branch: refs/heads/master
Date: 2018-02-16T01:08:09+01:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.api/commit/9c6ad0180b1336d7a60f138607b65b95e0aa4c77

Added history note: Improved code quality according to isort and flake8.

Files changed:
M CHANGES.rst

diff --git a/CHANGES.rst b/CHANGES.rst
index eda8c7a..eee3653 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -14,6 +14,8 @@ New features:
 
 Bug fixes:
 
+- Improved code quality according to isort and flake8.  [maurits]
+
 - Fixed regular expression in test for Plone version.  [maurits]
 
 


Repository: plone.api


Branch: refs/heads/master
Date: 2018-02-16T01:29:46+01:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.api/commit/bd8d4615c60d020cc4439f48f123636f97471c79

Solve more isort confusion with datetime.

The isort setups on Jenkins and Travis do not agree.
Apparently it is unclear what the correct sort order is for these versions:

  from datetime import date
  from datetime import datetime as dtime

So I replaced it with:

  import datetime as dtime

We don't use simple `import datetime` under its own name,
because one of the functions uses 'datetime' as an argument.

Files changed:
M src/plone/api/portal.py

diff --git a/src/plone/api/portal.py b/src/plone/api/portal.py
index 897dd6e..8d1791b 100644
--- a/src/plone/api/portal.py
+++ b/src/plone/api/portal.py
@@ -2,8 +2,6 @@
 """Module that provides various utility methods on the portal level."""
 
 from Acquisition import aq_inner
-from datetime import date
-from datetime import datetime as dtime
 from email.utils import formataddr
 from email.utils import parseaddr
 from logging import getLogger
@@ -20,6 +18,7 @@
 from zope.globalrequest import getRequest
 from zope.interface.interfaces import IInterface
 
+import datetime as dtime
 import pkg_resources
 import six
 
@@ -239,10 +238,10 @@ def get_localized_time(datetime=None, long_format=False, time_only=False):
     request = getRequest()
 
     # isinstance won't work because of date -> datetime inheritance
-    if type(datetime) is date:
+    if type(datetime) is dtime.date:
         if time_only:
             return ''
-        datetime = dtime(datetime.year, datetime.month, datetime.day)
+        datetime = dtime.datetime(datetime.year, datetime.month, datetime.day)
         long_format = False
 
     return tool.ulocalized_time(


Repository: plone.api


Branch: refs/heads/master
Date: 2018-02-16T01:49:45+01:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.api/commit/7244364b94371ccb715f7665c913c250ff0b1103

Re-added comma that I should not have removed.

I thought flake8 complained about this line, but it apparently was a different one.
I wondered about this one.
When you revoke the ('Editor') roles, without comma, you revoke the role E, d, i, t, o, r.
Not what you want. :-)
('Editor',) works.  A list would work too.

Files changed:
M src/plone/api/tests/test_user.py

diff --git a/src/plone/api/tests/test_user.py b/src/plone/api/tests/test_user.py
index 8036ca5..1925c0a 100644
--- a/src/plone/api/tests/test_user.py
+++ b/src/plone/api/tests/test_user.py
@@ -717,7 +717,7 @@ def test_revoke_roles(self):
         self.assertIn('Editor', api.user.get_roles(username='chuck'))
         self.assertIn('Editor', api.user.get_roles(user=user))
 
-        api.user.revoke_roles(username='chuck', roles=('Editor'))
+        api.user.revoke_roles(username='chuck', roles=('Editor',))
         ROLES = ['Authenticated', 'Member']
         self.assertItemsEqual(
             ROLES,


Repository: plone.api


Branch: refs/heads/master
Date: 2018-02-16T09:21:20+01:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.api/commit/c978a7af13ef0337926c5c2fc82bbf9f48d482a9

Merge pull request #397 from plone/isort-flake8-improvements

Isort flake8 improvements

Files changed:
M CHANGES.rst
M src/plone/api/content.py
M src/plone/api/portal.py
M src/plone/api/tests/test_content.py
M src/plone/api/tests/test_group.py
M src/plone/api/tests/test_portal.py
M src/plone/api/tests/test_user.py

diff --git a/CHANGES.rst b/CHANGES.rst
index eda8c7a..eee3653 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -14,6 +14,8 @@ New features:
 
 Bug fixes:
 
+- Improved code quality according to isort and flake8.  [maurits]
+
 - Fixed regular expression in test for Plone version.  [maurits]
 
 
diff --git a/src/plone/api/content.py b/src/plone/api/content.py
index 03913c9..fd0136e 100644
--- a/src/plone/api/content.py
+++ b/src/plone/api/content.py
@@ -407,8 +407,9 @@ def _wf_transitions_for(workflow, from_state, to_state):
 
     transition_maps = {}
     for transition in workflow.transitions.objectValues():
-        value = (transition.getId(), exit_state_maps.get(
-            transition.getId(), [],),
+        value = (
+            transition.getId(),
+            exit_state_maps.get(transition.getId(), []),
         )
         if transition.new_state_id not in transition_maps:
             transition_maps[transition.new_state_id] = [value]
diff --git a/src/plone/api/portal.py b/src/plone/api/portal.py
index eada107..8d1791b 100644
--- a/src/plone/api/portal.py
+++ b/src/plone/api/portal.py
@@ -2,8 +2,6 @@
 """Module that provides various utility methods on the portal level."""
 
 from Acquisition import aq_inner
-from datetime import datetime as dtime
-from datetime import date
 from email.utils import formataddr
 from email.utils import parseaddr
 from logging import getLogger
@@ -20,6 +18,7 @@
 from zope.globalrequest import getRequest
 from zope.interface.interfaces import IInterface
 
+import datetime as dtime
 import pkg_resources
 import six
 
@@ -239,10 +238,10 @@ def get_localized_time(datetime=None, long_format=False, time_only=False):
     request = getRequest()
 
     # isinstance won't work because of date -> datetime inheritance
-    if type(datetime) is date:
+    if type(datetime) is dtime.date:
         if time_only:
             return ''
-        datetime = dtime(datetime.year, datetime.month, datetime.day)
+        datetime = dtime.datetime(datetime.year, datetime.month, datetime.day)
         long_format = False
 
     return tool.ulocalized_time(
diff --git a/src/plone/api/tests/test_content.py b/src/plone/api/tests/test_content.py
index 1662e8f..1debbe8 100644
--- a/src/plone/api/tests/test_content.py
+++ b/src/plone/api/tests/test_content.py
@@ -748,7 +748,8 @@ def test_delete_ignore_linkintegrity(self):
 
     @unittest.skipIf(
         HAS_PACONTENTYPES and not NEW_LINKINTEGRITY,
-        'This test only makes sense with Archetypes or new Linkintegrity.')
+        'This test only makes sense with Archetypes or new Linkintegrity.',
+    )
     def test_delete_check_linkintegrity(self):
         """Test deleting a content item with a link pointed at it."""
         self._set_text(self.team, '<a href="contact">contact</a>')
@@ -762,7 +763,8 @@ def test_delete_check_linkintegrity(self):
 
     @unittest.skipIf(
         HAS_PACONTENTYPES and not NEW_LINKINTEGRITY,
-        'This test only makes sense with Archetypes or new Linkintegrity.')
+        'This test only makes sense with Archetypes or new Linkintegrity.',
+    )
     def test_delete_multiple_check_linkintegrity(self):
         """Test deleting multiple item with linkintegrity-breaches."""
         self._set_text(self.team, '<a href="../about/contact">contact</a>')
@@ -778,7 +780,8 @@ def test_delete_multiple_check_linkintegrity(self):
 
     @unittest.skipIf(
         HAS_PACONTENTYPES and not NEW_LINKINTEGRITY,
-        'This test only makes sense with Archetypes or new Linkintegrity.')
+        'This test only makes sense with Archetypes or new Linkintegrity.',
+    )
     def test_delete_multiple_ignore_linkintegrity(self):
         """Test deleting multiple items ignoring linkintegrity-breaches."""
         self._set_text(self.team, '<a href="../about/contact">contact</a>')
@@ -793,7 +796,8 @@ def test_delete_multiple_ignore_linkintegrity(self):
 
     @unittest.skipIf(
         HAS_PACONTENTYPES and not NEW_LINKINTEGRITY,
-        'This test only makes sense with Archetypes or new Linkintegrity.')
+        'This test only makes sense with Archetypes or new Linkintegrity.',
+    )
     def test_delete_with_internal_breaches(self):
         """Test deleting multiple with internal linkintegrity breaches."""
         self._set_text(self.team, '<a href="../about/contact">contact</a>')
@@ -809,7 +813,9 @@ def test_delete_with_internal_breaches(self):
             self.assertIn('training', self.portal['events'].keys())
 
     @unittest.skipUnless(
-        NEW_LINKINTEGRITY, 'Only new Linkintegrity resolves internal breaches')
+        NEW_LINKINTEGRITY,
+        'Only new Linkintegrity resolves internal breaches',
+    )
     def test_delete_with_resolved_internal_breaches(self):
         """Test deleting multiple with internal linkintegrity breaches."""
         self._set_text(self.team, '<a href="../about/contact">contact</a>')
diff --git a/src/plone/api/tests/test_group.py b/src/plone/api/tests/test_group.py
index 187b992..d7dfb37 100644
--- a/src/plone/api/tests/test_group.py
+++ b/src/plone/api/tests/test_group.py
@@ -67,8 +67,8 @@ def test_create_with_roles_and_groups(self):
 
         ham_group = api.group.create(
             groupname='ham',
-            roles=['Editor', ],
-            groups=['Reviewer', ],
+            roles=['Editor'],
+            groups=['Reviewer'],
         )
         group = self.group_tool.getGroupById('ham')
         self.assertEqual(ham_group, group)
@@ -491,7 +491,7 @@ def test_grant_roles_in_context(self):
         )
         self.assertEqual(
             ROLES,
-            set(api.group.get_roles(group=group, obj=folder, inherit=False,)),
+            set(api.group.get_roles(group=group, obj=folder, inherit=False)),
         )
         self.assertEqual(
             set([]),
@@ -749,7 +749,7 @@ def test_revoke_roles_in_context(self):
             api.group.get_roles(group=group, obj=document),
         )
 
-        ROLES = set(['Authenticated', ])
+        ROLES = set(['Authenticated'])
         self.assertEqual(
             ROLES,
             set(api.group.get_roles(groupname='ploneboat', obj=folder)),
diff --git a/src/plone/api/tests/test_portal.py b/src/plone/api/tests/test_portal.py
index b4ad86f..8b06571 100644
--- a/src/plone/api/tests/test_portal.py
+++ b/src/plone/api/tests/test_portal.py
@@ -3,7 +3,6 @@
 
 from datetime import date
 from datetime import datetime
-from DateTime import DateTime
 from email import message_from_string
 from pkg_resources import parse_version
 from plone.api import content
@@ -23,6 +22,7 @@
 from zope.interface import Interface
 from zope.site import LocalSiteManager
 
+import DateTime
 import mock
 import unittest
 
@@ -386,19 +386,19 @@ def test_get_localized_time(self):
 
         # tests
         result = portal.get_localized_time(
-            datetime=DateTime(1999, 12, 31, 23, 59),
+            datetime=DateTime.DateTime(1999, 12, 31, 23, 59),
             long_format=True,
         )
         self.assertEqual(result, 'Dec 31, 1999 11:59 PM')
 
         result = portal.get_localized_time(
-            datetime=DateTime(1999, 12, 31, 23, 59),
+            datetime=DateTime.DateTime(1999, 12, 31, 23, 59),
             time_only=True,
         )
         self.assertEqual(result, '11:59 PM')
 
         result = portal.get_localized_time(
-            datetime=DateTime(1999, 12, 31, 23, 59),
+            datetime=DateTime.DateTime(1999, 12, 31, 23, 59),
         )
         self.assertEqual(result, 'Dec 31, 1999')
 
diff --git a/src/plone/api/tests/test_user.py b/src/plone/api/tests/test_user.py
index 4c88bba..1925c0a 100644
--- a/src/plone/api/tests/test_user.py
+++ b/src/plone/api/tests/test_user.py
@@ -138,7 +138,7 @@ def test_create_default_roles(self):
         )
         self.assertItemsEqual(
             api.user.get_roles(user=user),
-            ['Member', 'Authenticated', ],
+            ['Member', 'Authenticated'],
         )
 
     def test_create_specified_roles(self):
@@ -164,7 +164,7 @@ def test_create_no_roles(self):
         )
         self.assertItemsEqual(
             api.user.get_roles(user=user),
-            ['Authenticated', ],
+            ['Authenticated'],
         )
 
     def test_get_constraints(self):
@@ -288,7 +288,7 @@ def test_is_anonymous(self):
 
     def test_get_roles_username(self):
         """Test get roles passing a username."""
-        ROLES = ['Reviewer', 'Editor', ]
+        ROLES = ['Reviewer', 'Editor']
         api.user.create(
             username='chuck',
             email='chuck@norris.org',
@@ -710,15 +710,15 @@ def test_revoke_roles(self):
             password='secret',
         )
 
-        api.user.grant_roles(username='chuck', roles=['Reviewer', 'Editor', ])
-        api.user.revoke_roles(username='chuck', roles=['Reviewer', ])
+        api.user.grant_roles(username='chuck', roles=['Reviewer', 'Editor'])
+        api.user.revoke_roles(username='chuck', roles=['Reviewer'])
         self.assertNotIn('Reviewer', api.user.get_roles(username='chuck'))
         self.assertNotIn('Reviewer', api.user.get_roles(user=user))
         self.assertIn('Editor', api.user.get_roles(username='chuck'))
         self.assertIn('Editor', api.user.get_roles(user=user))
 
         api.user.revoke_roles(username='chuck', roles=('Editor',))
-        ROLES = ['Authenticated', 'Member', ]
+        ROLES = ['Authenticated', 'Member']
         self.assertItemsEqual(
             ROLES,
             api.user.get_roles(username='chuck'),
@@ -785,7 +785,7 @@ def test_revoke_roles_username(self):
         )
         from plone.api.exc import InvalidParameterError
         with self.assertRaises(InvalidParameterError):
-            api.user.revoke_roles(username='chuck', roles=['Authenticated', ])
+            api.user.revoke_roles(username='chuck', roles=['Authenticated'])
 
     @unittest.skip('Getting the Anonymous user does not work like this.')
     def test_revoke_roles_from_anonymous(self):
@@ -794,7 +794,7 @@ def test_revoke_roles_from_anonymous(self):
             username='Anonymous User',
             roles=['Reviewer'],
         )
-        ROLES = ['Anonymous', ]
+        ROLES = ['Anonymous']
         self.assertItemsEqual(
             ROLES,
             api.user.get_roles(username='Anonymous User'),
@@ -880,7 +880,7 @@ def test_grant_roles_in_context(self):
             api.user.get_roles(user=user, obj=document),
         )
 
-        ROLES = ['Editor', 'Contributor', 'Authenticated', 'Member', ]
+        ROLES = ['Editor', 'Contributor', 'Authenticated', 'Member']
         self.assertItemsEqual(
             ROLES,
             api.user.get_roles(username='chuck', obj=folder),
@@ -967,7 +967,7 @@ def getRoles(self, principal_id):
         # The adapter role is in in the local roles but not persistent
         self.assertItemsEqual(
             api.user.get_roles(username='chuck', obj=folder, inherit=False),
-            ['Contributor', 'Reviewer', ],
+            ['Contributor', 'Reviewer'],
         )
         local_roles = getattr(folder, '__ac_local_roles__', {})
         self.assertEqual(
@@ -981,7 +981,7 @@ def getRoles(self, principal_id):
         )
         self.assertItemsEqual(
             api.user.get_roles(username='chuck', obj=document),
-            ['Member', 'Authenticated', 'Contributor', 'Reviewer', ],
+            ['Member', 'Authenticated', 'Contributor', 'Reviewer'],
         )
 
         # add a group and test mix of group and adapter and user-roles
@@ -995,12 +995,12 @@ def getRoles(self, principal_id):
 
         self.assertItemsEqual(
             api.user.get_roles(username='chuck', obj=document, inherit=False),
-            ['Contributor', 'Reviewer', ],
+            ['Contributor', 'Reviewer'],
         )
         api.group.grant_roles(groupname='foo', roles=['Manager'], obj=folder)
         self.assertItemsEqual(
             api.user.get_roles(username='chuck', obj=document, inherit=False),
-            ['Contributor', 'Reviewer', ],
+            ['Contributor', 'Reviewer'],
         )
         self.assertItemsEqual(
             api.user.get_roles(username='chuck', obj=document),
@@ -1024,7 +1024,7 @@ def getRoles(self, principal_id):
         )
         self.assertItemsEqual(
             api.user.get_roles(username='chuck', obj=folder, inherit=False),
-            ['Contributor', 'Reviewer', 'Manager', ],
+            ['Contributor', 'Reviewer', 'Manager'],
         )
 
         # cleanup
@@ -1098,7 +1098,7 @@ def test_revoke_roles_in_context(self):
         )
         self.assertNotIn('Editor', api.user.get_roles(user=user, obj=document))
 
-        ROLES = ['Authenticated', 'Member', ]
+        ROLES = ['Authenticated', 'Member']
         self.assertItemsEqual(
             ROLES,
             api.user.get_roles(username='chuck', obj=folder),



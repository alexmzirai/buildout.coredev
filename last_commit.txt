Repository: plone.app.contentrules


Branch: refs/heads/master
Date: 2018-01-25T12:01:34+01:00
Author: Philip Bauer (pbauer) <bauer@starzel.de>
Commit: https://github.com/plone/plone.app.contentrules/commit/e0ed26e08dc79cf685656c89c9bc22d15e7c338b

Add Python 2 / 3 compatibility

Files changed:
M CHANGES.rst
M plone/app/contentrules/actions/copy.py
M plone/app/contentrules/actions/delete.py
M plone/app/contentrules/actions/move.py
M plone/app/contentrules/actions/workflow.py
M plone/app/contentrules/exportimport/rules.py
M plone/app/contentrules/tests/test_rule_management_views.py

diff --git a/CHANGES.rst b/CHANGES.rst
index 4d4551c..cd57e96 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -14,6 +14,9 @@ New features:
 
 Bug fixes:
 
+- Add Python 2 / 3 compatibility
+  [pbauer]
+
 - Fix test with CMF 2.3. [davisagli]
 
 
diff --git a/plone/app/contentrules/actions/copy.py b/plone/app/contentrules/actions/copy.py
index 08b2a80..4157a09 100644
--- a/plone/app/contentrules/actions/copy.py
+++ b/plone/app/contentrules/actions/copy.py
@@ -91,7 +91,7 @@ def __call__(self):
             obj._notifyOfCopyTo(target, op=0)
         except ConflictError:
             raise
-        except Exception, e:
+        except Exception as e:
             self.error(obj, str(e))
             return False
 
diff --git a/plone/app/contentrules/actions/delete.py b/plone/app/contentrules/actions/delete.py
index a117984..4193b5b 100644
--- a/plone/app/contentrules/actions/delete.py
+++ b/plone/app/contentrules/actions/delete.py
@@ -49,9 +49,9 @@ def __call__(self):
 
         try:
             parent.manage_delObjects(obj.getId())
-        except ConflictError, e:
+        except ConflictError as e:
             raise e
-        except Exception, e:
+        except Exception as e:
             self.error(obj, str(e))
             return False
 
diff --git a/plone/app/contentrules/actions/move.py b/plone/app/contentrules/actions/move.py
index 6becfed..3c153d1 100644
--- a/plone/app/contentrules/actions/move.py
+++ b/plone/app/contentrules/actions/move.py
@@ -100,7 +100,7 @@ def __call__(self):
             obj._notifyOfCopyTo(target, op=1)
         except ConflictError:
             raise
-        except Exception, e:
+        except Exception as e:
             self.error(obj, str(e))
             return False
 
diff --git a/plone/app/contentrules/actions/workflow.py b/plone/app/contentrules/actions/workflow.py
index 26e9d68..9f75eb9 100644
--- a/plone/app/contentrules/actions/workflow.py
+++ b/plone/app/contentrules/actions/workflow.py
@@ -66,9 +66,9 @@ def __call__(self):
 
         try:
             portal_workflow.doActionFor(obj, self.element.transition)
-        except ConflictError, e:
+        except ConflictError as e:
             raise e
-        except Exception, e:
+        except Exception as e:
             self.error(obj, str(e))
             return False
 
diff --git a/plone/app/contentrules/exportimport/rules.py b/plone/app/contentrules/exportimport/rules.py
index 3d1c288..881ee94 100644
--- a/plone/app/contentrules/exportimport/rules.py
+++ b/plone/app/contentrules/exportimport/rules.py
@@ -28,6 +28,9 @@
 from zope.schema.interfaces import IFromUnicode
 
 
+import six
+
+
 def as_bool(string, default=False):
     if string is None or not str(string):
         return default
@@ -118,7 +121,7 @@ def export_field(self, doc, field):
                     list_element.appendChild(doc.createTextNode(str(e)))
                     child.appendChild(list_element)
             else:
-                child.appendChild(doc.createTextNode(unicode(value)))
+                child.appendChild(doc.createTextNode(six.text_type(value)))
 
         return child
 
diff --git a/plone/app/contentrules/tests/test_rule_management_views.py b/plone/app/contentrules/tests/test_rule_management_views.py
index b46c652..032b261 100644
--- a/plone/app/contentrules/tests/test_rule_management_views.py
+++ b/plone/app/contentrules/tests/test_rule_management_views.py
@@ -31,7 +31,7 @@ def testRuleAdding(self):
         r = Rule()
         adding.add(r)
         self.assertEqual(1, len(storage))
-        self.assertTrue(storage.values()[0] is r)
+        self.assertTrue(list(storage.values())[0] is r)
 
     def testRuleAddView(self):
         adding = getMultiAdapter(
@@ -44,7 +44,7 @@ def testRuleAddView(self):
         content = addview.form_instance.create({'title': 'foo', 'description': 'bar', 'event': None})  # noqa
         addview.form_instance.add(content)
         self.assertEqual(1, len(storage))
-        self.assertEqual('foo', storage.values()[0].title)
+        self.assertEqual('foo', list(storage.values())[0].title)
 
     def testRuleEditView(self):
         r = Rule()


Repository: plone.app.contentrules


Branch: refs/heads/master
Date: 2018-01-26T07:26:51+01:00
Author: Philip Bauer (pbauer) <bauer@starzel.de>
Commit: https://github.com/plone/plone.app.contentrules/commit/be66d86ea97c68e34cdde23ad926fd27a5854202

Merge pull request #35 from plone/python3

Add Python 2 / 3 compatibility

Files changed:
M CHANGES.rst
M plone/app/contentrules/actions/copy.py
M plone/app/contentrules/actions/delete.py
M plone/app/contentrules/actions/move.py
M plone/app/contentrules/actions/workflow.py
M plone/app/contentrules/exportimport/rules.py
M plone/app/contentrules/tests/test_rule_management_views.py

diff --git a/CHANGES.rst b/CHANGES.rst
index 4d4551c..cd57e96 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -14,6 +14,9 @@ New features:
 
 Bug fixes:
 
+- Add Python 2 / 3 compatibility
+  [pbauer]
+
 - Fix test with CMF 2.3. [davisagli]
 
 
diff --git a/plone/app/contentrules/actions/copy.py b/plone/app/contentrules/actions/copy.py
index 08b2a80..4157a09 100644
--- a/plone/app/contentrules/actions/copy.py
+++ b/plone/app/contentrules/actions/copy.py
@@ -91,7 +91,7 @@ def __call__(self):
             obj._notifyOfCopyTo(target, op=0)
         except ConflictError:
             raise
-        except Exception, e:
+        except Exception as e:
             self.error(obj, str(e))
             return False
 
diff --git a/plone/app/contentrules/actions/delete.py b/plone/app/contentrules/actions/delete.py
index a117984..4193b5b 100644
--- a/plone/app/contentrules/actions/delete.py
+++ b/plone/app/contentrules/actions/delete.py
@@ -49,9 +49,9 @@ def __call__(self):
 
         try:
             parent.manage_delObjects(obj.getId())
-        except ConflictError, e:
+        except ConflictError as e:
             raise e
-        except Exception, e:
+        except Exception as e:
             self.error(obj, str(e))
             return False
 
diff --git a/plone/app/contentrules/actions/move.py b/plone/app/contentrules/actions/move.py
index 6becfed..3c153d1 100644
--- a/plone/app/contentrules/actions/move.py
+++ b/plone/app/contentrules/actions/move.py
@@ -100,7 +100,7 @@ def __call__(self):
             obj._notifyOfCopyTo(target, op=1)
         except ConflictError:
             raise
-        except Exception, e:
+        except Exception as e:
             self.error(obj, str(e))
             return False
 
diff --git a/plone/app/contentrules/actions/workflow.py b/plone/app/contentrules/actions/workflow.py
index 26e9d68..9f75eb9 100644
--- a/plone/app/contentrules/actions/workflow.py
+++ b/plone/app/contentrules/actions/workflow.py
@@ -66,9 +66,9 @@ def __call__(self):
 
         try:
             portal_workflow.doActionFor(obj, self.element.transition)
-        except ConflictError, e:
+        except ConflictError as e:
             raise e
-        except Exception, e:
+        except Exception as e:
             self.error(obj, str(e))
             return False
 
diff --git a/plone/app/contentrules/exportimport/rules.py b/plone/app/contentrules/exportimport/rules.py
index 3d1c288..881ee94 100644
--- a/plone/app/contentrules/exportimport/rules.py
+++ b/plone/app/contentrules/exportimport/rules.py
@@ -28,6 +28,9 @@
 from zope.schema.interfaces import IFromUnicode
 
 
+import six
+
+
 def as_bool(string, default=False):
     if string is None or not str(string):
         return default
@@ -118,7 +121,7 @@ def export_field(self, doc, field):
                     list_element.appendChild(doc.createTextNode(str(e)))
                     child.appendChild(list_element)
             else:
-                child.appendChild(doc.createTextNode(unicode(value)))
+                child.appendChild(doc.createTextNode(six.text_type(value)))
 
         return child
 
diff --git a/plone/app/contentrules/tests/test_rule_management_views.py b/plone/app/contentrules/tests/test_rule_management_views.py
index b46c652..032b261 100644
--- a/plone/app/contentrules/tests/test_rule_management_views.py
+++ b/plone/app/contentrules/tests/test_rule_management_views.py
@@ -31,7 +31,7 @@ def testRuleAdding(self):
         r = Rule()
         adding.add(r)
         self.assertEqual(1, len(storage))
-        self.assertTrue(storage.values()[0] is r)
+        self.assertTrue(list(storage.values())[0] is r)
 
     def testRuleAddView(self):
         adding = getMultiAdapter(
@@ -44,7 +44,7 @@ def testRuleAddView(self):
         content = addview.form_instance.create({'title': 'foo', 'description': 'bar', 'event': None})  # noqa
         addview.form_instance.add(content)
         self.assertEqual(1, len(storage))
-        self.assertEqual('foo', storage.values()[0].title)
+        self.assertEqual('foo', list(storage.values())[0].title)
 
     def testRuleEditView(self):
         r = Rule()



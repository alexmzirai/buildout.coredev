Repository: borg.localrole


Branch: refs/heads/master
Date: 2018-01-26T11:13:55+01:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/borg.localrole/commit/9b0c64246af1e7dab1db8b33890c6ffdabe12099

no self-conatined buildout

Files changed:
M CHANGES.rst
D bootstrap.py
D buildout.cfg

diff --git a/CHANGES.rst b/CHANGES.rst
index 727d400..38e1094 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -14,6 +14,9 @@ New features:
 
 Bug fixes:
 
+- Cleanup: No self-contained buildout, ...
+  [jensens]
+
 - Fix test for Zope 4.
   [pbauer]
 
diff --git a/bootstrap.py b/bootstrap.py
deleted file mode 100644
index ed57894..0000000
--- a/bootstrap.py
+++ /dev/null
@@ -1,178 +0,0 @@
-##############################################################################
-#
-# Copyright (c) 2006 Zope Foundation and Contributors.
-# All Rights Reserved.
-#
-# This software is subject to the provisions of the Zope Public License,
-# Version 2.1 (ZPL).  A copy of the ZPL should accompany this distribution.
-# THIS SOFTWARE IS PROVIDED "AS IS" AND ANY AND ALL EXPRESS OR IMPLIED
-# WARRANTIES ARE DISCLAIMED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
-# WARRANTIES OF TITLE, MERCHANTABILITY, AGAINST INFRINGEMENT, AND FITNESS
-# FOR A PARTICULAR PURPOSE.
-#
-##############################################################################
-"""Bootstrap a buildout-based project
-
-Simply run this script in a directory containing a buildout.cfg.
-The script accepts buildout command-line options, so you can
-use the -c option to specify an alternate configuration file.
-"""
-
-import os
-import shutil
-import sys
-import tempfile
-
-from optparse import OptionParser
-
-tmpeggs = tempfile.mkdtemp()
-
-usage = '''\
-[DESIRED PYTHON FOR BUILDOUT] bootstrap.py [options]
-
-Bootstraps a buildout-based project.
-
-Simply run this script in a directory containing a buildout.cfg, using the
-Python that you want bin/buildout to use.
-
-Note that by using --find-links to point to local resources, you can keep 
-this script from going over the network.
-'''
-
-parser = OptionParser(usage=usage)
-parser.add_option("-v", "--version", help="use a specific zc.buildout version")
-
-parser.add_option("-t", "--accept-buildout-test-releases",
-                  dest='accept_buildout_test_releases',
-                  action="store_true", default=False,
-                  help=("Normally, if you do not specify a --version, the "
-                        "bootstrap script and buildout gets the newest "
-                        "*final* versions of zc.buildout and its recipes and "
-                        "extensions for you.  If you use this flag, "
-                        "bootstrap and buildout will get the newest releases "
-                        "even if they are alphas or betas."))
-parser.add_option("-c", "--config-file",
-                  help=("Specify the path to the buildout configuration "
-                        "file to be used."))
-parser.add_option("-f", "--find-links",
-                  help=("Specify a URL to search for buildout releases"))
-parser.add_option("--allow-site-packages",
-                  action="store_true", default=False,
-                  help=("Let bootstrap.py use existing site packages"))
-
-
-options, args = parser.parse_args()
-
-######################################################################
-# load/install setuptools
-
-try:
-    if options.allow_site_packages:
-        import setuptools
-        import pkg_resources
-    from urllib.request import urlopen
-except ImportError:
-    from urllib2 import urlopen
-
-ez = {}
-exec(urlopen('https://bootstrap.pypa.io/ez_setup.py').read(), ez)
-
-if not options.allow_site_packages:
-    # ez_setup imports site, which adds site packages
-    # this will remove them from the path to ensure that incompatible versions 
-    # of setuptools are not in the path
-    import site
-    # inside a virtualenv, there is no 'getsitepackages'. 
-    # We can't remove these reliably
-    if hasattr(site, 'getsitepackages'):
-        for sitepackage_path in site.getsitepackages():
-            sys.path[:] = [x for x in sys.path if sitepackage_path not in x]
-
-setup_args = dict(to_dir=tmpeggs, download_delay=0)
-ez['use_setuptools'](**setup_args)
-import setuptools
-import pkg_resources
-
-# This does not (always?) update the default working set.  We will
-# do it.
-for path in sys.path:
-    if path not in pkg_resources.working_set.entries:
-        pkg_resources.working_set.add_entry(path)
-
-######################################################################
-# Install buildout
-
-ws = pkg_resources.working_set
-
-cmd = [sys.executable, '-c',
-       'from setuptools.command.easy_install import main; main()',
-       '-mZqNxd', tmpeggs]
-
-find_links = os.environ.get(
-    'bootstrap-testing-find-links',
-    options.find_links or
-    ('http://downloads.buildout.org/'
-     if options.accept_buildout_test_releases else None)
-    )
-if find_links:
-    cmd.extend(['-f', find_links])
-
-setuptools_path = ws.find(
-    pkg_resources.Requirement.parse('setuptools')).location
-
-requirement = 'zc.buildout'
-version = options.version
-if version is None and not options.accept_buildout_test_releases:
-    # Figure out the most recent final version of zc.buildout.
-    import setuptools.package_index
-    _final_parts = '*final-', '*final'
-
-    def _final_version(parsed_version):
-        for part in parsed_version:
-            if (part[:1] == '*') and (part not in _final_parts):
-                return False
-        return True
-    index = setuptools.package_index.PackageIndex(
-        search_path=[setuptools_path])
-    if find_links:
-        index.add_find_links((find_links,))
-    req = pkg_resources.Requirement.parse(requirement)
-    if index.obtain(req) is not None:
-        best = []
-        bestv = None
-        for dist in index[req.project_name]:
-            distv = dist.parsed_version
-            if _final_version(distv):
-                if bestv is None or distv > bestv:
-                    best = [dist]
-                    bestv = distv
-                elif distv == bestv:
-                    best.append(dist)
-        if best:
-            best.sort()
-            version = best[-1].version
-if version:
-    requirement = '=='.join((requirement, version))
-cmd.append(requirement)
-
-import subprocess
-if subprocess.call(cmd, env=dict(os.environ, PYTHONPATH=setuptools_path)) != 0:
-    raise Exception(
-        "Failed to execute command:\n%s" % repr(cmd)[1:-1])
-
-######################################################################
-# Import and run buildout
-
-ws.add_entry(tmpeggs)
-ws.require(requirement)
-import zc.buildout.buildout
-
-if not [a for a in args if '=' not in a]:
-    args.append('bootstrap')
-
-# if -c was provided, we push it back into args for buildout' main function
-if options.config_file is not None:
-    args[0:0] = ['-c', options.config_file]
-
-zc.buildout.buildout.main(args)
-shutil.rmtree(tmpeggs)
diff --git a/buildout.cfg b/buildout.cfg
deleted file mode 100644
index fd3ed83..0000000
--- a/buildout.cfg
+++ /dev/null
@@ -1,7 +0,0 @@
-[buildout]
-extends = https://raw.githubusercontent.com/collective/buildout.plonetest/master/test-5.x.cfg
-package-name = borg.localrole
-package-extras = [test]
-
-[versions]
-borg.localrole =


Repository: borg.localrole


Branch: refs/heads/master
Date: 2018-01-26T11:14:21+01:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/borg.localrole/commit/a2427a1c78899b7ae2afd5daefc265a7be04e72d

utf8 headers

Files changed:
M CHANGES.rst
M borg/__init__.py
M borg/localrole/__init__.py
M borg/localrole/bbb/interfaces.py
M borg/localrole/config.py
M borg/localrole/default_adapter.py
M borg/localrole/factory_adapter.py
M borg/localrole/interfaces.py
M borg/localrole/setuphandlers.py
M borg/localrole/tests.py
M borg/localrole/utils.py
M borg/localrole/workspace.py
M setup.py

diff --git a/CHANGES.rst b/CHANGES.rst
index 38e1094..bc2e353 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -14,7 +14,7 @@ New features:
 
 Bug fixes:
 
-- Cleanup: No self-contained buildout, ...
+- Cleanup: No self-contained buildout, utf8-headers, ...
   [jensens]
 
 - Fix test for Zope 4.
diff --git a/borg/__init__.py b/borg/__init__.py
index e6f192b..ab2575f 100644
--- a/borg/__init__.py
+++ b/borg/__init__.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 # See http://peak.telecommunity.com/DevCenter/setuptools#namespace-packages
 try:
     __import__('pkg_resources').declare_namespace(__name__)
diff --git a/borg/localrole/__init__.py b/borg/localrole/__init__.py
index d4fa660..926fe33 100644
--- a/borg/localrole/__init__.py
+++ b/borg/localrole/__init__.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 from Products.PluggableAuthService import registerMultiPlugin
 from AccessControl.Permissions import add_user_folders
 
diff --git a/borg/localrole/bbb/interfaces.py b/borg/localrole/bbb/interfaces.py
index fbdcd79..acb3a34 100644
--- a/borg/localrole/bbb/interfaces.py
+++ b/borg/localrole/bbb/interfaces.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 from zope.interface import Interface
 
 # BBB: These interfaces will be removed in a later version of borg.locarole.
diff --git a/borg/localrole/config.py b/borg/localrole/config.py
index 1bb272e..994dd88 100644
--- a/borg/localrole/config.py
+++ b/borg/localrole/config.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 # Configuration constants
 
 LOCALROLE_PLUGIN_NAME = 'borg_localroles'
diff --git a/borg/localrole/default_adapter.py b/borg/localrole/default_adapter.py
index de6e232..ce9add6 100644
--- a/borg/localrole/default_adapter.py
+++ b/borg/localrole/default_adapter.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 from zope.interface import Interface, implementer
 from zope.component import adapts
 from borg.localrole.interfaces import ILocalRoleProvider
diff --git a/borg/localrole/factory_adapter.py b/borg/localrole/factory_adapter.py
index 7962f3d..972c11f 100644
--- a/borg/localrole/factory_adapter.py
+++ b/borg/localrole/factory_adapter.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 from zope.component import adapts
 from zope.interface import implementer
 from borg.localrole.interfaces import IFactoryTempFolder
diff --git a/borg/localrole/interfaces.py b/borg/localrole/interfaces.py
index e89ed5d..c8d2a53 100644
--- a/borg/localrole/interfaces.py
+++ b/borg/localrole/interfaces.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 from zope.deferredimport import deprecated
 from zope.interface import Interface
 
diff --git a/borg/localrole/setuphandlers.py b/borg/localrole/setuphandlers.py
index bd29f33..05e3089 100644
--- a/borg/localrole/setuphandlers.py
+++ b/borg/localrole/setuphandlers.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 from borg.localrole.utils import setup_localrole_plugin
 
 
diff --git a/borg/localrole/tests.py b/borg/localrole/tests.py
index 4d0dd38..df6b7e6 100644
--- a/borg/localrole/tests.py
+++ b/borg/localrole/tests.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 from borg.localrole import default_adapter
 from borg.localrole import factory_adapter
 from plone.app.testing import PLONE_INTEGRATION_TESTING
diff --git a/borg/localrole/utils.py b/borg/localrole/utils.py
index 5481c68..9644706 100644
--- a/borg/localrole/utils.py
+++ b/borg/localrole/utils.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 from StringIO import StringIO
 
 from Acquisition import aq_base
diff --git a/borg/localrole/workspace.py b/borg/localrole/workspace.py
index 744a127..55aecd1 100644
--- a/borg/localrole/workspace.py
+++ b/borg/localrole/workspace.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 from plone.memoize.volatile import cache, DontCache
 from zope.annotation.interfaces import IAnnotations
 from zope.component import getAdapters
diff --git a/setup.py b/setup.py
index 59835a8..4a96280 100644
--- a/setup.py
+++ b/setup.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 from setuptools import setup, find_packages
 
 name = 'borg.localrole'


Repository: borg.localrole


Branch: refs/heads/master
Date: 2018-01-26T11:56:04+01:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/borg.localrole/commit/b696f5dcd9c76b69266061e8dc37a3ed0ab2e5e0

isort

Files changed:
M CHANGES.rst
M borg/localrole/__init__.py
M borg/localrole/bbb/interfaces.py
M borg/localrole/default_adapter.py
M borg/localrole/factory_adapter.py
M borg/localrole/interfaces.py
M borg/localrole/utils.py
M borg/localrole/workspace.py
M setup.py

diff --git a/CHANGES.rst b/CHANGES.rst
index bc2e353..274df3e 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -14,7 +14,7 @@ New features:
 
 Bug fixes:
 
-- Cleanup: No self-contained buildout, utf8-headers, ...
+- Cleanup: No self-contained buildout, utf8-headers, isort, ...
   [jensens]
 
 - Fix test for Zope 4.
diff --git a/borg/localrole/__init__.py b/borg/localrole/__init__.py
index 926fe33..b74d574 100644
--- a/borg/localrole/__init__.py
+++ b/borg/localrole/__init__.py
@@ -1,8 +1,8 @@
 # -*- coding: utf-8 -*-
-from Products.PluggableAuthService import registerMultiPlugin
 from AccessControl.Permissions import add_user_folders
-
 from borg.localrole import workspace
+from Products.PluggableAuthService import registerMultiPlugin
+
 
 registerMultiPlugin(workspace.WorkspaceLocalRoleManager.meta_type)
 
diff --git a/borg/localrole/bbb/interfaces.py b/borg/localrole/bbb/interfaces.py
index acb3a34..94969aa 100644
--- a/borg/localrole/bbb/interfaces.py
+++ b/borg/localrole/bbb/interfaces.py
@@ -1,6 +1,7 @@
 # -*- coding: utf-8 -*-
 from zope.interface import Interface
 
+
 # BBB: These interfaces will be removed in a later version of borg.locarole.
 # You should use the interfaces in borg.localrole.interfaces instead!
 
diff --git a/borg/localrole/default_adapter.py b/borg/localrole/default_adapter.py
index ce9add6..382d518 100644
--- a/borg/localrole/default_adapter.py
+++ b/borg/localrole/default_adapter.py
@@ -1,7 +1,10 @@
 # -*- coding: utf-8 -*-
-from zope.interface import Interface, implementer
-from zope.component import adapts
 from borg.localrole.interfaces import ILocalRoleProvider
+from zope.component import adapts
+from zope.interface import implementer
+from zope.interface import Interface
+
+import six
 
 
 @implementer(ILocalRoleProvider)
diff --git a/borg/localrole/factory_adapter.py b/borg/localrole/factory_adapter.py
index 972c11f..981dc8f 100644
--- a/borg/localrole/factory_adapter.py
+++ b/borg/localrole/factory_adapter.py
@@ -1,10 +1,11 @@
 # -*- coding: utf-8 -*-
-from zope.component import adapts
-from zope.interface import implementer
+from Acquisition import aq_inner
+from Acquisition import aq_parent
 from borg.localrole.interfaces import IFactoryTempFolder
 from borg.localrole.interfaces import ILocalRoleProvider
-from Acquisition import aq_inner, aq_parent
 from Products.CMFCore.utils import getToolByName
+from zope.component import adapts
+from zope.interface import implementer
 
 
 @implementer(ILocalRoleProvider)
diff --git a/borg/localrole/interfaces.py b/borg/localrole/interfaces.py
index c8d2a53..cfa513b 100644
--- a/borg/localrole/interfaces.py
+++ b/borg/localrole/interfaces.py
@@ -2,6 +2,7 @@
 from zope.deferredimport import deprecated
 from zope.interface import Interface
 
+
 deprecated(
   "Please use borg.localrole.interfaces.ILocalRoleProvider instead",
   IWorkspace='borg.localrole.bbb.interfaces:IWorkspace')
diff --git a/borg/localrole/utils.py b/borg/localrole/utils.py
index 9644706..9f02f37 100644
--- a/borg/localrole/utils.py
+++ b/borg/localrole/utils.py
@@ -1,13 +1,11 @@
 # -*- coding: utf-8 -*-
-from StringIO import StringIO
-
 from Acquisition import aq_base
+from borg.localrole.config import LOCALROLE_PLUGIN_NAME
+from borg.localrole.workspace import manage_addWorkspaceLocalRoleManager
 from Products.CMFCore.utils import getToolByName
 from Products.PlonePAS.Extensions.Install import activatePluginInterfaces
 from Products.PlonePAS.plugins.local_role import LocalRolesManager
-
-from borg.localrole.config import LOCALROLE_PLUGIN_NAME
-from borg.localrole.workspace import manage_addWorkspaceLocalRoleManager
+from StringIO import StringIO
 
 
 def setup_localrole_plugin(portal):
diff --git a/borg/localrole/workspace.py b/borg/localrole/workspace.py
index 55aecd1..962c229 100644
--- a/borg/localrole/workspace.py
+++ b/borg/localrole/workspace.py
@@ -1,21 +1,22 @@
 # -*- coding: utf-8 -*-
-from plone.memoize.volatile import cache, DontCache
-from zope.annotation.interfaces import IAnnotations
-from zope.component import getAdapters
-
-from App.class_init import InitializeClass
-from Acquisition import aq_inner, aq_parent, aq_get
 from AccessControl import ClassSecurityInfo
+from Acquisition import aq_get
+from Acquisition import aq_inner
+from Acquisition import aq_parent
+from App.class_init import InitializeClass
+# BBB interfaces, to be removed
+from borg.localrole.bbb.interfaces import IGroupAwareWorkspace
+from borg.localrole.bbb.interfaces import IWorkspace
+from borg.localrole.interfaces import ILocalRoleProvider
+from plone.memoize.volatile import cache
+from plone.memoize.volatile import DontCache
 from Products.PageTemplates.PageTemplateFile import PageTemplateFile
-from Products.PluggableAuthService.utils import classImplements
-from Products.PluggableAuthService.plugins.BasePlugin import BasePlugin
 from Products.PlonePAS.interfaces.plugins import ILocalRolesPlugin
+from Products.PluggableAuthService.plugins.BasePlugin import BasePlugin
+from Products.PluggableAuthService.utils import classImplements
+from zope.annotation.interfaces import IAnnotations
+from zope.component import getAdapters
 
-from borg.localrole.interfaces import ILocalRoleProvider
-
-# BBB interfaces, to be removed
-from borg.localrole.bbb.interfaces import IWorkspace
-from borg.localrole.bbb.interfaces import IGroupAwareWorkspace
 
 manage_addWorkspaceLocalRoleManagerForm = PageTemplateFile(
         "zmi/WorkspaceLocalRoleManagerForm.pt", globals(),
diff --git a/setup.py b/setup.py
index 4a96280..435fd71 100644
--- a/setup.py
+++ b/setup.py
@@ -1,5 +1,7 @@
 # -*- coding: utf-8 -*-
-from setuptools import setup, find_packages
+from setuptools import find_packages
+from setuptools import setup
+
 
 name = 'borg.localrole'
 version = '3.1.5.dev0'


Repository: borg.localrole


Branch: refs/heads/master
Date: 2018-01-26T11:56:07+01:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/borg.localrole/commit/9e351be44bc0a9dc88ce856acf5a5fc1f196ff62

zca-decorators and formatting/readability

Files changed:
M CHANGES.rst
M borg/localrole/__init__.py
M borg/localrole/bbb/__init__.py
M borg/localrole/default_adapter.py
M borg/localrole/factory_adapter.py
M borg/localrole/interfaces.py
M borg/localrole/tests.py
M borg/localrole/workspace.py

diff --git a/CHANGES.rst b/CHANGES.rst
index 274df3e..7dbc83a 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -14,8 +14,14 @@ New features:
 
 Bug fixes:
 
-- Cleanup: No self-contained buildout, utf8-headers, isort, ...
-  [jensens]
+- Cleanup: 
+
+    - No self-contained buildout, 
+    - utf8-headers, 
+    - isort, 
+    - ZCA-decorators
+    - formatting/readability/pep8,
+    - ...
 
 - Fix test for Zope 4.
   [pbauer]
diff --git a/borg/localrole/__init__.py b/borg/localrole/__init__.py
index b74d574..70aa109 100644
--- a/borg/localrole/__init__.py
+++ b/borg/localrole/__init__.py
@@ -10,8 +10,12 @@
 def initialize(context):
     # Register PAS plug-in
 
-    context.registerClass(workspace.WorkspaceLocalRoleManager,
-                          permission=add_user_folders,
-                          constructors=(workspace.manage_addWorkspaceLocalRoleManagerForm,
-                                          workspace.manage_addWorkspaceLocalRoleManager),
-                          visibility=None)
+    context.registerClass(
+        workspace.WorkspaceLocalRoleManager,
+        permission=add_user_folders,
+        constructors=(
+            workspace.manage_addWorkspaceLocalRoleManagerForm,
+            workspace.manage_addWorkspaceLocalRoleManager,
+        ),
+        visibility=None
+    )
diff --git a/borg/localrole/bbb/__init__.py b/borg/localrole/bbb/__init__.py
index e69de29..40a96af 100644
--- a/borg/localrole/bbb/__init__.py
+++ b/borg/localrole/bbb/__init__.py
@@ -0,0 +1 @@
+# -*- coding: utf-8 -*-
diff --git a/borg/localrole/default_adapter.py b/borg/localrole/default_adapter.py
index 382d518..0ab7b0b 100644
--- a/borg/localrole/default_adapter.py
+++ b/borg/localrole/default_adapter.py
@@ -1,6 +1,6 @@
 # -*- coding: utf-8 -*-
 from borg.localrole.interfaces import ILocalRoleProvider
-from zope.component import adapts
+from zope.component import adapter
 from zope.interface import implementer
 from zope.interface import Interface
 
@@ -8,6 +8,7 @@
 
 
 @implementer(ILocalRoleProvider)
+@adapter(Interface)
 class DefaultLocalRoleAdapter(object):
     """Looks at __ac_local_roles__ to find local roles stored
     persistently on an object::
@@ -55,7 +56,6 @@ class DefaultLocalRoleAdapter(object):
         (('dummy2', ['Role1']),)
 
     """
-    adapts(Interface)
 
     def __init__(self, context):
         self.context = context
diff --git a/borg/localrole/factory_adapter.py b/borg/localrole/factory_adapter.py
index 981dc8f..23e34af 100644
--- a/borg/localrole/factory_adapter.py
+++ b/borg/localrole/factory_adapter.py
@@ -4,11 +4,12 @@
 from borg.localrole.interfaces import IFactoryTempFolder
 from borg.localrole.interfaces import ILocalRoleProvider
 from Products.CMFCore.utils import getToolByName
-from zope.component import adapts
+from zope.component import adapter
 from zope.interface import implementer
 
 
 @implementer(ILocalRoleProvider)
+@adapter(IFactoryTempFolder)
 class FactoryTempFolderProvider(object):
     """A simple local role provider which just gathers the roles from
     the desired context::
@@ -65,7 +66,10 @@ class FactoryTempFolderProvider(object):
         >>> class ISpecialInterface(Interface):
         ...     pass
         >>> directlyProvides(fold, ISpecialInterface)
-        >>> provideAdapter(SimpleLocalRoleProvider, adapts=(ISpecialInterface,))
+        >>> provideAdapter(
+        ...     SimpleLocalRoleProvider,
+        ...     adapts=(ISpecialInterface,)
+        ... )
         >>> rm.getRolesInContext(user1, fold)
         ['Foo']
         >>> contained = DummyObject().__of__(fold)
@@ -89,7 +93,6 @@ class FactoryTempFolderProvider(object):
         {}
 
     """
-    adapts(IFactoryTempFolder)
 
     def __init__(self, obj):
         self.folder = obj
diff --git a/borg/localrole/interfaces.py b/borg/localrole/interfaces.py
index cfa513b..9bd2f2e 100644
--- a/borg/localrole/interfaces.py
+++ b/borg/localrole/interfaces.py
@@ -4,12 +4,14 @@
 
 
 deprecated(
-  "Please use borg.localrole.interfaces.ILocalRoleProvider instead",
-  IWorkspace='borg.localrole.bbb.interfaces:IWorkspace')
+    'Please use borg.localrole.interfaces.ILocalRoleProvider instead',
+    IWorkspace='borg.localrole.bbb.interfaces:IWorkspace'
+)
 
 deprecated(
-  "Please use borg.localrole.interfaces.ILocalRoleProvider instead",
-  IGroupAwareWorkspace='borg.localrole.bbb.interfaces:IGroupAwareWorkspace')
+    'Please use borg.localrole.interfaces.ILocalRoleProvider instead',
+    IGroupAwareWorkspace='borg.localrole.bbb.interfaces:IGroupAwareWorkspace'
+)
 
 
 class ILocalRoleProvider(Interface):
diff --git a/borg/localrole/tests.py b/borg/localrole/tests.py
index df6b7e6..3c4cd14 100644
--- a/borg/localrole/tests.py
+++ b/borg/localrole/tests.py
@@ -47,22 +47,27 @@ def getRoles(self):
 
 def test_suite():
     suite = [
-        layered(doctest.DocFileSuite(
-                    'README.txt', package='borg.localrole',
-                    optionflags=(doctest.ELLIPSIS |
-                                 doctest.NORMALIZE_WHITESPACE)),
-                layer=PLONE_INTEGRATION_TESTING),
-        layered(doctest.DocTestSuite(
-            borg.localrole.workspace,
-            optionflags=(doctest.ELLIPSIS |
-                         doctest.NORMALIZE_WHITESPACE)),
-                layer=zca.UNIT_TESTING),
-        layered(doctest.DocTestSuite(
-            factory_adapter,
-            optionflags=(doctest.ELLIPSIS |
-                         doctest.NORMALIZE_WHITESPACE)),
-                layer=zca.UNIT_TESTING),
+        layered(
+            doctest.DocFileSuite(
+                'README.txt',
+                package='borg.localrole',
+                optionflags=(doctest.ELLIPSIS | doctest.NORMALIZE_WHITESPACE)
+            ),
+            layer=PLONE_INTEGRATION_TESTING),
+        layered(
+            doctest.DocTestSuite(
+                borg.localrole.workspace,
+                optionflags=(doctest.ELLIPSIS | doctest.NORMALIZE_WHITESPACE)
+            ),
+            layer=zca.UNIT_TESTING
+        ),
+        layered(
+            doctest.DocTestSuite(
+                factory_adapter,
+                optionflags=(doctest.ELLIPSIS | doctest.NORMALIZE_WHITESPACE)
+            ),
+            layer=zca.UNIT_TESTING
+        ),
         doctest.DocTestSuite(default_adapter),
-        ]
-
+    ]
     return unittest.TestSuite(suite)
diff --git a/borg/localrole/workspace.py b/borg/localrole/workspace.py
index 962c229..7763f9b 100644
--- a/borg/localrole/workspace.py
+++ b/borg/localrole/workspace.py
@@ -19,19 +19,31 @@
 
 
 manage_addWorkspaceLocalRoleManagerForm = PageTemplateFile(
-        "zmi/WorkspaceLocalRoleManagerForm.pt", globals(),
-        __name__="manage_addWorkspaceRoleManagerForm")
-
-
-def manage_addWorkspaceLocalRoleManager(dispatcher, id, title=None, REQUEST=None):
-    """Add a WorkspaceLocalRoleManager to a Pluggable Authentication Services."""
+    "zmi/WorkspaceLocalRoleManagerForm.pt",
+    globals(),
+    __name__="manage_addWorkspaceRoleManagerForm"
+)
+
+
+def manage_addWorkspaceLocalRoleManager(
+    dispatcher,
+    id,
+    title=None,
+    REQUEST=None
+):
+    """Add a WorkspaceLocalRoleManager to a Pluggable Authentication
+    Services.
+    """
     wlrm = WorkspaceLocalRoleManager(id, title)
     dispatcher._setObject(wlrm.getId(), wlrm)
 
     if REQUEST is not None:
         REQUEST.RESPONSE.redirect(
-                '%s/manage_workspace?manage_tabs_message=WorkspaceLocalRoleManager+added.'
-                % dispatcher.absolute_url())
+            '{0}/manage_workspace?'
+            'manage_tabs_message=WorkspaceLocalRoleManager+added.'.format(
+                dispatcher.absolute_url()
+            )
+        )
 
 
 # memoize support for `checkLocalRolesAllowed`
@@ -113,7 +125,8 @@ def clra_cache_key(method, self, user, obj, object_roles):
           checkLocalRolesAllowed called...
           None
           >>> [i for i in IAnnotations(request)]
-          ["borg.localrole.workspace.checkLocalRolesAllowed:('john', '42!', ('foo', 'bar'))"]
+          ["borg.localrole.workspace.checkLocalRolesAllowed:
+          ('john', '42!', ('foo', 'bar'))"]
 
         Calling the method a second time should directly return the cached
         value, i.e. the logger shouldn't print anything:
@@ -144,8 +157,8 @@ class WorkspaceLocalRoleManager(BasePlugin):
 
     First we need to make and register an adapter to provide some roles::
 
-        >>> from zope.interface import implements, Interface
-        >>> from zope.component import adapts
+        >>> from zope.interface import implementer, Interface
+        >>> from zope.component import adapter
         >>> from borg.localrole.tests import SimpleLocalRoleProvider
         >>> from borg.localrole.tests import DummyUser
         >>> from zope.component import provideAdapter
@@ -155,8 +168,9 @@ class WorkspaceLocalRoleManager(BasePlugin):
     We need an object to adapt, we require nothing of this object,
     except it must be adaptable (e.g. have an interface)::
 
-        >>> class DummyObject(object):
-        ...     implements(Interface)
+        >>> @implementer(Interface)
+        ... class DummyObject(object):
+        ...     pass
         >>> ob = DummyObject()
 
     And we need some users that we'll check the permissions of::
@@ -252,12 +266,14 @@ class WorkspaceLocalRoleManager(BasePlugin):
         >>> from zope.interface import directlyProvides
         >>> directlyProvides(next, ISpecial1)
         >>> directlyProvides(other, ISpecial2)
-        >>> class Adapter1(LessSimpleLocalRoleProvider):
-        ...     adapts(ISpecial1)
+        >>> @adapter(ISpecial1)
+        ... class Adapter1(LessSimpleLocalRoleProvider):
+        ...
         ...     userid = 'bogus_user'
         ...     roles = ('Bar',)
-        >>> class Adapter2(LessSimpleLocalRoleProvider):
-        ...     adapts(ISpecial2)
+        >>> @adapter(ISpecial2)
+        ... class Adapter2(LessSimpleLocalRoleProvider):
+        ...
         ...     userid = 'bogus_user3'
         ...     roles = ('Foobar',)
         >>> user3 = DummyUser('bogus_user3')
@@ -426,11 +442,16 @@ def getRolesInContext(self, user, object):
                         roles.update(a.getRoles(pid))
                 # XXX: BBB code, kicks in only if there's no proper adapter
                 if count == -1:
-                    workspace = IGroupAwareWorkspace(obj, IWorkspace(obj, None))
+                    workspace = IGroupAwareWorkspace(
+                        obj,
+                        IWorkspace(obj, None)
+                    )
                     if workspace is not None:
                         roles.update(workspace.getLocalRolesForPrincipal(user))
                         for group in self._groups(obj, user, workspace):
-                            roles.update(workspace.getLocalRolesForPrincipal(group))
+                            roles.update(
+                                workspace.getLocalRolesForPrincipal(group)
+                            )
         return list(roles)
 
     security.declarePrivate("checkLocalRolesAllowed")
@@ -508,5 +529,6 @@ def _groups(self, obj, user, workspace):
                 for group_id in getGroups():
                     yield acl_users.getGroupById(group_id)
 
+
 classImplements(WorkspaceLocalRoleManager, ILocalRolesPlugin)
 InitializeClass(WorkspaceLocalRoleManager)


Repository: borg.localrole


Branch: refs/heads/master
Date: 2018-01-26T11:56:07+01:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/borg.localrole/commit/56093a1408f33f515c847bd860c9ff98dfa13495

secuirty decorators

Files changed:
M CHANGES.rst
M borg/localrole/workspace.py

diff --git a/CHANGES.rst b/CHANGES.rst
index 7dbc83a..6645597 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -21,7 +21,7 @@ Bug fixes:
     - isort, 
     - ZCA-decorators
     - formatting/readability/pep8,
-    - ...
+    - Security decorators
 
 - Fix test for Zope 4.
   [pbauer]
diff --git a/borg/localrole/workspace.py b/borg/localrole/workspace.py
index 7763f9b..d224697 100644
--- a/borg/localrole/workspace.py
+++ b/borg/localrole/workspace.py
@@ -421,8 +421,7 @@ def _get_principal_ids(self, user):
         principal_ids.insert(0, user.getId())
         return principal_ids
 
-    security.declarePrivate("getRolesInContext")
-
+    @security.private
     def getRolesInContext(self, user, object):
         # we combine the permission of the user with those of the
         # groups she belongs to
@@ -454,8 +453,7 @@ def getRolesInContext(self, user, object):
                             )
         return list(roles)
 
-    security.declarePrivate("checkLocalRolesAllowed")
-
+    @security.private
     @cache(get_key=clra_cache_key, get_cache=store_on_request)
     def checkLocalRolesAllowed(self, user, object, object_roles):
         """Checks if the user has one of the specified roles in the
@@ -499,8 +497,7 @@ def checkLocalRolesAllowed(self, user, object, object_roles):
 
         return None
 
-    security.declarePrivate("getAllLocalRolesInContext")
-
+    @security.private
     def getAllLocalRolesInContext(self, object):
         rolemap = {}
         for obj in self._parent_chain(object):
@@ -516,8 +513,7 @@ def getAllLocalRolesInContext(self, object):
         return rolemap
     # XXX: for BBB only
 
-    security.declarePrivate("_groups")
-
+    @security.private
     def _groups(self, obj, user, workspace):
         """If workspace provides IGroupAwareWorkspace and the user has
         a getGroups() method, yield each group_id returned by that method.


Repository: borg.localrole


Branch: refs/heads/master
Date: 2018-01-26T11:56:41+01:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/borg.localrole/commit/f5c2472b53459c747e9fe31767ce0f2ad6244e8c

sixer

Files changed:
M CHANGES.rst
M borg/localrole/default_adapter.py
M borg/localrole/utils.py
M borg/localrole/workspace.py
M setup.py

diff --git a/CHANGES.rst b/CHANGES.rst
index 6645597..d3dc0d6 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -14,6 +14,9 @@ New features:
 
 Bug fixes:
 
+- Python 2 / 3 compat with six.
+  [jensens]
+
 - Cleanup: 
 
     - No self-contained buildout, 
@@ -22,6 +25,8 @@ Bug fixes:
     - ZCA-decorators
     - formatting/readability/pep8,
     - Security decorators
+  
+  [jensens]
 
 - Fix test for Zope 4.
   [pbauer]
diff --git a/borg/localrole/default_adapter.py b/borg/localrole/default_adapter.py
index 0ab7b0b..91165c0 100644
--- a/borg/localrole/default_adapter.py
+++ b/borg/localrole/default_adapter.py
@@ -7,6 +7,9 @@
 import six
 
 
+import six
+
+
 @implementer(ILocalRoleProvider)
 @adapter(Interface)
 class DefaultLocalRoleAdapter(object):
@@ -77,4 +80,4 @@ def getRoles(self, principal_id):
     def getAllRoles(self):
         """Returns all the local roles assigned in this context:
         (principal_id, [role1, role2])"""
-        return self._rolemap.iteritems()
+        return six.iteritems(self._rolemap)
diff --git a/borg/localrole/utils.py b/borg/localrole/utils.py
index 9f02f37..6834f15 100644
--- a/borg/localrole/utils.py
+++ b/borg/localrole/utils.py
@@ -5,7 +5,7 @@
 from Products.CMFCore.utils import getToolByName
 from Products.PlonePAS.Extensions.Install import activatePluginInterfaces
 from Products.PlonePAS.plugins.local_role import LocalRolesManager
-from StringIO import StringIO
+from six import StringIO
 
 
 def setup_localrole_plugin(portal):
diff --git a/borg/localrole/workspace.py b/borg/localrole/workspace.py
index d224697..b095408 100644
--- a/borg/localrole/workspace.py
+++ b/borg/localrole/workspace.py
@@ -117,11 +117,11 @@ def clra_cache_key(method, self, user, obj, object_roles):
 
           >>> original = rm._get_userfolder
           >>> def logger(self, *args, **kw):
-          ...     print 'checkLocalRolesAllowed called...'
+          ...     print('checkLocalRolesAllowed called...')
           ...     return original(self, *args, **kw)
           >>> rm._get_userfolder = logger
 
-          >>> print rm.checkLocalRolesAllowed(john, obj, ['foo', 'bar'])
+          >>> print(rm.checkLocalRolesAllowed(john, obj, ['foo', 'bar']))
           checkLocalRolesAllowed called...
           None
           >>> [i for i in IAnnotations(request)]
@@ -131,7 +131,7 @@ def clra_cache_key(method, self, user, obj, object_roles):
         Calling the method a second time should directly return the cached
         value, i.e. the logger shouldn't print anything:
 
-          >>> print rm.checkLocalRolesAllowed(john, obj, ['foo', 'bar'])
+          >>> print(rm.checkLocalRolesAllowed(john, obj, ['foo', 'bar']))
           None
 
     """
diff --git a/setup.py b/setup.py
index 435fd71..4ca9795 100644
--- a/setup.py
+++ b/setup.py
@@ -32,6 +32,7 @@
     ),
     install_requires=[
         'setuptools',
+        'six',
         'zope.annotation',
         'zope.component',
         'zope.deferredimport',


Repository: borg.localrole


Branch: refs/heads/master
Date: 2018-01-26T14:05:48+01:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/borg.localrole/commit/71247dcfbb6f82084bdbe951c6b7aa84159923ad

fix syntax error

Files changed:
M borg/localrole/workspace.py

diff --git a/borg/localrole/workspace.py b/borg/localrole/workspace.py
index b095408..1a815aa 100644
--- a/borg/localrole/workspace.py
+++ b/borg/localrole/workspace.py
@@ -105,8 +105,9 @@ def clra_cache_key(method, self, user, obj, object_roles):
           ...         return '42!'
           >>> obj = DummyObjectWithPath()
           >>> obj.REQUEST = request
-          >>> clra_cache_key(fun, 'hmm', john, obj, ['foo', 'bar'])
-          ('john', '42!', ('foo', 'bar'))
+          >>> clra_cache_key(
+          ...     fun, 'hmm', john, obj, ['foo', 'bar']
+          ... )('john', '42!', ('foo', 'bar'))
 
         Now let's check if the results of a call to `checkLocalRolesAllowed`
         is indeed cached, i.e. is the request was annotated correctly.  First


Repository: borg.localrole


Branch: refs/heads/master
Date: 2018-01-28T17:18:37+01:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/borg.localrole/commit/8a0785c113fa6771b83a1913d925bfac33d5a713

fixes problems introduced by refactoring with six

Files changed:
M borg/localrole/default_adapter.py
M borg/localrole/workspace.py

diff --git a/borg/localrole/default_adapter.py b/borg/localrole/default_adapter.py
index 91165c0..1ab7847 100644
--- a/borg/localrole/default_adapter.py
+++ b/borg/localrole/default_adapter.py
@@ -7,9 +7,6 @@
 import six
 
 
-import six
-
-
 @implementer(ILocalRoleProvider)
 @adapter(Interface)
 class DefaultLocalRoleAdapter(object):
diff --git a/borg/localrole/workspace.py b/borg/localrole/workspace.py
index 1a815aa..c5b400c 100644
--- a/borg/localrole/workspace.py
+++ b/borg/localrole/workspace.py
@@ -105,9 +105,8 @@ def clra_cache_key(method, self, user, obj, object_roles):
           ...         return '42!'
           >>> obj = DummyObjectWithPath()
           >>> obj.REQUEST = request
-          >>> clra_cache_key(
-          ...     fun, 'hmm', john, obj, ['foo', 'bar']
-          ... )('john', '42!', ('foo', 'bar'))
+          >>> clra_cache_key(fun, 'hmm', john, obj, ['foo', 'bar'])
+          ('john', '42!', ('foo', 'bar'))
 
         Now let's check if the results of a call to `checkLocalRolesAllowed`
         is indeed cached, i.e. is the request was annotated correctly.  First
@@ -126,8 +125,7 @@ def clra_cache_key(method, self, user, obj, object_roles):
           checkLocalRolesAllowed called...
           None
           >>> [i for i in IAnnotations(request)]
-          ["borg.localrole.workspace.checkLocalRolesAllowed:
-          ('john', '42!', ('foo', 'bar'))"]
+          ["borg.localrole.workspace.checkLocalRolesAllowed:('john', '42!', ('foo', 'bar'))"]
 
         Calling the method a second time should directly return the cached
         value, i.e. the logger shouldn't print anything:
@@ -135,7 +133,7 @@ def clra_cache_key(method, self, user, obj, object_roles):
           >>> print(rm.checkLocalRolesAllowed(john, obj, ['foo', 'bar']))
           None
 
-    """
+    """  # noqa: E501
     request = aq_get(obj, 'REQUEST', None)
     if IAnnotations(request, None) is None:
         raise DontCache


Repository: borg.localrole


Branch: refs/heads/master
Date: 2018-01-28T22:01:13+01:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/borg.localrole/commit/a52d9324b51bd5de892b1db511e9782f64c8b04d

Merge pull request #6 from plone/py3-and-cleanup

Py3 and cleanup

Files changed:
M CHANGES.rst
M borg/__init__.py
M borg/localrole/__init__.py
M borg/localrole/bbb/__init__.py
M borg/localrole/bbb/interfaces.py
M borg/localrole/config.py
M borg/localrole/default_adapter.py
M borg/localrole/factory_adapter.py
M borg/localrole/interfaces.py
M borg/localrole/setuphandlers.py
M borg/localrole/tests.py
M borg/localrole/utils.py
M borg/localrole/workspace.py
M setup.py
D bootstrap.py
D buildout.cfg

diff --git a/CHANGES.rst b/CHANGES.rst
index 727d400..d3dc0d6 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -14,6 +14,20 @@ New features:
 
 Bug fixes:
 
+- Python 2 / 3 compat with six.
+  [jensens]
+
+- Cleanup: 
+
+    - No self-contained buildout, 
+    - utf8-headers, 
+    - isort, 
+    - ZCA-decorators
+    - formatting/readability/pep8,
+    - Security decorators
+  
+  [jensens]
+
 - Fix test for Zope 4.
   [pbauer]
 
diff --git a/bootstrap.py b/bootstrap.py
deleted file mode 100644
index ed57894..0000000
--- a/bootstrap.py
+++ /dev/null
@@ -1,178 +0,0 @@
-##############################################################################
-#
-# Copyright (c) 2006 Zope Foundation and Contributors.
-# All Rights Reserved.
-#
-# This software is subject to the provisions of the Zope Public License,
-# Version 2.1 (ZPL).  A copy of the ZPL should accompany this distribution.
-# THIS SOFTWARE IS PROVIDED "AS IS" AND ANY AND ALL EXPRESS OR IMPLIED
-# WARRANTIES ARE DISCLAIMED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
-# WARRANTIES OF TITLE, MERCHANTABILITY, AGAINST INFRINGEMENT, AND FITNESS
-# FOR A PARTICULAR PURPOSE.
-#
-##############################################################################
-"""Bootstrap a buildout-based project
-
-Simply run this script in a directory containing a buildout.cfg.
-The script accepts buildout command-line options, so you can
-use the -c option to specify an alternate configuration file.
-"""
-
-import os
-import shutil
-import sys
-import tempfile
-
-from optparse import OptionParser
-
-tmpeggs = tempfile.mkdtemp()
-
-usage = '''\
-[DESIRED PYTHON FOR BUILDOUT] bootstrap.py [options]
-
-Bootstraps a buildout-based project.
-
-Simply run this script in a directory containing a buildout.cfg, using the
-Python that you want bin/buildout to use.
-
-Note that by using --find-links to point to local resources, you can keep 
-this script from going over the network.
-'''
-
-parser = OptionParser(usage=usage)
-parser.add_option("-v", "--version", help="use a specific zc.buildout version")
-
-parser.add_option("-t", "--accept-buildout-test-releases",
-                  dest='accept_buildout_test_releases',
-                  action="store_true", default=False,
-                  help=("Normally, if you do not specify a --version, the "
-                        "bootstrap script and buildout gets the newest "
-                        "*final* versions of zc.buildout and its recipes and "
-                        "extensions for you.  If you use this flag, "
-                        "bootstrap and buildout will get the newest releases "
-                        "even if they are alphas or betas."))
-parser.add_option("-c", "--config-file",
-                  help=("Specify the path to the buildout configuration "
-                        "file to be used."))
-parser.add_option("-f", "--find-links",
-                  help=("Specify a URL to search for buildout releases"))
-parser.add_option("--allow-site-packages",
-                  action="store_true", default=False,
-                  help=("Let bootstrap.py use existing site packages"))
-
-
-options, args = parser.parse_args()
-
-######################################################################
-# load/install setuptools
-
-try:
-    if options.allow_site_packages:
-        import setuptools
-        import pkg_resources
-    from urllib.request import urlopen
-except ImportError:
-    from urllib2 import urlopen
-
-ez = {}
-exec(urlopen('https://bootstrap.pypa.io/ez_setup.py').read(), ez)
-
-if not options.allow_site_packages:
-    # ez_setup imports site, which adds site packages
-    # this will remove them from the path to ensure that incompatible versions 
-    # of setuptools are not in the path
-    import site
-    # inside a virtualenv, there is no 'getsitepackages'. 
-    # We can't remove these reliably
-    if hasattr(site, 'getsitepackages'):
-        for sitepackage_path in site.getsitepackages():
-            sys.path[:] = [x for x in sys.path if sitepackage_path not in x]
-
-setup_args = dict(to_dir=tmpeggs, download_delay=0)
-ez['use_setuptools'](**setup_args)
-import setuptools
-import pkg_resources
-
-# This does not (always?) update the default working set.  We will
-# do it.
-for path in sys.path:
-    if path not in pkg_resources.working_set.entries:
-        pkg_resources.working_set.add_entry(path)
-
-######################################################################
-# Install buildout
-
-ws = pkg_resources.working_set
-
-cmd = [sys.executable, '-c',
-       'from setuptools.command.easy_install import main; main()',
-       '-mZqNxd', tmpeggs]
-
-find_links = os.environ.get(
-    'bootstrap-testing-find-links',
-    options.find_links or
-    ('http://downloads.buildout.org/'
-     if options.accept_buildout_test_releases else None)
-    )
-if find_links:
-    cmd.extend(['-f', find_links])
-
-setuptools_path = ws.find(
-    pkg_resources.Requirement.parse('setuptools')).location
-
-requirement = 'zc.buildout'
-version = options.version
-if version is None and not options.accept_buildout_test_releases:
-    # Figure out the most recent final version of zc.buildout.
-    import setuptools.package_index
-    _final_parts = '*final-', '*final'
-
-    def _final_version(parsed_version):
-        for part in parsed_version:
-            if (part[:1] == '*') and (part not in _final_parts):
-                return False
-        return True
-    index = setuptools.package_index.PackageIndex(
-        search_path=[setuptools_path])
-    if find_links:
-        index.add_find_links((find_links,))
-    req = pkg_resources.Requirement.parse(requirement)
-    if index.obtain(req) is not None:
-        best = []
-        bestv = None
-        for dist in index[req.project_name]:
-            distv = dist.parsed_version
-            if _final_version(distv):
-                if bestv is None or distv > bestv:
-                    best = [dist]
-                    bestv = distv
-                elif distv == bestv:
-                    best.append(dist)
-        if best:
-            best.sort()
-            version = best[-1].version
-if version:
-    requirement = '=='.join((requirement, version))
-cmd.append(requirement)
-
-import subprocess
-if subprocess.call(cmd, env=dict(os.environ, PYTHONPATH=setuptools_path)) != 0:
-    raise Exception(
-        "Failed to execute command:\n%s" % repr(cmd)[1:-1])
-
-######################################################################
-# Import and run buildout
-
-ws.add_entry(tmpeggs)
-ws.require(requirement)
-import zc.buildout.buildout
-
-if not [a for a in args if '=' not in a]:
-    args.append('bootstrap')
-
-# if -c was provided, we push it back into args for buildout' main function
-if options.config_file is not None:
-    args[0:0] = ['-c', options.config_file]
-
-zc.buildout.buildout.main(args)
-shutil.rmtree(tmpeggs)
diff --git a/borg/__init__.py b/borg/__init__.py
index e6f192b..ab2575f 100644
--- a/borg/__init__.py
+++ b/borg/__init__.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 # See http://peak.telecommunity.com/DevCenter/setuptools#namespace-packages
 try:
     __import__('pkg_resources').declare_namespace(__name__)
diff --git a/borg/localrole/__init__.py b/borg/localrole/__init__.py
index d4fa660..70aa109 100644
--- a/borg/localrole/__init__.py
+++ b/borg/localrole/__init__.py
@@ -1,7 +1,8 @@
-from Products.PluggableAuthService import registerMultiPlugin
+# -*- coding: utf-8 -*-
 from AccessControl.Permissions import add_user_folders
-
 from borg.localrole import workspace
+from Products.PluggableAuthService import registerMultiPlugin
+
 
 registerMultiPlugin(workspace.WorkspaceLocalRoleManager.meta_type)
 
@@ -9,8 +10,12 @@
 def initialize(context):
     # Register PAS plug-in
 
-    context.registerClass(workspace.WorkspaceLocalRoleManager,
-                          permission=add_user_folders,
-                          constructors=(workspace.manage_addWorkspaceLocalRoleManagerForm,
-                                          workspace.manage_addWorkspaceLocalRoleManager),
-                          visibility=None)
+    context.registerClass(
+        workspace.WorkspaceLocalRoleManager,
+        permission=add_user_folders,
+        constructors=(
+            workspace.manage_addWorkspaceLocalRoleManagerForm,
+            workspace.manage_addWorkspaceLocalRoleManager,
+        ),
+        visibility=None
+    )
diff --git a/borg/localrole/bbb/__init__.py b/borg/localrole/bbb/__init__.py
index e69de29..40a96af 100644
--- a/borg/localrole/bbb/__init__.py
+++ b/borg/localrole/bbb/__init__.py
@@ -0,0 +1 @@
+# -*- coding: utf-8 -*-
diff --git a/borg/localrole/bbb/interfaces.py b/borg/localrole/bbb/interfaces.py
index fbdcd79..94969aa 100644
--- a/borg/localrole/bbb/interfaces.py
+++ b/borg/localrole/bbb/interfaces.py
@@ -1,5 +1,7 @@
+# -*- coding: utf-8 -*-
 from zope.interface import Interface
 
+
 # BBB: These interfaces will be removed in a later version of borg.locarole.
 # You should use the interfaces in borg.localrole.interfaces instead!
 
diff --git a/borg/localrole/config.py b/borg/localrole/config.py
index 1bb272e..994dd88 100644
--- a/borg/localrole/config.py
+++ b/borg/localrole/config.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 # Configuration constants
 
 LOCALROLE_PLUGIN_NAME = 'borg_localroles'
diff --git a/borg/localrole/default_adapter.py b/borg/localrole/default_adapter.py
index de6e232..1ab7847 100644
--- a/borg/localrole/default_adapter.py
+++ b/borg/localrole/default_adapter.py
@@ -1,9 +1,14 @@
-from zope.interface import Interface, implementer
-from zope.component import adapts
+# -*- coding: utf-8 -*-
 from borg.localrole.interfaces import ILocalRoleProvider
+from zope.component import adapter
+from zope.interface import implementer
+from zope.interface import Interface
+
+import six
 
 
 @implementer(ILocalRoleProvider)
+@adapter(Interface)
 class DefaultLocalRoleAdapter(object):
     """Looks at __ac_local_roles__ to find local roles stored
     persistently on an object::
@@ -51,7 +56,6 @@ class DefaultLocalRoleAdapter(object):
         (('dummy2', ['Role1']),)
 
     """
-    adapts(Interface)
 
     def __init__(self, context):
         self.context = context
@@ -73,4 +77,4 @@ def getRoles(self, principal_id):
     def getAllRoles(self):
         """Returns all the local roles assigned in this context:
         (principal_id, [role1, role2])"""
-        return self._rolemap.iteritems()
+        return six.iteritems(self._rolemap)
diff --git a/borg/localrole/factory_adapter.py b/borg/localrole/factory_adapter.py
index 7962f3d..23e34af 100644
--- a/borg/localrole/factory_adapter.py
+++ b/borg/localrole/factory_adapter.py
@@ -1,12 +1,15 @@
-from zope.component import adapts
-from zope.interface import implementer
+# -*- coding: utf-8 -*-
+from Acquisition import aq_inner
+from Acquisition import aq_parent
 from borg.localrole.interfaces import IFactoryTempFolder
 from borg.localrole.interfaces import ILocalRoleProvider
-from Acquisition import aq_inner, aq_parent
 from Products.CMFCore.utils import getToolByName
+from zope.component import adapter
+from zope.interface import implementer
 
 
 @implementer(ILocalRoleProvider)
+@adapter(IFactoryTempFolder)
 class FactoryTempFolderProvider(object):
     """A simple local role provider which just gathers the roles from
     the desired context::
@@ -63,7 +66,10 @@ class FactoryTempFolderProvider(object):
         >>> class ISpecialInterface(Interface):
         ...     pass
         >>> directlyProvides(fold, ISpecialInterface)
-        >>> provideAdapter(SimpleLocalRoleProvider, adapts=(ISpecialInterface,))
+        >>> provideAdapter(
+        ...     SimpleLocalRoleProvider,
+        ...     adapts=(ISpecialInterface,)
+        ... )
         >>> rm.getRolesInContext(user1, fold)
         ['Foo']
         >>> contained = DummyObject().__of__(fold)
@@ -87,7 +93,6 @@ class FactoryTempFolderProvider(object):
         {}
 
     """
-    adapts(IFactoryTempFolder)
 
     def __init__(self, obj):
         self.folder = obj
diff --git a/borg/localrole/interfaces.py b/borg/localrole/interfaces.py
index e89ed5d..9bd2f2e 100644
--- a/borg/localrole/interfaces.py
+++ b/borg/localrole/interfaces.py
@@ -1,13 +1,17 @@
+# -*- coding: utf-8 -*-
 from zope.deferredimport import deprecated
 from zope.interface import Interface
 
+
 deprecated(
-  "Please use borg.localrole.interfaces.ILocalRoleProvider instead",
-  IWorkspace='borg.localrole.bbb.interfaces:IWorkspace')
+    'Please use borg.localrole.interfaces.ILocalRoleProvider instead',
+    IWorkspace='borg.localrole.bbb.interfaces:IWorkspace'
+)
 
 deprecated(
-  "Please use borg.localrole.interfaces.ILocalRoleProvider instead",
-  IGroupAwareWorkspace='borg.localrole.bbb.interfaces:IGroupAwareWorkspace')
+    'Please use borg.localrole.interfaces.ILocalRoleProvider instead',
+    IGroupAwareWorkspace='borg.localrole.bbb.interfaces:IGroupAwareWorkspace'
+)
 
 
 class ILocalRoleProvider(Interface):
diff --git a/borg/localrole/setuphandlers.py b/borg/localrole/setuphandlers.py
index bd29f33..05e3089 100644
--- a/borg/localrole/setuphandlers.py
+++ b/borg/localrole/setuphandlers.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 from borg.localrole.utils import setup_localrole_plugin
 
 
diff --git a/borg/localrole/tests.py b/borg/localrole/tests.py
index 4d0dd38..3c4cd14 100644
--- a/borg/localrole/tests.py
+++ b/borg/localrole/tests.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 from borg.localrole import default_adapter
 from borg.localrole import factory_adapter
 from plone.app.testing import PLONE_INTEGRATION_TESTING
@@ -46,22 +47,27 @@ def getRoles(self):
 
 def test_suite():
     suite = [
-        layered(doctest.DocFileSuite(
-                    'README.txt', package='borg.localrole',
-                    optionflags=(doctest.ELLIPSIS |
-                                 doctest.NORMALIZE_WHITESPACE)),
-                layer=PLONE_INTEGRATION_TESTING),
-        layered(doctest.DocTestSuite(
-            borg.localrole.workspace,
-            optionflags=(doctest.ELLIPSIS |
-                         doctest.NORMALIZE_WHITESPACE)),
-                layer=zca.UNIT_TESTING),
-        layered(doctest.DocTestSuite(
-            factory_adapter,
-            optionflags=(doctest.ELLIPSIS |
-                         doctest.NORMALIZE_WHITESPACE)),
-                layer=zca.UNIT_TESTING),
+        layered(
+            doctest.DocFileSuite(
+                'README.txt',
+                package='borg.localrole',
+                optionflags=(doctest.ELLIPSIS | doctest.NORMALIZE_WHITESPACE)
+            ),
+            layer=PLONE_INTEGRATION_TESTING),
+        layered(
+            doctest.DocTestSuite(
+                borg.localrole.workspace,
+                optionflags=(doctest.ELLIPSIS | doctest.NORMALIZE_WHITESPACE)
+            ),
+            layer=zca.UNIT_TESTING
+        ),
+        layered(
+            doctest.DocTestSuite(
+                factory_adapter,
+                optionflags=(doctest.ELLIPSIS | doctest.NORMALIZE_WHITESPACE)
+            ),
+            layer=zca.UNIT_TESTING
+        ),
         doctest.DocTestSuite(default_adapter),
-        ]
-
+    ]
     return unittest.TestSuite(suite)
diff --git a/borg/localrole/utils.py b/borg/localrole/utils.py
index 5481c68..6834f15 100644
--- a/borg/localrole/utils.py
+++ b/borg/localrole/utils.py
@@ -1,12 +1,11 @@
-from StringIO import StringIO
-
+# -*- coding: utf-8 -*-
 from Acquisition import aq_base
+from borg.localrole.config import LOCALROLE_PLUGIN_NAME
+from borg.localrole.workspace import manage_addWorkspaceLocalRoleManager
 from Products.CMFCore.utils import getToolByName
 from Products.PlonePAS.Extensions.Install import activatePluginInterfaces
 from Products.PlonePAS.plugins.local_role import LocalRolesManager
-
-from borg.localrole.config import LOCALROLE_PLUGIN_NAME
-from borg.localrole.workspace import manage_addWorkspaceLocalRoleManager
+from six import StringIO
 
 
 def setup_localrole_plugin(portal):
diff --git a/borg/localrole/workspace.py b/borg/localrole/workspace.py
index 744a127..c5b400c 100644
--- a/borg/localrole/workspace.py
+++ b/borg/localrole/workspace.py
@@ -1,35 +1,49 @@
-from plone.memoize.volatile import cache, DontCache
-from zope.annotation.interfaces import IAnnotations
-from zope.component import getAdapters
-
-from App.class_init import InitializeClass
-from Acquisition import aq_inner, aq_parent, aq_get
+# -*- coding: utf-8 -*-
 from AccessControl import ClassSecurityInfo
+from Acquisition import aq_get
+from Acquisition import aq_inner
+from Acquisition import aq_parent
+from App.class_init import InitializeClass
+# BBB interfaces, to be removed
+from borg.localrole.bbb.interfaces import IGroupAwareWorkspace
+from borg.localrole.bbb.interfaces import IWorkspace
+from borg.localrole.interfaces import ILocalRoleProvider
+from plone.memoize.volatile import cache
+from plone.memoize.volatile import DontCache
 from Products.PageTemplates.PageTemplateFile import PageTemplateFile
-from Products.PluggableAuthService.utils import classImplements
-from Products.PluggableAuthService.plugins.BasePlugin import BasePlugin
 from Products.PlonePAS.interfaces.plugins import ILocalRolesPlugin
+from Products.PluggableAuthService.plugins.BasePlugin import BasePlugin
+from Products.PluggableAuthService.utils import classImplements
+from zope.annotation.interfaces import IAnnotations
+from zope.component import getAdapters
 
-from borg.localrole.interfaces import ILocalRoleProvider
-
-# BBB interfaces, to be removed
-from borg.localrole.bbb.interfaces import IWorkspace
-from borg.localrole.bbb.interfaces import IGroupAwareWorkspace
 
 manage_addWorkspaceLocalRoleManagerForm = PageTemplateFile(
-        "zmi/WorkspaceLocalRoleManagerForm.pt", globals(),
-        __name__="manage_addWorkspaceRoleManagerForm")
-
-
-def manage_addWorkspaceLocalRoleManager(dispatcher, id, title=None, REQUEST=None):
-    """Add a WorkspaceLocalRoleManager to a Pluggable Authentication Services."""
+    "zmi/WorkspaceLocalRoleManagerForm.pt",
+    globals(),
+    __name__="manage_addWorkspaceRoleManagerForm"
+)
+
+
+def manage_addWorkspaceLocalRoleManager(
+    dispatcher,
+    id,
+    title=None,
+    REQUEST=None
+):
+    """Add a WorkspaceLocalRoleManager to a Pluggable Authentication
+    Services.
+    """
     wlrm = WorkspaceLocalRoleManager(id, title)
     dispatcher._setObject(wlrm.getId(), wlrm)
 
     if REQUEST is not None:
         REQUEST.RESPONSE.redirect(
-                '%s/manage_workspace?manage_tabs_message=WorkspaceLocalRoleManager+added.'
-                % dispatcher.absolute_url())
+            '{0}/manage_workspace?'
+            'manage_tabs_message=WorkspaceLocalRoleManager+added.'.format(
+                dispatcher.absolute_url()
+            )
+        )
 
 
 # memoize support for `checkLocalRolesAllowed`
@@ -103,11 +117,11 @@ def clra_cache_key(method, self, user, obj, object_roles):
 
           >>> original = rm._get_userfolder
           >>> def logger(self, *args, **kw):
-          ...     print 'checkLocalRolesAllowed called...'
+          ...     print('checkLocalRolesAllowed called...')
           ...     return original(self, *args, **kw)
           >>> rm._get_userfolder = logger
 
-          >>> print rm.checkLocalRolesAllowed(john, obj, ['foo', 'bar'])
+          >>> print(rm.checkLocalRolesAllowed(john, obj, ['foo', 'bar']))
           checkLocalRolesAllowed called...
           None
           >>> [i for i in IAnnotations(request)]
@@ -116,10 +130,10 @@ def clra_cache_key(method, self, user, obj, object_roles):
         Calling the method a second time should directly return the cached
         value, i.e. the logger shouldn't print anything:
 
-          >>> print rm.checkLocalRolesAllowed(john, obj, ['foo', 'bar'])
+          >>> print(rm.checkLocalRolesAllowed(john, obj, ['foo', 'bar']))
           None
 
-    """
+    """  # noqa: E501
     request = aq_get(obj, 'REQUEST', None)
     if IAnnotations(request, None) is None:
         raise DontCache
@@ -142,8 +156,8 @@ class WorkspaceLocalRoleManager(BasePlugin):
 
     First we need to make and register an adapter to provide some roles::
 
-        >>> from zope.interface import implements, Interface
-        >>> from zope.component import adapts
+        >>> from zope.interface import implementer, Interface
+        >>> from zope.component import adapter
         >>> from borg.localrole.tests import SimpleLocalRoleProvider
         >>> from borg.localrole.tests import DummyUser
         >>> from zope.component import provideAdapter
@@ -153,8 +167,9 @@ class WorkspaceLocalRoleManager(BasePlugin):
     We need an object to adapt, we require nothing of this object,
     except it must be adaptable (e.g. have an interface)::
 
-        >>> class DummyObject(object):
-        ...     implements(Interface)
+        >>> @implementer(Interface)
+        ... class DummyObject(object):
+        ...     pass
         >>> ob = DummyObject()
 
     And we need some users that we'll check the permissions of::
@@ -250,12 +265,14 @@ class WorkspaceLocalRoleManager(BasePlugin):
         >>> from zope.interface import directlyProvides
         >>> directlyProvides(next, ISpecial1)
         >>> directlyProvides(other, ISpecial2)
-        >>> class Adapter1(LessSimpleLocalRoleProvider):
-        ...     adapts(ISpecial1)
+        >>> @adapter(ISpecial1)
+        ... class Adapter1(LessSimpleLocalRoleProvider):
+        ...
         ...     userid = 'bogus_user'
         ...     roles = ('Bar',)
-        >>> class Adapter2(LessSimpleLocalRoleProvider):
-        ...     adapts(ISpecial2)
+        >>> @adapter(ISpecial2)
+        ... class Adapter2(LessSimpleLocalRoleProvider):
+        ...
         ...     userid = 'bogus_user3'
         ...     roles = ('Foobar',)
         >>> user3 = DummyUser('bogus_user3')
@@ -403,8 +420,7 @@ def _get_principal_ids(self, user):
         principal_ids.insert(0, user.getId())
         return principal_ids
 
-    security.declarePrivate("getRolesInContext")
-
+    @security.private
     def getRolesInContext(self, user, object):
         # we combine the permission of the user with those of the
         # groups she belongs to
@@ -424,15 +440,19 @@ def getRolesInContext(self, user, object):
                         roles.update(a.getRoles(pid))
                 # XXX: BBB code, kicks in only if there's no proper adapter
                 if count == -1:
-                    workspace = IGroupAwareWorkspace(obj, IWorkspace(obj, None))
+                    workspace = IGroupAwareWorkspace(
+                        obj,
+                        IWorkspace(obj, None)
+                    )
                     if workspace is not None:
                         roles.update(workspace.getLocalRolesForPrincipal(user))
                         for group in self._groups(obj, user, workspace):
-                            roles.update(workspace.getLocalRolesForPrincipal(group))
+                            roles.update(
+                                workspace.getLocalRolesForPrincipal(group)
+                            )
         return list(roles)
 
-    security.declarePrivate("checkLocalRolesAllowed")
-
+    @security.private
     @cache(get_key=clra_cache_key, get_cache=store_on_request)
     def checkLocalRolesAllowed(self, user, object, object_roles):
         """Checks if the user has one of the specified roles in the
@@ -476,8 +496,7 @@ def checkLocalRolesAllowed(self, user, object, object_roles):
 
         return None
 
-    security.declarePrivate("getAllLocalRolesInContext")
-
+    @security.private
     def getAllLocalRolesInContext(self, object):
         rolemap = {}
         for obj in self._parent_chain(object):
@@ -493,8 +512,7 @@ def getAllLocalRolesInContext(self, object):
         return rolemap
     # XXX: for BBB only
 
-    security.declarePrivate("_groups")
-
+    @security.private
     def _groups(self, obj, user, workspace):
         """If workspace provides IGroupAwareWorkspace and the user has
         a getGroups() method, yield each group_id returned by that method.
@@ -506,5 +524,6 @@ def _groups(self, obj, user, workspace):
                 for group_id in getGroups():
                     yield acl_users.getGroupById(group_id)
 
+
 classImplements(WorkspaceLocalRoleManager, ILocalRolesPlugin)
 InitializeClass(WorkspaceLocalRoleManager)
diff --git a/buildout.cfg b/buildout.cfg
deleted file mode 100644
index fd3ed83..0000000
--- a/buildout.cfg
+++ /dev/null
@@ -1,7 +0,0 @@
-[buildout]
-extends = https://raw.githubusercontent.com/collective/buildout.plonetest/master/test-5.x.cfg
-package-name = borg.localrole
-package-extras = [test]
-
-[versions]
-borg.localrole =
diff --git a/setup.py b/setup.py
index 59835a8..4ca9795 100644
--- a/setup.py
+++ b/setup.py
@@ -1,4 +1,7 @@
-from setuptools import setup, find_packages
+# -*- coding: utf-8 -*-
+from setuptools import find_packages
+from setuptools import setup
+
 
 name = 'borg.localrole'
 version = '3.1.5.dev0'
@@ -29,6 +32,7 @@
     ),
     install_requires=[
         'setuptools',
+        'six',
         'zope.annotation',
         'zope.component',
         'zope.deferredimport',



Repository: plone.app.event


Branch: refs/heads/master
Date: 2018-01-25T13:50:50+01:00
Author: Philip Bauer (pbauer) <bauer@starzel.de>
Commit: https://github.com/plone/plone.app.event/commit/29c59099423289948816ebf7c343bddb9c424cf0

Add Python 2 / 3 compatibility

Files changed:
M CHANGES.rst
M plone/app/event/base.py
M plone/app/event/dx/behaviors.py
M plone/app/event/ical/importer.py
M plone/app/event/portlets/__init__.py
M plone/app/event/recurrence.py
M plone/app/event/tests/test_base_module.py
M plone/app/event/tests/test_portlet_calendar.py
M plone/app/event/tests/test_portlet_events.py
M setup.py

diff --git a/CHANGES.rst b/CHANGES.rst
index 19e0542e..8df1e547 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -27,6 +27,9 @@ New features:
 
 Bug fixes:
 
+- Add Python 2 / 3 compatibility.
+  [pbauer]
+
 - iCalendar import: Fix usage of ``sync_uid``, which wasn't correctly implemented since plone.app.event 2.0.
   [thet]
 
diff --git a/plone/app/event/base.py b/plone/app/event/base.py
index bfbc837c..c8cf4bb0 100644
--- a/plone/app/event/base.py
+++ b/plone/app/event/base.py
@@ -1,4 +1,3 @@
-import itertools
 
 from Acquisition import aq_inner
 from Acquisition import aq_parent
@@ -35,6 +34,7 @@
 
 
 import pytz
+import six
 
 
 DEFAULT_END_DELTA = 1  # hours
@@ -221,8 +221,8 @@ def filter_and_resort(context, brains, start, end, sort, sort_reverse):
         _allstarts = sorted(idx['start'])
         _allends = sorted(idx['end'])
         # assuming (start, end) pairs belong together
-        #assert(len(_allstarts) == len(_allends))
-        _occ = itertools.izip(_allstarts, _allends)
+        # assert(len(_allstarts) == len(_allends))
+        _occ = six.moves.zip(_allstarts, _allends)
         if start:
             _occ = [(s, e) for (s, e) in _occ if e >= _start]
         if end:
diff --git a/plone/app/event/dx/behaviors.py b/plone/app/event/dx/behaviors.py
index aded161d..d312fcd9 100644
--- a/plone/app/event/dx/behaviors.py
+++ b/plone/app/event/dx/behaviors.py
@@ -461,7 +461,7 @@ def _recurrence_upcoming_event(self):
         adapter = IRecurrenceSupport(self.context)
         occs = adapter.occurrences(range_start=localized_now())
         try:
-            return occs.next()
+            return next(occs)
         except StopIteration:
             # No more future occurrences: passed event
             return IEventBasic(self.context)
diff --git a/plone/app/event/ical/importer.py b/plone/app/event/ical/importer.py
index 4fff7f13..23719406 100644
--- a/plone/app/event/ical/importer.py
+++ b/plone/app/event/ical/importer.py
@@ -31,7 +31,8 @@
 import icalendar
 import random
 import transaction
-import urllib2
+
+from six.moves import urllib
 
 
 def ical_import(container, ics_resource, event_type,
@@ -323,7 +324,7 @@ def handleSaveImport(self, action):
                 ical_resource = ical_file.data
                 ical_import_from = ical_file.filename
             else:
-                ical_resource = urllib2.urlopen(ical_url).read()
+                ical_resource = urllib.request.urlopen(ical_url).read()
                 ical_import_from = ical_url
 
             import_metadata = ical_import(
diff --git a/plone/app/event/portlets/__init__.py b/plone/app/event/portlets/__init__.py
index 30720d29..60eb2861 100644
--- a/plone/app/event/portlets/__init__.py
+++ b/plone/app/event/portlets/__init__.py
@@ -3,6 +3,9 @@
 from plone.app.event.base import find_navroot
 
 
+import six
+
+
 def get_calendar_url(context, search_base):
     # search_base is always from the portal_root object. We won't include
     # the path from the portal root object, so we traverse to the calendar
@@ -10,7 +13,7 @@ def get_calendar_url(context, search_base):
     calendar_url = None
     if search_base:
         portal = find_ploneroot(context)
-        if isinstance(search_base, unicode):
+        if isinstance(search_base, six.text_type):
             search_base = search_base.encode('utf8')
         search_base = '/'.join(search_base.split('/')[2:])
         calendar_url = portal.unrestrictedTraverse(
diff --git a/plone/app/event/recurrence.py b/plone/app/event/recurrence.py
index 22177ce7..697e5b18 100644
--- a/plone/app/event/recurrence.py
+++ b/plone/app/event/recurrence.py
@@ -114,7 +114,7 @@ def publishTraverse(self, request, name):
         if dateobj:
             occs = IRecurrenceSupport(context).occurrences(range_start=dateobj)
             try:
-                occurrence = occs.next()
+                occurrence = next(occs)
                 occ_acc = IEventAccessor(occurrence)
                 if is_same_day(dateobj, occ_acc.start):
                     return occurrence
diff --git a/plone/app/event/tests/test_base_module.py b/plone/app/event/tests/test_base_module.py
index 4527c78a..5218cefb 100644
--- a/plone/app/event/tests/test_base_module.py
+++ b/plone/app/event/tests/test_base_module.py
@@ -40,6 +40,7 @@
 
 
 import pytz
+import six
 import unittest
 
 
@@ -320,10 +321,10 @@ def test_date_speller(self):
         # locale specific
         # TODO: test better.
         self.assertTrue(isinstance(date_spelled['wkday'], int))
-        self.assertTrue(isinstance(date_spelled['month_name'], basestring))
-        self.assertTrue(isinstance(date_spelled['month_abbr'], basestring))
-        self.assertTrue(isinstance(date_spelled['wkday_name'], basestring))
-        self.assertTrue(isinstance(date_spelled['wkday_abbr'], basestring))
+        self.assertTrue(isinstance(date_spelled['month_name'], six.string_types))
+        self.assertTrue(isinstance(date_spelled['month_abbr'], six.string_types))
+        self.assertTrue(isinstance(date_spelled['wkday_name'], six.string_types))
+        self.assertTrue(isinstance(date_spelled['wkday_abbr'], six.string_types))
 
 
 class TimezoneTest(unittest.TestCase):
diff --git a/plone/app/event/tests/test_portlet_calendar.py b/plone/app/event/tests/test_portlet_calendar.py
index 433663fc..4fd54767 100644
--- a/plone/app/event/tests/test_portlet_calendar.py
+++ b/plone/app/event/tests/test_portlet_calendar.py
@@ -74,7 +74,7 @@ def testInvokeAddview(self):
 
         self.assertEqual(len(mapping), 1)
         self.assertTrue(
-            isinstance(mapping.values()[0], portlet_calendar.Assignment)
+            isinstance(list(mapping.values())[0], portlet_calendar.Assignment)
         )
 
     def testRenderer(self):
diff --git a/plone/app/event/tests/test_portlet_events.py b/plone/app/event/tests/test_portlet_events.py
index c2698839..c7350cd4 100644
--- a/plone/app/event/tests/test_portlet_events.py
+++ b/plone/app/event/tests/test_portlet_events.py
@@ -75,7 +75,7 @@ def testInvokeAddview(self):
 
         self.assertEqual(len(mapping), 1)
         self.assertTrue(
-            isinstance(mapping.values()[0], portlet_events.Assignment)
+            isinstance(list(mapping.values())[0], portlet_events.Assignment)
         )
 
     def testInvokeEditView(self):
diff --git a/setup.py b/setup.py
index c8f39f8b..568d3324 100644
--- a/setup.py
+++ b/setup.py
@@ -70,6 +70,7 @@
         'plone.uuid',
         'plone.z3cform',
         'pytz',
+        'six',
         'transaction',
         'z3c.form >= 3.2.1.dev0',
         'zope.annotation',


Repository: plone.app.event


Branch: refs/heads/master
Date: 2018-01-27T00:18:16+01:00
Author: Philip Bauer (pbauer) <bauer@starzel.de>
Commit: https://github.com/plone/plone.app.event/commit/e239e8fa156621a49d903a6607517b78b789dccb

Merge pull request #274 from plone/python3

Add Python 2 / 3 compatibility

Files changed:
M CHANGES.rst
M plone/app/event/base.py
M plone/app/event/dx/behaviors.py
M plone/app/event/ical/importer.py
M plone/app/event/portlets/__init__.py
M plone/app/event/recurrence.py
M plone/app/event/tests/test_base_module.py
M plone/app/event/tests/test_portlet_calendar.py
M plone/app/event/tests/test_portlet_events.py
M setup.py

diff --git a/CHANGES.rst b/CHANGES.rst
index 19e0542e..8df1e547 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -27,6 +27,9 @@ New features:
 
 Bug fixes:
 
+- Add Python 2 / 3 compatibility.
+  [pbauer]
+
 - iCalendar import: Fix usage of ``sync_uid``, which wasn't correctly implemented since plone.app.event 2.0.
   [thet]
 
diff --git a/plone/app/event/base.py b/plone/app/event/base.py
index bfbc837c..c8cf4bb0 100644
--- a/plone/app/event/base.py
+++ b/plone/app/event/base.py
@@ -1,4 +1,3 @@
-import itertools
 
 from Acquisition import aq_inner
 from Acquisition import aq_parent
@@ -35,6 +34,7 @@
 
 
 import pytz
+import six
 
 
 DEFAULT_END_DELTA = 1  # hours
@@ -221,8 +221,8 @@ def filter_and_resort(context, brains, start, end, sort, sort_reverse):
         _allstarts = sorted(idx['start'])
         _allends = sorted(idx['end'])
         # assuming (start, end) pairs belong together
-        #assert(len(_allstarts) == len(_allends))
-        _occ = itertools.izip(_allstarts, _allends)
+        # assert(len(_allstarts) == len(_allends))
+        _occ = six.moves.zip(_allstarts, _allends)
         if start:
             _occ = [(s, e) for (s, e) in _occ if e >= _start]
         if end:
diff --git a/plone/app/event/dx/behaviors.py b/plone/app/event/dx/behaviors.py
index aded161d..d312fcd9 100644
--- a/plone/app/event/dx/behaviors.py
+++ b/plone/app/event/dx/behaviors.py
@@ -461,7 +461,7 @@ def _recurrence_upcoming_event(self):
         adapter = IRecurrenceSupport(self.context)
         occs = adapter.occurrences(range_start=localized_now())
         try:
-            return occs.next()
+            return next(occs)
         except StopIteration:
             # No more future occurrences: passed event
             return IEventBasic(self.context)
diff --git a/plone/app/event/ical/importer.py b/plone/app/event/ical/importer.py
index 4fff7f13..23719406 100644
--- a/plone/app/event/ical/importer.py
+++ b/plone/app/event/ical/importer.py
@@ -31,7 +31,8 @@
 import icalendar
 import random
 import transaction
-import urllib2
+
+from six.moves import urllib
 
 
 def ical_import(container, ics_resource, event_type,
@@ -323,7 +324,7 @@ def handleSaveImport(self, action):
                 ical_resource = ical_file.data
                 ical_import_from = ical_file.filename
             else:
-                ical_resource = urllib2.urlopen(ical_url).read()
+                ical_resource = urllib.request.urlopen(ical_url).read()
                 ical_import_from = ical_url
 
             import_metadata = ical_import(
diff --git a/plone/app/event/portlets/__init__.py b/plone/app/event/portlets/__init__.py
index 30720d29..60eb2861 100644
--- a/plone/app/event/portlets/__init__.py
+++ b/plone/app/event/portlets/__init__.py
@@ -3,6 +3,9 @@
 from plone.app.event.base import find_navroot
 
 
+import six
+
+
 def get_calendar_url(context, search_base):
     # search_base is always from the portal_root object. We won't include
     # the path from the portal root object, so we traverse to the calendar
@@ -10,7 +13,7 @@ def get_calendar_url(context, search_base):
     calendar_url = None
     if search_base:
         portal = find_ploneroot(context)
-        if isinstance(search_base, unicode):
+        if isinstance(search_base, six.text_type):
             search_base = search_base.encode('utf8')
         search_base = '/'.join(search_base.split('/')[2:])
         calendar_url = portal.unrestrictedTraverse(
diff --git a/plone/app/event/recurrence.py b/plone/app/event/recurrence.py
index 22177ce7..697e5b18 100644
--- a/plone/app/event/recurrence.py
+++ b/plone/app/event/recurrence.py
@@ -114,7 +114,7 @@ def publishTraverse(self, request, name):
         if dateobj:
             occs = IRecurrenceSupport(context).occurrences(range_start=dateobj)
             try:
-                occurrence = occs.next()
+                occurrence = next(occs)
                 occ_acc = IEventAccessor(occurrence)
                 if is_same_day(dateobj, occ_acc.start):
                     return occurrence
diff --git a/plone/app/event/tests/test_base_module.py b/plone/app/event/tests/test_base_module.py
index 4527c78a..5218cefb 100644
--- a/plone/app/event/tests/test_base_module.py
+++ b/plone/app/event/tests/test_base_module.py
@@ -40,6 +40,7 @@
 
 
 import pytz
+import six
 import unittest
 
 
@@ -320,10 +321,10 @@ def test_date_speller(self):
         # locale specific
         # TODO: test better.
         self.assertTrue(isinstance(date_spelled['wkday'], int))
-        self.assertTrue(isinstance(date_spelled['month_name'], basestring))
-        self.assertTrue(isinstance(date_spelled['month_abbr'], basestring))
-        self.assertTrue(isinstance(date_spelled['wkday_name'], basestring))
-        self.assertTrue(isinstance(date_spelled['wkday_abbr'], basestring))
+        self.assertTrue(isinstance(date_spelled['month_name'], six.string_types))
+        self.assertTrue(isinstance(date_spelled['month_abbr'], six.string_types))
+        self.assertTrue(isinstance(date_spelled['wkday_name'], six.string_types))
+        self.assertTrue(isinstance(date_spelled['wkday_abbr'], six.string_types))
 
 
 class TimezoneTest(unittest.TestCase):
diff --git a/plone/app/event/tests/test_portlet_calendar.py b/plone/app/event/tests/test_portlet_calendar.py
index 433663fc..4fd54767 100644
--- a/plone/app/event/tests/test_portlet_calendar.py
+++ b/plone/app/event/tests/test_portlet_calendar.py
@@ -74,7 +74,7 @@ def testInvokeAddview(self):
 
         self.assertEqual(len(mapping), 1)
         self.assertTrue(
-            isinstance(mapping.values()[0], portlet_calendar.Assignment)
+            isinstance(list(mapping.values())[0], portlet_calendar.Assignment)
         )
 
     def testRenderer(self):
diff --git a/plone/app/event/tests/test_portlet_events.py b/plone/app/event/tests/test_portlet_events.py
index c2698839..c7350cd4 100644
--- a/plone/app/event/tests/test_portlet_events.py
+++ b/plone/app/event/tests/test_portlet_events.py
@@ -75,7 +75,7 @@ def testInvokeAddview(self):
 
         self.assertEqual(len(mapping), 1)
         self.assertTrue(
-            isinstance(mapping.values()[0], portlet_events.Assignment)
+            isinstance(list(mapping.values())[0], portlet_events.Assignment)
         )
 
     def testInvokeEditView(self):
diff --git a/setup.py b/setup.py
index c8f39f8b..568d3324 100644
--- a/setup.py
+++ b/setup.py
@@ -70,6 +70,7 @@
         'plone.uuid',
         'plone.z3cform',
         'pytz',
+        'six',
         'transaction',
         'z3c.form >= 3.2.1.dev0',
         'zope.annotation',


